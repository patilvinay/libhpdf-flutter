// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Holds bindings to cJSON.
class LibHaru {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibHaru(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibHaru.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return __calloc_base(
      _Count,
      _Size,
    );
  }

  late final __calloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('_calloc_base');
  late final __calloc_base =
      __calloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int _callnewh(
    int _Size,
  ) {
    return __callnewh(
      _Size,
    );
  }

  late final __callnewhPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>('_callnewh');
  late final __callnewh = __callnewhPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __expand(
      _Block,
      _Size,
    );
  }

  late final __expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_expand');
  late final __expand = __expandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __free_base(
      _Block,
    );
  }

  late final __free_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_free_base');
  late final __free_base =
      __free_basePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return __malloc_base(
      _Size,
    );
  }

  late final __malloc_basePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          '_malloc_base');
  late final __malloc_base =
      __malloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize_base(
      _Block,
    );
  }

  late final __msize_basePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize_base');
  late final __msize_base =
      __msize_basePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize(
      _Block,
    );
  }

  late final __msizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize');
  late final __msize =
      __msizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __realloc_base(
      _Block,
      _Size,
    );
  }

  late final __realloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_realloc_base');
  late final __realloc_base = __realloc_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc_base(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc_base');
  late final __recalloc_base = __recalloc_basePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc');
  late final __recalloc = __recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __aligned_free(
      _Block,
    );
  }

  late final __aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_aligned_free');
  late final __aligned_free =
      __aligned_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return __aligned_malloc(
      _Size,
      _Alignment,
    );
  }

  late final __aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('_aligned_malloc');
  late final __aligned_malloc = __aligned_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_malloc(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_malloc');
  late final __aligned_offset_malloc = __aligned_offset_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_msize(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_msizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_msize');
  late final __aligned_msize = __aligned_msizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_realloc(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_offset_realloc');
  late final __aligned_offset_realloc = __aligned_offset_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_recalloc');
  late final __aligned_offset_recalloc =
      __aligned_offset_recallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_realloc(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_realloc');
  late final __aligned_realloc = __aligned_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_recalloc');
  late final __aligned_recalloc = __aligned_recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('bsearch_s');
  late final _bsearch_s = _bsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('qsort_s');
  late final _qsort_s = _qsort_sPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtSecureSearchSortCompareFunction, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lfind_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lfind_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lfind_s');
  late final __lfind_s = __lfind_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lfind');
  late final __lfind = __lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lsearch_s');
  late final __lsearch_s = __lsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lsearch');
  late final __lsearch = __lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lfind1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lfind');
  late final _lfind1 = _lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lsearch1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lsearch');
  late final _lsearch1 = _lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_itow_s');
  late final __itow_s = __itow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _itow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_itow');
  late final __itow = __itowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_ltow_s');
  late final __ltow_s = __ltow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ltow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ltow');
  late final __ltow = __ltowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_ultow_s');
  late final __ultow_s = __ultow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ultow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ultow');
  late final __ultow = __ultowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  double wcstod(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstod_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstod_l');
  late final __wcstod_l = __wcstod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  int wcstol(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstol_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstol_l');
  late final __wcstol_l = __wcstol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoll(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoll_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoll_l');
  late final __wcstoll_l = __wcstoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoul(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoul_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoul_l');
  late final __wcstoul_l = __wcstoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoull(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoull_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoull_l');
  late final __wcstoull_l = __wcstoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  double wcstof(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstof_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstof_l');
  late final __wcstof_l = __wcstof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  double _wtof(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtof');
  late final __wtof =
      __wtofPtr.asFunction<double Function(ffi.Pointer<ffi.WChar>)>();

  double _wtof_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtof_l');
  late final __wtof_l = __wtof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoi(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtoi');
  late final __wtoi =
      __wtoiPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi_l');
  late final __wtoi_l =
      __wtoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtol(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtol');
  late final __wtol =
      __wtolPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtol_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtol_l');
  late final __wtol_l =
      __wtol_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoll(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtollPtr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoll');
  late final __wtoll =
      __wtollPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoll_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoll_l');
  late final __wtoll_l = __wtoll_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_i64tow_s');
  late final __i64tow_s = __i64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _i64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_i64tow');
  late final __i64tow = __i64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Int)>>('_ui64tow_s');
  late final __ui64tow_s = __ui64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ui64tow');
  late final __ui64tow = __ui64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _wtoi64(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64Ptr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoi64');
  late final __wtoi64 =
      __wtoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi64_l');
  late final __wtoi64_l = __wtoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcstoi64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoi64');
  late final __wcstoi64 = __wcstoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoi64_l');
  late final __wcstoi64_l = __wcstoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int _wcstoui64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoui64');
  late final __wcstoui64 = __wcstoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoui64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoui64_l');
  late final __wcstoui64_l = __wcstoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wfullpath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wfullpath');
  late final __wfullpath = __wfullpathPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wmakepath_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath_s');
  late final __wmakepath_s = __wmakepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wmakepath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath');
  late final __wmakepath = __wmakepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  void _wsplitpath(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsplitpath');
  late final __wsplitpath = __wsplitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsplitpath_s(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.WChar> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.WChar> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.WChar> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wsplitpath_s');
  late final __wsplitpath_s = __wsplitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int)>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>)>>('_wdupenv_s');
  late final __wdupenv_s = __wdupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wgetenv(
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wgetenv');
  late final __wgetenv = __wgetenvPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wgetenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.WChar>)>>('_wgetenv_s');
  late final __wgetenv_s = __wgetenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.WChar>)>();

  int _wputenv(
    ffi.Pointer<ffi.WChar> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wputenv');
  late final __wputenv =
      __wputenvPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wputenv_s(
    ffi.Pointer<ffi.WChar> _Name,
    ffi.Pointer<ffi.WChar> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wputenv_s');
  late final __wputenv_s = __wputenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wsearchenv_s(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wsearchenv_s');
  late final __wsearchenv_s = __wsearchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int)>();

  void _wsearchenv(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsearchenv');
  late final __wsearchenv = __wsearchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsystem(
    ffi.Pointer<ffi.WChar> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wsystem');
  late final __wsystem =
      __wsystemPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  void _swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return __swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final __swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('_swab');
  late final __swab = __swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void exit(
    int _Code,
  ) {
    return _exit1(
      _Code,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void _exit(
    int _Code,
  ) {
    return __exit(
      _Code,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int _Code,
  ) {
    return __Exit(
      _Code,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return __set_abort_behavior(
      _Flags,
      _Mask,
    );
  }

  late final __set_abort_behaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_set_abort_behavior');
  late final __set_abort_behavior =
      __set_abort_behaviorPtr.asFunction<int Function(int, int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _onexit_t _onexit(
    _onexit_t _Func,
  ) {
    return __onexit(
      _Func,
    );
  }

  late final __onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('_onexit');
  late final __onexit = __onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _purecall_handler _set_purecall_handler(
    _purecall_handler _Handler,
  ) {
    return __set_purecall_handler(
      _Handler,
    );
  }

  late final __set_purecall_handlerPtr = _lookup<
          ffi.NativeFunction<_purecall_handler Function(_purecall_handler)>>(
      '_set_purecall_handler');
  late final __set_purecall_handler = __set_purecall_handlerPtr
      .asFunction<_purecall_handler Function(_purecall_handler)>();

  _purecall_handler _get_purecall_handler() {
    return __get_purecall_handler();
  }

  late final __get_purecall_handlerPtr =
      _lookup<ffi.NativeFunction<_purecall_handler Function()>>(
          '_get_purecall_handler');
  late final __get_purecall_handler =
      __get_purecall_handlerPtr.asFunction<_purecall_handler Function()>();

  _invalid_parameter_handler _set_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_invalid_parameter_handlerPtr = _lookup<
      ffi.NativeFunction<
          _invalid_parameter_handler Function(
              _invalid_parameter_handler)>>('_set_invalid_parameter_handler');
  late final __set_invalid_parameter_handler =
      __set_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_invalid_parameter_handler() {
    return __get_invalid_parameter_handler();
  }

  late final __get_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_invalid_parameter_handler');
  late final __get_invalid_parameter_handler =
      __get_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_thread_local_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_thread_local_invalid_parameter_handlerPtr = _lookup<
          ffi.NativeFunction<
              _invalid_parameter_handler Function(_invalid_parameter_handler)>>(
      '_set_thread_local_invalid_parameter_handler');
  late final __set_thread_local_invalid_parameter_handler =
      __set_thread_local_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_thread_local_invalid_parameter_handler() {
    return __get_thread_local_invalid_parameter_handler();
  }

  late final __get_thread_local_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_thread_local_invalid_parameter_handler');
  late final __get_thread_local_invalid_parameter_handler =
      __get_thread_local_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  int _set_error_mode(
    int _Mode,
  ) {
    return __set_error_mode(
      _Mode,
    );
  }

  late final __set_error_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_set_error_mode');
  late final __set_error_mode =
      __set_error_modePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> _errno1() {
    return __errno1();
  }

  late final __errno1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno1 =
      __errno1Ptr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno1(
    int _Value,
  ) {
    return __set_errno1(
      _Value,
    );
  }

  late final __set_errno1Ptr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno1 = __set_errno1Ptr.asFunction<int Function(int)>();

  int _get_errno1(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno1(
      _Value,
    );
  }

  late final __get_errno1Ptr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno1 =
      __get_errno1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedLong> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedLong> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.UnsignedLong> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.UnsignedLong)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.UnsignedLong> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.UnsignedLong>)>>(
      '_get_doserrno');
  late final __get_doserrno = __get_doserrnoPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __sys_errlist() {
    return ___sys_errlist();
  }

  late final ___sys_errlistPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__sys_errlist');
  late final ___sys_errlist = ___sys_errlistPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Int> __sys_nerr() {
    return ___sys_nerr();
  }

  late final ___sys_nerrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__sys_nerr');
  late final ___sys_nerr =
      ___sys_nerrPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrMsg,
  ) {
    return _perror(
      _ErrMsg,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __p__pgmptr() {
    return ___p__pgmptr();
  }

  late final ___p__pgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__p__pgmptr');
  late final ___p__pgmptr = ___p__pgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.WChar>> __p__wpgmptr() {
    return ___p__wpgmptr();
  }

  late final ___p__wpgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>>(
      '__p__wpgmptr');
  late final ___p__wpgmptr = ___p__wpgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>();

  ffi.Pointer<ffi.Int> __p__fmode() {
    return ___p__fmode();
  }

  late final ___p__fmodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__fmode');
  late final ___p__fmode =
      ___p__fmodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Value,
  ) {
    return __get_pgmptr(
      _Value,
    );
  }

  late final __get_pgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('_get_pgmptr');
  late final __get_pgmptr = __get_pgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Value,
  ) {
    return __get_wpgmptr(
      _Value,
    );
  }

  late final __get_wpgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('_get_wpgmptr');
  late final __get_wpgmptr = __get_wpgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int _set_fmode(
    int _Mode,
  ) {
    return __set_fmode(
      _Mode,
    );
  }

  late final __set_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_fmode');
  late final __set_fmode = __set_fmodePtr.asFunction<int Function(int)>();

  int _get_fmode(
    ffi.Pointer<ffi.Int> _PMode,
  ) {
    return __get_fmode(
      _PMode,
    );
  }

  late final __get_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_fmode');
  late final __get_fmode =
      __get_fmodePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int abs(
    int _Number,
  ) {
    return _abs(
      _Number,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _Number,
  ) {
    return _labs(
      _Number,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _Number,
  ) {
    return _llabs(
      _Number,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  int _abs64(
    int _Number,
  ) {
    return __abs64(
      _Number,
    );
  }

  late final __abs64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>(
          '_abs64');
  late final __abs64 = __abs64Ptr.asFunction<int Function(int)>();

  int _byteswap_ushort(
    int _Number,
  ) {
    return __byteswap_ushort(
      _Number,
    );
  }

  late final __byteswap_ushortPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedShort Function(ffi.UnsignedShort)>>(
      '_byteswap_ushort');
  late final __byteswap_ushort =
      __byteswap_ushortPtr.asFunction<int Function(int)>();

  int _byteswap_ulong(
    int _Number,
  ) {
    return __byteswap_ulong(
      _Number,
    );
  }

  late final __byteswap_ulongPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.UnsignedLong)>>(
          '_byteswap_ulong');
  late final __byteswap_ulong =
      __byteswap_ulongPtr.asFunction<int Function(int)>();

  int _byteswap_uint64(
    int _Number,
  ) {
    return __byteswap_uint64(
      _Number,
    );
  }

  late final __byteswap_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong)>>('_byteswap_uint64');
  late final __byteswap_uint64 =
      __byteswap_uint64Ptr.asFunction<int Function(int)>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int _rotl(
    int _Value,
    int _Shift,
  ) {
    return __rotl(
      _Value,
      _Shift,
    );
  }

  late final __rotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotl');
  late final __rotl = __rotlPtr.asFunction<int Function(int, int)>();

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return __lrotl(
      _Value,
      _Shift,
    );
  }

  late final __lrotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotl');
  late final __lrotl = __lrotlPtr.asFunction<int Function(int, int)>();

  int _rotl64(
    int _Value,
    int _Shift,
  ) {
    return __rotl64(
      _Value,
      _Shift,
    );
  }

  late final __rotl64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotl64');
  late final __rotl64 = __rotl64Ptr.asFunction<int Function(int, int)>();

  int _rotr(
    int _Value,
    int _Shift,
  ) {
    return __rotr(
      _Value,
      _Shift,
    );
  }

  late final __rotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotr');
  late final __rotr = __rotrPtr.asFunction<int Function(int, int)>();

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return __lrotr(
      _Value,
      _Shift,
    );
  }

  late final __lrotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotr');
  late final __lrotr = __lrotrPtr.asFunction<int Function(int, int)>();

  int _rotr64(
    int _Value,
    int _Shift,
  ) {
    return __rotr64(
      _Value,
      _Shift,
    );
  }

  late final __rotr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotr64');
  late final __rotr64 = __rotr64Ptr.asFunction<int Function(int, int)>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _atoi64(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoi64(
      _String,
    );
  }

  late final __atoi64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          '_atoi64');
  late final __atoi64 =
      __atoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi_l(
      _String,
      _Locale,
    );
  }

  late final __atoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi_l');
  late final __atoi_l =
      __atoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atol_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atol_l(
      _String,
      _Locale,
    );
  }

  late final __atol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atol_l');
  late final __atol_l =
      __atol_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoll_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoll_l(
      _String,
      _Locale,
    );
  }

  late final __atoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoll_l');
  late final __atoll_l =
      __atoll_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi64_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi64_l(
      _String,
      _Locale,
    );
  }

  late final __atoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi64_l');
  late final __atoi64_l = __atoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoflt(
      _Result,
      _String,
    );
  }

  late final __atofltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>>('_atoflt');
  late final __atoflt = __atofltPtr.asFunction<
      int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>();

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atodbl(
      _Result,
      _String,
    );
  }

  late final __atodblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>>('_atodbl');
  late final __atodbl = __atodblPtr.asFunction<
      int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoldbl(
      _Result,
      _String,
    );
  }

  late final __atoldblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>>('_atoldbl');
  late final __atoldbl = __atoldblPtr
      .asFunction<int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoflt_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoflt_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoflt_l');
  late final __atoflt_l = __atoflt_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atodbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atodbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atodbl_l');
  late final __atodbl_l = __atodbl_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoldbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoldbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoldbl_l');
  late final __atoldbl_l = __atoldbl_lPtr.asFunction<
      int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  double strtof(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtof_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtof_l');
  late final __strtof_l = __strtof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  double strtod(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtod_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtod_l');
  late final __strtod_l = __strtod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  int strtol(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtol_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtol_l');
  late final __strtol_l = __strtol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoll(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoll_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoll_l');
  late final __strtoll_l = __strtoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoul(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoul_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoul_l');
  late final __strtoul_l = __strtoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoull(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoull_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoull_l');
  late final __strtoull_l = __strtoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoi64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoi64');
  late final __strtoi64 = __strtoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoi64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoi64_l');
  late final __strtoi64_l = __strtoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoui64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoui64');
  late final __strtoui64 = __strtoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoui64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoui64_l');
  late final __strtoui64_l = __strtoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_itoa_s');
  late final __itoa_s = __itoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('_itoa');
  late final __itoa = __itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_ltoa_s');
  late final __ltoa_s = __ltoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ltoa');
  late final __ltoa = __ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_ultoa_s');
  late final __ultoa_s = __ultoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ultoa');
  late final __ultoa = __ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_i64toa_s');
  late final __i64toa_s = __i64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __i64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_i64toa');
  late final __i64toa = __i64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_ui64toa_s');
  late final __ui64toa_s = __ui64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ui64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_ui64toa');
  late final __ui64toa = __ui64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ecvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt_s');
  late final __ecvt_s = __ecvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt');
  late final __ecvt = __ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _fcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt_s');
  late final __fcvt_s = __fcvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt');
  late final __fcvt = __fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _gcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return __gcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final __gcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double,
              ffi.Int)>>('_gcvt_s');
  late final __gcvt_s = __gcvt_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  ffi.Pointer<ffi.Char> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __gcvt(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final __gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('_gcvt');
  late final __gcvt = __gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('___mb_cur_max_func');
  late final ____mb_cur_max_func =
      ____mb_cur_max_funcPtr.asFunction<int Function()>();

  int ___mb_cur_max_l_func(
    _locale_t _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(_locale_t)>>(
          '___mb_cur_max_l_func');
  late final ____mb_cur_max_l_func =
      ____mb_cur_max_l_funcPtr.asFunction<int Function(_locale_t)>();

  int mblen(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mblen_l(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mblen_l(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final __mblen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mblen_l');
  late final __mblen_l = __mblen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstrlen(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __mbstrlen(
      _String,
    );
  }

  late final __mbstrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          '_mbstrlen');
  late final __mbstrlen =
      __mbstrlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _mbstrlen_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __mbstrlen_l(
      _String,
      _Locale,
    );
  }

  late final __mbstrlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_mbstrlen_l');
  late final __mbstrlen_l = __mbstrlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _mbstrnlen(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
  ) {
    return __mbstrnlen(
      _String,
      _MaxCount,
    );
  }

  late final __mbstrnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_mbstrnlen');
  late final __mbstrnlen =
      __mbstrnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstrnlen_l(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstrnlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mbstrnlen_l');
  late final __mbstrnlen_l = __mbstrnlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbtowc_l(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
    _locale_t _Locale,
  ) {
    return __mbtowc_l(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final __mbtowc_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbtowc_l');
  late final __mbtowc_l = __mbtowc_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbstowcs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>('mbstowcs_s');
  late final _mbstowcs_s = _mbstowcs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_s_l(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              _locale_t)>>('_mbstowcs_s_l');
  late final __mbstowcs_s_l = __mbstowcs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstowcs_l(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbstowcs_l');
  late final __mbstowcs_l = __mbstowcs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _wctomb_l(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_l(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.WChar, _locale_t)>>('_wctomb_l');
  late final __wctomb_l = __wctomb_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb_s(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, rsize_t,
              ffi.WChar)>>('wctomb_s');
  late final _wctomb_s = _wctomb_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int)>();

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_s_l(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.WChar, _locale_t)>>('_wctomb_s_l');
  late final __wctomb_s_l = __wctomb_s_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int, _locale_t)>();

  int wcstombs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcstombs_s');
  late final _wcstombs_s = _wcstombs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
    _locale_t _Locale,
  ) {
    return __wcstombs_s_l(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final __wcstombs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              _locale_t)>>('_wcstombs_s_l');
  late final __wcstombs_s_l = __wcstombs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcstombs_l(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcstombs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcstombs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcstombs_l');
  late final __wcstombs_l = __wcstombs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _fullpath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Path,
    int _BufferCount,
  ) {
    return __fullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __fullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_fullpath');
  late final __fullpath = __fullpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _makepath_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath_s');
  late final __makepath_s = __makepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _makepath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath');
  late final __makepath = __makepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _splitpath(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __splitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __splitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_splitpath');
  late final __splitpath = __splitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int _splitpath_s(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Char> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Char> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Char> _Ext,
    int _ExtCount,
  ) {
    return __splitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __splitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_splitpath_s');
  late final __splitpath_s = __splitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int)>();

  int getenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              rsize_t, ffi.Pointer<ffi.Char>)>>('getenv_s');
  late final _getenv_s = _getenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> __p___argc() {
    return ___p___argc();
  }

  late final ___p___argcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p___argc');
  late final ___p___argc =
      ___p___argcPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p___argv() {
    return ___p___argv();
  }

  late final ___p___argvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p___argv');
  late final ___p___argv = ___p___argvPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p___wargv() {
    return ___p___wargv();
  }

  late final ___p___wargvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p___wargv');
  late final ___p___wargv = ___p___wargvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p__environ() {
    return ___p__environ();
  }

  late final ___p__environPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p__environ');
  late final ___p__environ = ___p__environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p__wenviron() {
    return ___p__wenviron();
  }

  late final ___p__wenvironPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p__wenviron');
  late final ___p__wenviron = ___p__wenvironPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return __dupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __dupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>>('_dupenv_s');
  late final __dupenv_s = __dupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return __putenv(
      _EnvString,
    );
  }

  late final __putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_putenv');
  late final __putenv =
      __putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv_s(
    ffi.Pointer<ffi.Char> _Name,
    ffi.Pointer<ffi.Char> _Value,
  ) {
    return __putenv_s(
      _Name,
      _Value,
    );
  }

  late final __putenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_putenv_s');
  late final __putenv_s = __putenv_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _searchenv_s(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
  ) {
    return __searchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __searchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_searchenv_s');
  late final __searchenv_s = __searchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  void _searchenv(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __searchenv(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final __searchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_searchenv');
  late final __searchenv = __searchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _seterrormode(
    int _Mode,
  ) {
    return __seterrormode(
      _Mode,
    );
  }

  late final __seterrormodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_seterrormode');
  late final __seterrormode =
      __seterrormodePtr.asFunction<void Function(int)>();

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return __beep(
      _Frequency,
      _Duration,
    );
  }

  late final __beepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('_beep');
  late final __beep = __beepPtr.asFunction<void Function(int, int)>();

  void _sleep(
    int _Duration,
  ) {
    return __sleep(
      _Duration,
    );
  }

  late final __sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          '_sleep');
  late final __sleep = __sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _ecvt1(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _fcvt1(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _DstBuf,
  ) {
    return _gcvt1(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _itoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('itoa');
  late final _itoa1 = _itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ltoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('ltoa');
  late final _ltoa1 = _ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab1(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('swab');
  late final _swab1 = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ultoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('ultoa');
  late final _ultoa1 = _ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return _putenv1(
      _EnvString,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  _onexit_t onexit(
    _onexit_t _Func,
  ) {
    return _onexit1(
      _Func,
    );
  }

  late final _onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('onexit');
  late final _onexit1 = _onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  void HPDF_Error_Init(
    HPDF_Error error,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _HPDF_Error_Init(
      error,
      user_data,
    );
  }

  late final _HPDF_Error_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HPDF_Error, ffi.Pointer<ffi.Void>)>>('HPDF_Error_Init');
  late final _HPDF_Error_Init = _HPDF_Error_InitPtr.asFunction<
      void Function(HPDF_Error, ffi.Pointer<ffi.Void>)>();

  void HPDF_Error_Reset(
    HPDF_Error error,
  ) {
    return _HPDF_Error_Reset(
      error,
    );
  }

  late final _HPDF_Error_ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Error)>>(
          'HPDF_Error_Reset');
  late final _HPDF_Error_Reset =
      _HPDF_Error_ResetPtr.asFunction<void Function(HPDF_Error)>();

  int HPDF_Error_GetCode(
    HPDF_Error error,
  ) {
    return _HPDF_Error_GetCode(
      error,
    );
  }

  late final _HPDF_Error_GetCodePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Error)>>(
          'HPDF_Error_GetCode');
  late final _HPDF_Error_GetCode =
      _HPDF_Error_GetCodePtr.asFunction<int Function(HPDF_Error)>();

  int HPDF_Error_GetDetailCode(
    HPDF_Error error,
  ) {
    return _HPDF_Error_GetDetailCode(
      error,
    );
  }

  late final _HPDF_Error_GetDetailCodePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Error)>>(
          'HPDF_Error_GetDetailCode');
  late final _HPDF_Error_GetDetailCode =
      _HPDF_Error_GetDetailCodePtr.asFunction<int Function(HPDF_Error)>();

  int HPDF_SetError(
    HPDF_Error error,
    int error_no,
    int detail_no,
  ) {
    return _HPDF_SetError(
      error,
      error_no,
      detail_no,
    );
  }

  late final _HPDF_SetErrorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Error, HPDF_STATUS, HPDF_STATUS)>>('HPDF_SetError');
  late final _HPDF_SetError =
      _HPDF_SetErrorPtr.asFunction<int Function(HPDF_Error, int, int)>();

  int HPDF_RaiseError(
    HPDF_Error error,
    int error_no,
    int detail_no,
  ) {
    return _HPDF_RaiseError(
      error,
      error_no,
      detail_no,
    );
  }

  late final _HPDF_RaiseErrorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Error, HPDF_STATUS, HPDF_STATUS)>>('HPDF_RaiseError');
  late final _HPDF_RaiseError =
      _HPDF_RaiseErrorPtr.asFunction<int Function(HPDF_Error, int, int)>();

  HPDF_MMgr HPDF_MMgr_New(
    HPDF_Error error,
    int buf_size,
    HPDF_Alloc_Func alloc_fn,
    HPDF_Free_Func free_fn,
  ) {
    return _HPDF_MMgr_New(
      error,
      buf_size,
      alloc_fn,
      free_fn,
    );
  }

  late final _HPDF_MMgr_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_MMgr Function(HPDF_Error, HPDF_UINT, HPDF_Alloc_Func,
              HPDF_Free_Func)>>('HPDF_MMgr_New');
  late final _HPDF_MMgr_New = _HPDF_MMgr_NewPtr.asFunction<
      HPDF_MMgr Function(HPDF_Error, int, HPDF_Alloc_Func, HPDF_Free_Func)>();

  void HPDF_MMgr_Free(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_MMgr_Free(
      mmgr,
    );
  }

  late final _HPDF_MMgr_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_MMgr)>>(
          'HPDF_MMgr_Free');
  late final _HPDF_MMgr_Free =
      _HPDF_MMgr_FreePtr.asFunction<void Function(HPDF_MMgr)>();

  ffi.Pointer<ffi.Void> HPDF_GetMem(
    HPDF_MMgr mmgr,
    int size,
  ) {
    return _HPDF_GetMem(
      mmgr,
      size,
    );
  }

  late final _HPDF_GetMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(HPDF_MMgr, HPDF_UINT)>>('HPDF_GetMem');
  late final _HPDF_GetMem = _HPDF_GetMemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(HPDF_MMgr, int)>();

  void HPDF_FreeMem(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Void> aptr,
  ) {
    return _HPDF_FreeMem(
      mmgr,
      aptr,
    );
  }

  late final _HPDF_FreeMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HPDF_MMgr, ffi.Pointer<ffi.Void>)>>('HPDF_FreeMem');
  late final _HPDF_FreeMem = _HPDF_FreeMemPtr.asFunction<
      void Function(HPDF_MMgr, ffi.Pointer<ffi.Void>)>();

  HPDF_List HPDF_List_New(
    HPDF_MMgr mmgr,
    int items_per_block,
  ) {
    return _HPDF_List_New(
      mmgr,
      items_per_block,
    );
  }

  late final _HPDF_List_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_List Function(HPDF_MMgr, HPDF_UINT)>>(
          'HPDF_List_New');
  late final _HPDF_List_New =
      _HPDF_List_NewPtr.asFunction<HPDF_List Function(HPDF_MMgr, int)>();

  void HPDF_List_Free(
    HPDF_List list,
  ) {
    return _HPDF_List_Free(
      list,
    );
  }

  late final _HPDF_List_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_List)>>(
          'HPDF_List_Free');
  late final _HPDF_List_Free =
      _HPDF_List_FreePtr.asFunction<void Function(HPDF_List)>();

  int HPDF_List_Add(
    HPDF_List list,
    ffi.Pointer<ffi.Void> item,
  ) {
    return _HPDF_List_Add(
      list,
      item,
    );
  }

  late final _HPDF_List_AddPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_List, ffi.Pointer<ffi.Void>)>>('HPDF_List_Add');
  late final _HPDF_List_Add = _HPDF_List_AddPtr.asFunction<
      int Function(HPDF_List, ffi.Pointer<ffi.Void>)>();

  int HPDF_List_Insert(
    HPDF_List list,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> item,
  ) {
    return _HPDF_List_Insert(
      list,
      target,
      item,
    );
  }

  late final _HPDF_List_InsertPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_List, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('HPDF_List_Insert');
  late final _HPDF_List_Insert = _HPDF_List_InsertPtr.asFunction<
      int Function(HPDF_List, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int HPDF_List_Remove(
    HPDF_List list,
    ffi.Pointer<ffi.Void> item,
  ) {
    return _HPDF_List_Remove(
      list,
      item,
    );
  }

  late final _HPDF_List_RemovePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_List, ffi.Pointer<ffi.Void>)>>('HPDF_List_Remove');
  late final _HPDF_List_Remove = _HPDF_List_RemovePtr.asFunction<
      int Function(HPDF_List, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> HPDF_List_RemoveByIndex(
    HPDF_List list,
    int index,
  ) {
    return _HPDF_List_RemoveByIndex(
      list,
      index,
    );
  }

  late final _HPDF_List_RemoveByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              HPDF_List, HPDF_UINT)>>('HPDF_List_RemoveByIndex');
  late final _HPDF_List_RemoveByIndex = _HPDF_List_RemoveByIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(HPDF_List, int)>();

  ffi.Pointer<ffi.Void> HPDF_List_ItemAt(
    HPDF_List list,
    int index,
  ) {
    return _HPDF_List_ItemAt(
      list,
      index,
    );
  }

  late final _HPDF_List_ItemAtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              HPDF_List, HPDF_UINT)>>('HPDF_List_ItemAt');
  late final _HPDF_List_ItemAt = _HPDF_List_ItemAtPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(HPDF_List, int)>();

  int HPDF_List_Find(
    HPDF_List list,
    ffi.Pointer<ffi.Void> item,
  ) {
    return _HPDF_List_Find(
      list,
      item,
    );
  }

  late final _HPDF_List_FindPtr = _lookup<
      ffi.NativeFunction<
          HPDF_INT32 Function(
              HPDF_List, ffi.Pointer<ffi.Void>)>>('HPDF_List_Find');
  late final _HPDF_List_Find = _HPDF_List_FindPtr.asFunction<
      int Function(HPDF_List, ffi.Pointer<ffi.Void>)>();

  void HPDF_List_Clear(
    HPDF_List list,
  ) {
    return _HPDF_List_Clear(
      list,
    );
  }

  late final _HPDF_List_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_List)>>(
          'HPDF_List_Clear');
  late final _HPDF_List_Clear =
      _HPDF_List_ClearPtr.asFunction<void Function(HPDF_List)>();

  void HPDF_MD5Init(
    ffi.Pointer<HPDF_MD5Context> ctx,
  ) {
    return _HPDF_MD5Init(
      ctx,
    );
  }

  late final _HPDF_MD5InitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HPDF_MD5Context>)>>(
      'HPDF_MD5Init');
  late final _HPDF_MD5Init = _HPDF_MD5InitPtr.asFunction<
      void Function(ffi.Pointer<HPDF_MD5Context>)>();

  void HPDF_MD5Update(
    ffi.Pointer<HPDF_MD5Context> ctx,
    ffi.Pointer<HPDF_BYTE> buf,
    int len,
  ) {
    return _HPDF_MD5Update(
      ctx,
      buf,
      len,
    );
  }

  late final _HPDF_MD5UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<HPDF_MD5Context>,
              ffi.Pointer<HPDF_BYTE>, HPDF_UINT32)>>('HPDF_MD5Update');
  late final _HPDF_MD5Update = _HPDF_MD5UpdatePtr.asFunction<
      void Function(
          ffi.Pointer<HPDF_MD5Context>, ffi.Pointer<HPDF_BYTE>, int)>();

  void HPDF_MD5Final(
    ffi.Pointer<HPDF_BYTE> digest,
    ffi.Pointer<HPDF_MD5Context> ctx,
  ) {
    return _HPDF_MD5Final(
      digest,
      ctx,
    );
  }

  late final _HPDF_MD5FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<HPDF_BYTE>,
              ffi.Pointer<HPDF_MD5Context>)>>('HPDF_MD5Final');
  late final _HPDF_MD5Final = _HPDF_MD5FinalPtr.asFunction<
      void Function(ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_MD5Context>)>();

  void HPDF_PadOrTrancatePasswd(
    ffi.Pointer<ffi.Char> pwd,
    ffi.Pointer<HPDF_BYTE> new_pwd,
  ) {
    return _HPDF_PadOrTrancatePasswd(
      pwd,
      new_pwd,
    );
  }

  late final _HPDF_PadOrTrancatePasswdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<HPDF_BYTE>)>>('HPDF_PadOrTrancatePasswd');
  late final _HPDF_PadOrTrancatePasswd =
      _HPDF_PadOrTrancatePasswdPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<HPDF_BYTE>)>();

  void HPDF_Encrypt_Init(
    HPDF_Encrypt attr,
  ) {
    return _HPDF_Encrypt_Init(
      attr,
    );
  }

  late final _HPDF_Encrypt_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encrypt)>>(
          'HPDF_Encrypt_Init');
  late final _HPDF_Encrypt_Init =
      _HPDF_Encrypt_InitPtr.asFunction<void Function(HPDF_Encrypt)>();

  void HPDF_Encrypt_CreateUserKey(
    HPDF_Encrypt attr,
  ) {
    return _HPDF_Encrypt_CreateUserKey(
      attr,
    );
  }

  late final _HPDF_Encrypt_CreateUserKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encrypt)>>(
          'HPDF_Encrypt_CreateUserKey');
  late final _HPDF_Encrypt_CreateUserKey =
      _HPDF_Encrypt_CreateUserKeyPtr.asFunction<void Function(HPDF_Encrypt)>();

  void HPDF_Encrypt_CreateOwnerKey(
    HPDF_Encrypt attr,
  ) {
    return _HPDF_Encrypt_CreateOwnerKey(
      attr,
    );
  }

  late final _HPDF_Encrypt_CreateOwnerKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encrypt)>>(
          'HPDF_Encrypt_CreateOwnerKey');
  late final _HPDF_Encrypt_CreateOwnerKey =
      _HPDF_Encrypt_CreateOwnerKeyPtr.asFunction<void Function(HPDF_Encrypt)>();

  void HPDF_Encrypt_CreateEncryptionKey(
    HPDF_Encrypt attr,
  ) {
    return _HPDF_Encrypt_CreateEncryptionKey(
      attr,
    );
  }

  late final _HPDF_Encrypt_CreateEncryptionKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encrypt)>>(
          'HPDF_Encrypt_CreateEncryptionKey');
  late final _HPDF_Encrypt_CreateEncryptionKey =
      _HPDF_Encrypt_CreateEncryptionKeyPtr.asFunction<
          void Function(HPDF_Encrypt)>();

  void HPDF_Encrypt_InitKey(
    HPDF_Encrypt attr,
    int object_id,
    int gen_no,
  ) {
    return _HPDF_Encrypt_InitKey(
      attr,
      object_id,
      gen_no,
    );
  }

  late final _HPDF_Encrypt_InitKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HPDF_Encrypt, HPDF_UINT32, HPDF_UINT16)>>('HPDF_Encrypt_InitKey');
  late final _HPDF_Encrypt_InitKey = _HPDF_Encrypt_InitKeyPtr.asFunction<
      void Function(HPDF_Encrypt, int, int)>();

  void HPDF_Encrypt_Reset(
    HPDF_Encrypt attr,
  ) {
    return _HPDF_Encrypt_Reset(
      attr,
    );
  }

  late final _HPDF_Encrypt_ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encrypt)>>(
          'HPDF_Encrypt_Reset');
  late final _HPDF_Encrypt_Reset =
      _HPDF_Encrypt_ResetPtr.asFunction<void Function(HPDF_Encrypt)>();

  void HPDF_Encrypt_CryptBuf(
    HPDF_Encrypt attr,
    ffi.Pointer<HPDF_BYTE> src,
    ffi.Pointer<HPDF_BYTE> dst,
    int len,
  ) {
    return _HPDF_Encrypt_CryptBuf(
      attr,
      src,
      dst,
      len,
    );
  }

  late final _HPDF_Encrypt_CryptBufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HPDF_Encrypt, ffi.Pointer<HPDF_BYTE>,
              ffi.Pointer<HPDF_BYTE>, HPDF_UINT)>>('HPDF_Encrypt_CryptBuf');
  late final _HPDF_Encrypt_CryptBuf = _HPDF_Encrypt_CryptBufPtr.asFunction<
      void Function(
          HPDF_Encrypt, ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_BYTE>, int)>();

  HPDF_Stream HPDF_MemStream_New(
    HPDF_MMgr mmgr,
    int buf_siz,
  ) {
    return _HPDF_MemStream_New(
      mmgr,
      buf_siz,
    );
  }

  late final _HPDF_MemStream_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Stream Function(HPDF_MMgr, HPDF_UINT)>>(
          'HPDF_MemStream_New');
  late final _HPDF_MemStream_New =
      _HPDF_MemStream_NewPtr.asFunction<HPDF_Stream Function(HPDF_MMgr, int)>();

  ffi.Pointer<HPDF_BYTE> HPDF_MemStream_GetBufPtr(
    HPDF_Stream stream,
    int index,
    ffi.Pointer<HPDF_UINT> length,
  ) {
    return _HPDF_MemStream_GetBufPtr(
      stream,
      index,
      length,
    );
  }

  late final _HPDF_MemStream_GetBufPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HPDF_BYTE> Function(HPDF_Stream, HPDF_UINT,
              ffi.Pointer<HPDF_UINT>)>>('HPDF_MemStream_GetBufPtr');
  late final _HPDF_MemStream_GetBufPtr =
      _HPDF_MemStream_GetBufPtrPtr.asFunction<
          ffi.Pointer<HPDF_BYTE> Function(
              HPDF_Stream, int, ffi.Pointer<HPDF_UINT>)>();

  int HPDF_MemStream_GetBufSize(
    HPDF_Stream stream,
  ) {
    return _HPDF_MemStream_GetBufSize(
      stream,
    );
  }

  late final _HPDF_MemStream_GetBufSizePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Stream)>>(
          'HPDF_MemStream_GetBufSize');
  late final _HPDF_MemStream_GetBufSize =
      _HPDF_MemStream_GetBufSizePtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_MemStream_GetBufCount(
    HPDF_Stream stream,
  ) {
    return _HPDF_MemStream_GetBufCount(
      stream,
    );
  }

  late final _HPDF_MemStream_GetBufCountPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Stream)>>(
          'HPDF_MemStream_GetBufCount');
  late final _HPDF_MemStream_GetBufCount =
      _HPDF_MemStream_GetBufCountPtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_MemStream_Rewrite(
    HPDF_Stream stream,
    ffi.Pointer<HPDF_BYTE> buf,
    int size,
  ) {
    return _HPDF_MemStream_Rewrite(
      stream,
      buf,
      size,
    );
  }

  late final _HPDF_MemStream_RewritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_MemStream_Rewrite');
  late final _HPDF_MemStream_Rewrite = _HPDF_MemStream_RewritePtr.asFunction<
      int Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>, int)>();

  void HPDF_MemStream_FreeData(
    HPDF_Stream stream,
  ) {
    return _HPDF_MemStream_FreeData(
      stream,
    );
  }

  late final _HPDF_MemStream_FreeDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Stream)>>(
          'HPDF_MemStream_FreeData');
  late final _HPDF_MemStream_FreeData =
      _HPDF_MemStream_FreeDataPtr.asFunction<void Function(HPDF_Stream)>();

  int HPDF_Stream_WriteToStream(
    HPDF_Stream src,
    HPDF_Stream dst,
    int filter,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Stream_WriteToStream(
      src,
      dst,
      filter,
      e,
    );
  }

  late final _HPDF_Stream_WriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, HPDF_Stream, HPDF_UINT,
              HPDF_Encrypt)>>('HPDF_Stream_WriteToStream');
  late final _HPDF_Stream_WriteToStream = _HPDF_Stream_WriteToStreamPtr
      .asFunction<int Function(HPDF_Stream, HPDF_Stream, int, HPDF_Encrypt)>();

  HPDF_Stream HPDF_FileReader_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _HPDF_FileReader_New(
      mmgr,
      fname,
    );
  }

  late final _HPDF_FileReader_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Stream Function(
              HPDF_MMgr, ffi.Pointer<ffi.Char>)>>('HPDF_FileReader_New');
  late final _HPDF_FileReader_New = _HPDF_FileReader_NewPtr.asFunction<
      HPDF_Stream Function(HPDF_MMgr, ffi.Pointer<ffi.Char>)>();

  HPDF_Stream HPDF_FileWriter_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> fname,
  ) {
    return _HPDF_FileWriter_New(
      mmgr,
      fname,
    );
  }

  late final _HPDF_FileWriter_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Stream Function(
              HPDF_MMgr, ffi.Pointer<ffi.Char>)>>('HPDF_FileWriter_New');
  late final _HPDF_FileWriter_New = _HPDF_FileWriter_NewPtr.asFunction<
      HPDF_Stream Function(HPDF_MMgr, ffi.Pointer<ffi.Char>)>();

  HPDF_Stream HPDF_CallbackReader_New(
    HPDF_MMgr mmgr,
    HPDF_Stream_Read_Func read_fn,
    HPDF_Stream_Seek_Func seek_fn,
    HPDF_Stream_Tell_Func tell_fn,
    HPDF_Stream_Size_Func size_fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _HPDF_CallbackReader_New(
      mmgr,
      read_fn,
      seek_fn,
      tell_fn,
      size_fn,
      data,
    );
  }

  late final _HPDF_CallbackReader_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Stream Function(
              HPDF_MMgr,
              HPDF_Stream_Read_Func,
              HPDF_Stream_Seek_Func,
              HPDF_Stream_Tell_Func,
              HPDF_Stream_Size_Func,
              ffi.Pointer<ffi.Void>)>>('HPDF_CallbackReader_New');
  late final _HPDF_CallbackReader_New = _HPDF_CallbackReader_NewPtr.asFunction<
      HPDF_Stream Function(
          HPDF_MMgr,
          HPDF_Stream_Read_Func,
          HPDF_Stream_Seek_Func,
          HPDF_Stream_Tell_Func,
          HPDF_Stream_Size_Func,
          ffi.Pointer<ffi.Void>)>();

  HPDF_Stream HPDF_CallbackWriter_New(
    HPDF_MMgr mmgr,
    HPDF_Stream_Write_Func write_fn,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _HPDF_CallbackWriter_New(
      mmgr,
      write_fn,
      data,
    );
  }

  late final _HPDF_CallbackWriter_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Stream Function(HPDF_MMgr, HPDF_Stream_Write_Func,
              ffi.Pointer<ffi.Void>)>>('HPDF_CallbackWriter_New');
  late final _HPDF_CallbackWriter_New = _HPDF_CallbackWriter_NewPtr.asFunction<
      HPDF_Stream Function(
          HPDF_MMgr, HPDF_Stream_Write_Func, ffi.Pointer<ffi.Void>)>();

  void HPDF_Stream_Free(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_Free(
      stream,
    );
  }

  late final _HPDF_Stream_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Stream)>>(
          'HPDF_Stream_Free');
  late final _HPDF_Stream_Free =
      _HPDF_Stream_FreePtr.asFunction<void Function(HPDF_Stream)>();

  int HPDF_Stream_WriteChar(
    HPDF_Stream stream,
    int value,
  ) {
    return _HPDF_Stream_WriteChar(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteCharPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, ffi.Char)>>(
          'HPDF_Stream_WriteChar');
  late final _HPDF_Stream_WriteChar =
      _HPDF_Stream_WriteCharPtr.asFunction<int Function(HPDF_Stream, int)>();

  int HPDF_Stream_WriteStr(
    HPDF_Stream stream,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Stream_WriteStr(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteStrPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Stream, ffi.Pointer<ffi.Char>)>>('HPDF_Stream_WriteStr');
  late final _HPDF_Stream_WriteStr = _HPDF_Stream_WriteStrPtr.asFunction<
      int Function(HPDF_Stream, ffi.Pointer<ffi.Char>)>();

  int HPDF_Stream_WriteUChar(
    HPDF_Stream stream,
    int value,
  ) {
    return _HPDF_Stream_WriteUChar(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteUCharPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, HPDF_BYTE)>>(
          'HPDF_Stream_WriteUChar');
  late final _HPDF_Stream_WriteUChar =
      _HPDF_Stream_WriteUCharPtr.asFunction<int Function(HPDF_Stream, int)>();

  int HPDF_Stream_WriteInt(
    HPDF_Stream stream,
    int value,
  ) {
    return _HPDF_Stream_WriteInt(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteIntPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, HPDF_INT)>>(
          'HPDF_Stream_WriteInt');
  late final _HPDF_Stream_WriteInt =
      _HPDF_Stream_WriteIntPtr.asFunction<int Function(HPDF_Stream, int)>();

  int HPDF_Stream_WriteUInt(
    HPDF_Stream stream,
    int value,
  ) {
    return _HPDF_Stream_WriteUInt(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteUIntPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, HPDF_UINT)>>(
          'HPDF_Stream_WriteUInt');
  late final _HPDF_Stream_WriteUInt =
      _HPDF_Stream_WriteUIntPtr.asFunction<int Function(HPDF_Stream, int)>();

  int HPDF_Stream_WriteReal(
    HPDF_Stream stream,
    double value,
  ) {
    return _HPDF_Stream_WriteReal(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteRealPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, HPDF_REAL)>>(
          'HPDF_Stream_WriteReal');
  late final _HPDF_Stream_WriteReal =
      _HPDF_Stream_WriteRealPtr.asFunction<int Function(HPDF_Stream, double)>();

  int HPDF_Stream_Write(
    HPDF_Stream stream,
    ffi.Pointer<HPDF_BYTE> ptr,
    int size,
  ) {
    return _HPDF_Stream_Write(
      stream,
      ptr,
      size,
    );
  }

  late final _HPDF_Stream_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Stream_Write');
  late final _HPDF_Stream_Write = _HPDF_Stream_WritePtr.asFunction<
      int Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_Stream_Read(
    HPDF_Stream stream,
    ffi.Pointer<HPDF_BYTE> ptr,
    ffi.Pointer<HPDF_UINT> size,
  ) {
    return _HPDF_Stream_Read(
      stream,
      ptr,
      size,
    );
  }

  late final _HPDF_Stream_ReadPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>,
              ffi.Pointer<HPDF_UINT>)>>('HPDF_Stream_Read');
  late final _HPDF_Stream_Read = _HPDF_Stream_ReadPtr.asFunction<
      int Function(
          HPDF_Stream, ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_UINT>)>();

  int HPDF_Stream_ReadLn(
    HPDF_Stream stream,
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<HPDF_UINT> size,
  ) {
    return _HPDF_Stream_ReadLn(
      stream,
      s,
      size,
    );
  }

  late final _HPDF_Stream_ReadLnPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<ffi.Char>,
              ffi.Pointer<HPDF_UINT>)>>('HPDF_Stream_ReadLn');
  late final _HPDF_Stream_ReadLn = _HPDF_Stream_ReadLnPtr.asFunction<
      int Function(
          HPDF_Stream, ffi.Pointer<ffi.Char>, ffi.Pointer<HPDF_UINT>)>();

  int HPDF_Stream_Tell(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_Tell(
      stream,
    );
  }

  late final _HPDF_Stream_TellPtr =
      _lookup<ffi.NativeFunction<HPDF_INT32 Function(HPDF_Stream)>>(
          'HPDF_Stream_Tell');
  late final _HPDF_Stream_Tell =
      _HPDF_Stream_TellPtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_Stream_Seek(
    HPDF_Stream stream,
    int pos,
    int mode,
  ) {
    return _HPDF_Stream_Seek(
      stream,
      pos,
      mode,
    );
  }

  late final _HPDF_Stream_SeekPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Stream, HPDF_INT, ffi.Int32)>>('HPDF_Stream_Seek');
  late final _HPDF_Stream_Seek =
      _HPDF_Stream_SeekPtr.asFunction<int Function(HPDF_Stream, int, int)>();

  int HPDF_Stream_EOF(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_EOF(
      stream,
    );
  }

  late final _HPDF_Stream_EOFPtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Stream)>>(
          'HPDF_Stream_EOF');
  late final _HPDF_Stream_EOF =
      _HPDF_Stream_EOFPtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_Stream_Size(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_Size(
      stream,
    );
  }

  late final _HPDF_Stream_SizePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT32 Function(HPDF_Stream)>>(
          'HPDF_Stream_Size');
  late final _HPDF_Stream_Size =
      _HPDF_Stream_SizePtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_Stream_Flush(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_Flush(
      stream,
    );
  }

  late final _HPDF_Stream_FlushPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream)>>(
          'HPDF_Stream_Flush');
  late final _HPDF_Stream_Flush =
      _HPDF_Stream_FlushPtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_Stream_WriteEscapeName(
    HPDF_Stream stream,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Stream_WriteEscapeName(
      stream,
      value,
    );
  }

  late final _HPDF_Stream_WriteEscapeNamePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream,
              ffi.Pointer<ffi.Char>)>>('HPDF_Stream_WriteEscapeName');
  late final _HPDF_Stream_WriteEscapeName = _HPDF_Stream_WriteEscapeNamePtr
      .asFunction<int Function(HPDF_Stream, ffi.Pointer<ffi.Char>)>();

  int HPDF_Stream_WriteEscapeText2(
    HPDF_Stream stream,
    ffi.Pointer<ffi.Char> text,
    int len,
  ) {
    return _HPDF_Stream_WriteEscapeText2(
      stream,
      text,
      len,
    );
  }

  late final _HPDF_Stream_WriteEscapeText2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<ffi.Char>,
              HPDF_UINT)>>('HPDF_Stream_WriteEscapeText2');
  late final _HPDF_Stream_WriteEscapeText2 = _HPDF_Stream_WriteEscapeText2Ptr
      .asFunction<int Function(HPDF_Stream, ffi.Pointer<ffi.Char>, int)>();

  int HPDF_Stream_WriteEscapeText(
    HPDF_Stream stream,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Stream_WriteEscapeText(
      stream,
      text,
    );
  }

  late final _HPDF_Stream_WriteEscapeTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream,
              ffi.Pointer<ffi.Char>)>>('HPDF_Stream_WriteEscapeText');
  late final _HPDF_Stream_WriteEscapeText = _HPDF_Stream_WriteEscapeTextPtr
      .asFunction<int Function(HPDF_Stream, ffi.Pointer<ffi.Char>)>();

  int HPDF_Stream_WriteBinary(
    HPDF_Stream stream,
    ffi.Pointer<HPDF_BYTE> data,
    int len,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Stream_WriteBinary(
      stream,
      data,
      len,
      e,
    );
  }

  late final _HPDF_Stream_WriteBinaryPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>, HPDF_UINT,
              HPDF_Encrypt)>>('HPDF_Stream_WriteBinary');
  late final _HPDF_Stream_WriteBinary = _HPDF_Stream_WriteBinaryPtr.asFunction<
      int Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>, int, HPDF_Encrypt)>();

  int HPDF_Stream_Validate(
    HPDF_Stream stream,
  ) {
    return _HPDF_Stream_Validate(
      stream,
    );
  }

  late final _HPDF_Stream_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream)>>(
          'HPDF_Stream_Validate');
  late final _HPDF_Stream_Validate =
      _HPDF_Stream_ValidatePtr.asFunction<int Function(HPDF_Stream)>();

  int HPDF_Encoder_Validate(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Encoder_Validate(
      encoder,
    );
  }

  late final _HPDF_Encoder_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder)>>(
          'HPDF_Encoder_Validate');
  late final _HPDF_Encoder_Validate =
      _HPDF_Encoder_ValidatePtr.asFunction<int Function(HPDF_Encoder)>();

  void HPDF_Encoder_SetParseText(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_ParseText_Rec> state,
    ffi.Pointer<HPDF_BYTE> text,
    int len,
  ) {
    return _HPDF_Encoder_SetParseText(
      encoder,
      state,
      text,
      len,
    );
  }

  late final _HPDF_Encoder_SetParseTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>,
              ffi.Pointer<HPDF_BYTE>, HPDF_UINT)>>('HPDF_Encoder_SetParseText');
  late final _HPDF_Encoder_SetParseText =
      _HPDF_Encoder_SetParseTextPtr.asFunction<
          void Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>,
              ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_Encoder_ByteType(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_ParseText_Rec> state,
  ) {
    return _HPDF_Encoder_ByteType(
      encoder,
      state,
    );
  }

  late final _HPDF_Encoder_ByteTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(HPDF_Encoder,
              ffi.Pointer<HPDF_ParseText_Rec>)>>('HPDF_Encoder_ByteType');
  late final _HPDF_Encoder_ByteType = _HPDF_Encoder_ByteTypePtr.asFunction<
      int Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>)>();

  int HPDF_Encoder_ToUnicode(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_Encoder_ToUnicode(
      encoder,
      code,
    );
  }

  late final _HPDF_Encoder_ToUnicodePtr = _lookup<
          ffi.NativeFunction<HPDF_UNICODE Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_Encoder_ToUnicode');
  late final _HPDF_Encoder_ToUnicode =
      _HPDF_Encoder_ToUnicodePtr.asFunction<int Function(HPDF_Encoder, int)>();

  void HPDF_Encoder_Free(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Encoder_Free(
      encoder,
    );
  }

  late final _HPDF_Encoder_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encoder)>>(
          'HPDF_Encoder_Free');
  late final _HPDF_Encoder_Free =
      _HPDF_Encoder_FreePtr.asFunction<void Function(HPDF_Encoder)>();

  HPDF_Encoder HPDF_BasicEncoder_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_BasicEncoder_New(
      mmgr,
      encoding_name,
    );
  }

  late final _HPDF_BasicEncoder_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Encoder Function(
              HPDF_MMgr, ffi.Pointer<ffi.Char>)>>('HPDF_BasicEncoder_New');
  late final _HPDF_BasicEncoder_New = _HPDF_BasicEncoder_NewPtr.asFunction<
      HPDF_Encoder Function(HPDF_MMgr, ffi.Pointer<ffi.Char>)>();

  void HPDF_BasicEncoder_Free(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_BasicEncoder_Free(
      encoder,
    );
  }

  late final _HPDF_BasicEncoder_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encoder)>>(
          'HPDF_BasicEncoder_Free');
  late final _HPDF_BasicEncoder_Free =
      _HPDF_BasicEncoder_FreePtr.asFunction<void Function(HPDF_Encoder)>();

  int HPDF_BasicEncoder_Write(
    HPDF_Encoder encoder,
    HPDF_Stream out,
  ) {
    return _HPDF_BasicEncoder_Write(
      encoder,
      out,
    );
  }

  late final _HPDF_BasicEncoder_WritePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder, HPDF_Stream)>>(
      'HPDF_BasicEncoder_Write');
  late final _HPDF_BasicEncoder_Write = _HPDF_BasicEncoder_WritePtr.asFunction<
      int Function(HPDF_Encoder, HPDF_Stream)>();

  int HPDF_BasicEncoder_ToUnicode(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_BasicEncoder_ToUnicode(
      encoder,
      code,
    );
  }

  late final _HPDF_BasicEncoder_ToUnicodePtr = _lookup<
          ffi.NativeFunction<HPDF_UNICODE Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_BasicEncoder_ToUnicode');
  late final _HPDF_BasicEncoder_ToUnicode = _HPDF_BasicEncoder_ToUnicodePtr
      .asFunction<int Function(HPDF_Encoder, int)>();

  HPDF_Encoder HPDF_CMapEncoder_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> name,
    HPDF_Encoder_Init_Func init_fn,
  ) {
    return _HPDF_CMapEncoder_New(
      mmgr,
      name,
      init_fn,
    );
  }

  late final _HPDF_CMapEncoder_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Encoder Function(HPDF_MMgr, ffi.Pointer<ffi.Char>,
              HPDF_Encoder_Init_Func)>>('HPDF_CMapEncoder_New');
  late final _HPDF_CMapEncoder_New = _HPDF_CMapEncoder_NewPtr.asFunction<
      HPDF_Encoder Function(
          HPDF_MMgr, ffi.Pointer<ffi.Char>, HPDF_Encoder_Init_Func)>();

  int HPDF_CMapEncoder_InitAttr(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_CMapEncoder_InitAttr(
      encoder,
    );
  }

  late final _HPDF_CMapEncoder_InitAttrPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder)>>(
          'HPDF_CMapEncoder_InitAttr');
  late final _HPDF_CMapEncoder_InitAttr =
      _HPDF_CMapEncoder_InitAttrPtr.asFunction<int Function(HPDF_Encoder)>();

  void HPDF_CMapEncoder_Free(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_CMapEncoder_Free(
      encoder,
    );
  }

  late final _HPDF_CMapEncoder_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Encoder)>>(
          'HPDF_CMapEncoder_Free');
  late final _HPDF_CMapEncoder_Free =
      _HPDF_CMapEncoder_FreePtr.asFunction<void Function(HPDF_Encoder)>();

  int HPDF_CMapEncoder_Write(
    HPDF_Encoder encoder,
    HPDF_Stream out,
  ) {
    return _HPDF_CMapEncoder_Write(
      encoder,
      out,
    );
  }

  late final _HPDF_CMapEncoder_WritePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder, HPDF_Stream)>>(
      'HPDF_CMapEncoder_Write');
  late final _HPDF_CMapEncoder_Write = _HPDF_CMapEncoder_WritePtr.asFunction<
      int Function(HPDF_Encoder, HPDF_Stream)>();

  int HPDF_CMapEncoder_ToUnicode(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_CMapEncoder_ToUnicode(
      encoder,
      code,
    );
  }

  late final _HPDF_CMapEncoder_ToUnicodePtr = _lookup<
          ffi.NativeFunction<HPDF_UNICODE Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_CMapEncoder_ToUnicode');
  late final _HPDF_CMapEncoder_ToUnicode = _HPDF_CMapEncoder_ToUnicodePtr
      .asFunction<int Function(HPDF_Encoder, int)>();

  int HPDF_CMapEncoder_ToCID(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_CMapEncoder_ToCID(
      encoder,
      code,
    );
  }

  late final _HPDF_CMapEncoder_ToCIDPtr = _lookup<
          ffi.NativeFunction<HPDF_UINT16 Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_CMapEncoder_ToCID');
  late final _HPDF_CMapEncoder_ToCID =
      _HPDF_CMapEncoder_ToCIDPtr.asFunction<int Function(HPDF_Encoder, int)>();

  int HPDF_CMapEncoder_SetParseText(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_ParseText_Rec> state,
    ffi.Pointer<HPDF_BYTE> text,
    int len,
  ) {
    return _HPDF_CMapEncoder_SetParseText(
      encoder,
      state,
      text,
      len,
    );
  }

  late final _HPDF_CMapEncoder_SetParseTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Encoder,
              ffi.Pointer<HPDF_ParseText_Rec>,
              ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_CMapEncoder_SetParseText');
  late final _HPDF_CMapEncoder_SetParseText =
      _HPDF_CMapEncoder_SetParseTextPtr.asFunction<
          int Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>,
              ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_CMapEncoder_ByteType(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_ParseText_Rec> state,
  ) {
    return _HPDF_CMapEncoder_ByteType(
      encoder,
      state,
    );
  }

  late final _HPDF_CMapEncoder_ByteTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(HPDF_Encoder,
              ffi.Pointer<HPDF_ParseText_Rec>)>>('HPDF_CMapEncoder_ByteType');
  late final _HPDF_CMapEncoder_ByteType =
      _HPDF_CMapEncoder_ByteTypePtr.asFunction<
          int Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>)>();

  int HPDF_CMapEncoder_AddCMap(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_CidRange_Rec> range,
  ) {
    return _HPDF_CMapEncoder_AddCMap(
      encoder,
      range,
    );
  }

  late final _HPDF_CMapEncoder_AddCMapPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Encoder,
              ffi.Pointer<HPDF_CidRange_Rec>)>>('HPDF_CMapEncoder_AddCMap');
  late final _HPDF_CMapEncoder_AddCMap = _HPDF_CMapEncoder_AddCMapPtr
      .asFunction<int Function(HPDF_Encoder, ffi.Pointer<HPDF_CidRange_Rec>)>();

  int HPDF_CMapEncoder_AddNotDefRange(
    HPDF_Encoder encoder,
    HPDF_CidRange_Rec range,
  ) {
    return _HPDF_CMapEncoder_AddNotDefRange(
      encoder,
      range,
    );
  }

  late final _HPDF_CMapEncoder_AddNotDefRangePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Encoder,
              HPDF_CidRange_Rec)>>('HPDF_CMapEncoder_AddNotDefRange');
  late final _HPDF_CMapEncoder_AddNotDefRange =
      _HPDF_CMapEncoder_AddNotDefRangePtr.asFunction<
          int Function(HPDF_Encoder, HPDF_CidRange_Rec)>();

  int HPDF_CMapEncoder_AddCodeSpaceRange(
    HPDF_Encoder encoder,
    HPDF_CidRange_Rec range,
  ) {
    return _HPDF_CMapEncoder_AddCodeSpaceRange(
      encoder,
      range,
    );
  }

  late final _HPDF_CMapEncoder_AddCodeSpaceRangePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Encoder,
              HPDF_CidRange_Rec)>>('HPDF_CMapEncoder_AddCodeSpaceRange');
  late final _HPDF_CMapEncoder_AddCodeSpaceRange =
      _HPDF_CMapEncoder_AddCodeSpaceRangePtr.asFunction<
          int Function(HPDF_Encoder, HPDF_CidRange_Rec)>();

  void HPDF_CMapEncoder_SetUnicodeArray(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_UnicodeMap_Rec> array1,
  ) {
    return _HPDF_CMapEncoder_SetUnicodeArray(
      encoder,
      array1,
    );
  }

  late final _HPDF_CMapEncoder_SetUnicodeArrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  HPDF_Encoder, ffi.Pointer<HPDF_UnicodeMap_Rec>)>>(
      'HPDF_CMapEncoder_SetUnicodeArray');
  late final _HPDF_CMapEncoder_SetUnicodeArray =
      _HPDF_CMapEncoder_SetUnicodeArrayPtr.asFunction<
          void Function(HPDF_Encoder, ffi.Pointer<HPDF_UnicodeMap_Rec>)>();

  int HPDF_CMapEncoder_AddJWWLineHead(
    HPDF_Encoder encoder,
    ffi.Pointer<HPDF_UINT16> code,
  ) {
    return _HPDF_CMapEncoder_AddJWWLineHead(
      encoder,
      code,
    );
  }

  late final _HPDF_CMapEncoder_AddJWWLineHeadPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Encoder,
              ffi.Pointer<HPDF_UINT16>)>>('HPDF_CMapEncoder_AddJWWLineHead');
  late final _HPDF_CMapEncoder_AddJWWLineHead =
      _HPDF_CMapEncoder_AddJWWLineHeadPtr.asFunction<
          int Function(HPDF_Encoder, ffi.Pointer<HPDF_UINT16>)>();

  int HPDF_Encoder_CheckJWWLineHead(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_Encoder_CheckJWWLineHead(
      encoder,
      code,
    );
  }

  late final _HPDF_Encoder_CheckJWWLineHeadPtr = _lookup<
          ffi.NativeFunction<HPDF_BOOL Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_Encoder_CheckJWWLineHead');
  late final _HPDF_Encoder_CheckJWWLineHead = _HPDF_Encoder_CheckJWWLineHeadPtr
      .asFunction<int Function(HPDF_Encoder, int)>();

  ffi.Pointer<ffi.Char> HPDF_UnicodeToGryphName(
    int unicode,
  ) {
    return _HPDF_UnicodeToGryphName(
      unicode,
    );
  }

  late final _HPDF_UnicodeToGryphNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(HPDF_UNICODE)>>(
          'HPDF_UnicodeToGryphName');
  late final _HPDF_UnicodeToGryphName = _HPDF_UnicodeToGryphNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  int HPDF_GryphNameToUnicode(
    ffi.Pointer<ffi.Char> gryph_name,
  ) {
    return _HPDF_GryphNameToUnicode(
      gryph_name,
    );
  }

  late final _HPDF_GryphNameToUnicodePtr =
      _lookup<ffi.NativeFunction<HPDF_UNICODE Function(ffi.Pointer<ffi.Char>)>>(
          'HPDF_GryphNameToUnicode');
  late final _HPDF_GryphNameToUnicode = _HPDF_GryphNameToUnicodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int HPDF_Obj_WriteValue(
    ffi.Pointer<ffi.Void> obj,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Obj_WriteValue(
      obj,
      stream,
      e,
    );
  }

  late final _HPDF_Obj_WriteValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(ffi.Pointer<ffi.Void>, HPDF_Stream,
              HPDF_Encrypt)>>('HPDF_Obj_WriteValue');
  late final _HPDF_Obj_WriteValue = _HPDF_Obj_WriteValuePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, HPDF_Stream, HPDF_Encrypt)>();

  int HPDF_Obj_Write(
    ffi.Pointer<ffi.Void> obj,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Obj_Write(
      obj,
      stream,
      e,
    );
  }

  late final _HPDF_Obj_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(ffi.Pointer<ffi.Void>, HPDF_Stream,
              HPDF_Encrypt)>>('HPDF_Obj_Write');
  late final _HPDF_Obj_Write = _HPDF_Obj_WritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, HPDF_Stream, HPDF_Encrypt)>();

  void HPDF_Obj_Free(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Obj_Free(
      mmgr,
      obj,
    );
  }

  late final _HPDF_Obj_FreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HPDF_MMgr, ffi.Pointer<ffi.Void>)>>('HPDF_Obj_Free');
  late final _HPDF_Obj_Free = _HPDF_Obj_FreePtr.asFunction<
      void Function(HPDF_MMgr, ffi.Pointer<ffi.Void>)>();

  void HPDF_Obj_ForceFree(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Obj_ForceFree(
      mmgr,
      obj,
    );
  }

  late final _HPDF_Obj_ForceFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              HPDF_MMgr, ffi.Pointer<ffi.Void>)>>('HPDF_Obj_ForceFree');
  late final _HPDF_Obj_ForceFree = _HPDF_Obj_ForceFreePtr.asFunction<
      void Function(HPDF_MMgr, ffi.Pointer<ffi.Void>)>();

  HPDF_Null HPDF_Null_New(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_Null_New(
      mmgr,
    );
  }

  late final _HPDF_Null_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Null Function(HPDF_MMgr)>>(
          'HPDF_Null_New');
  late final _HPDF_Null_New =
      _HPDF_Null_NewPtr.asFunction<HPDF_Null Function(HPDF_MMgr)>();

  HPDF_Boolean HPDF_Boolean_New(
    HPDF_MMgr mmgr,
    int value,
  ) {
    return _HPDF_Boolean_New(
      mmgr,
      value,
    );
  }

  late final _HPDF_Boolean_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Boolean Function(HPDF_MMgr, HPDF_BOOL)>>(
          'HPDF_Boolean_New');
  late final _HPDF_Boolean_New =
      _HPDF_Boolean_NewPtr.asFunction<HPDF_Boolean Function(HPDF_MMgr, int)>();

  int HPDF_Boolean_Write(
    HPDF_Boolean obj,
    HPDF_Stream stream,
  ) {
    return _HPDF_Boolean_Write(
      obj,
      stream,
    );
  }

  late final _HPDF_Boolean_WritePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Boolean, HPDF_Stream)>>(
      'HPDF_Boolean_Write');
  late final _HPDF_Boolean_Write = _HPDF_Boolean_WritePtr.asFunction<
      int Function(HPDF_Boolean, HPDF_Stream)>();

  HPDF_Number HPDF_Number_New(
    HPDF_MMgr mmgr,
    int value,
  ) {
    return _HPDF_Number_New(
      mmgr,
      value,
    );
  }

  late final _HPDF_Number_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Number Function(HPDF_MMgr, HPDF_INT32)>>(
          'HPDF_Number_New');
  late final _HPDF_Number_New =
      _HPDF_Number_NewPtr.asFunction<HPDF_Number Function(HPDF_MMgr, int)>();

  void HPDF_Number_SetValue(
    HPDF_Number obj,
    int value,
  ) {
    return _HPDF_Number_SetValue(
      obj,
      value,
    );
  }

  late final _HPDF_Number_SetValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Number, HPDF_INT32)>>(
          'HPDF_Number_SetValue');
  late final _HPDF_Number_SetValue =
      _HPDF_Number_SetValuePtr.asFunction<void Function(HPDF_Number, int)>();

  int HPDF_Number_Write(
    HPDF_Number obj,
    HPDF_Stream stream,
  ) {
    return _HPDF_Number_Write(
      obj,
      stream,
    );
  }

  late final _HPDF_Number_WritePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Number, HPDF_Stream)>>(
      'HPDF_Number_Write');
  late final _HPDF_Number_Write = _HPDF_Number_WritePtr.asFunction<
      int Function(HPDF_Number, HPDF_Stream)>();

  HPDF_Real HPDF_Real_New(
    HPDF_MMgr mmgr,
    double value,
  ) {
    return _HPDF_Real_New(
      mmgr,
      value,
    );
  }

  late final _HPDF_Real_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Real Function(HPDF_MMgr, HPDF_REAL)>>(
          'HPDF_Real_New');
  late final _HPDF_Real_New =
      _HPDF_Real_NewPtr.asFunction<HPDF_Real Function(HPDF_MMgr, double)>();

  int HPDF_Real_Write(
    HPDF_Real obj,
    HPDF_Stream stream,
  ) {
    return _HPDF_Real_Write(
      obj,
      stream,
    );
  }

  late final _HPDF_Real_WritePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Real, HPDF_Stream)>>(
          'HPDF_Real_Write');
  late final _HPDF_Real_Write =
      _HPDF_Real_WritePtr.asFunction<int Function(HPDF_Real, HPDF_Stream)>();

  int HPDF_Real_SetValue(
    HPDF_Real obj,
    double value,
  ) {
    return _HPDF_Real_SetValue(
      obj,
      value,
    );
  }

  late final _HPDF_Real_SetValuePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Real, HPDF_REAL)>>(
          'HPDF_Real_SetValue');
  late final _HPDF_Real_SetValue =
      _HPDF_Real_SetValuePtr.asFunction<int Function(HPDF_Real, double)>();

  HPDF_Name HPDF_Name_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Name_New(
      mmgr,
      value,
    );
  }

  late final _HPDF_Name_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Name Function(
              HPDF_MMgr, ffi.Pointer<ffi.Char>)>>('HPDF_Name_New');
  late final _HPDF_Name_New = _HPDF_Name_NewPtr.asFunction<
      HPDF_Name Function(HPDF_MMgr, ffi.Pointer<ffi.Char>)>();

  int HPDF_Name_SetValue(
    HPDF_Name obj,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Name_SetValue(
      obj,
      value,
    );
  }

  late final _HPDF_Name_SetValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Name, ffi.Pointer<ffi.Char>)>>('HPDF_Name_SetValue');
  late final _HPDF_Name_SetValue = _HPDF_Name_SetValuePtr.asFunction<
      int Function(HPDF_Name, ffi.Pointer<ffi.Char>)>();

  int HPDF_Name_Write(
    HPDF_Name obj,
    HPDF_Stream stream,
  ) {
    return _HPDF_Name_Write(
      obj,
      stream,
    );
  }

  late final _HPDF_Name_WritePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Name, HPDF_Stream)>>(
          'HPDF_Name_Write');
  late final _HPDF_Name_Write =
      _HPDF_Name_WritePtr.asFunction<int Function(HPDF_Name, HPDF_Stream)>();

  ffi.Pointer<ffi.Char> HPDF_Name_GetValue(
    HPDF_Name obj,
  ) {
    return _HPDF_Name_GetValue(
      obj,
    );
  }

  late final _HPDF_Name_GetValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(HPDF_Name)>>(
          'HPDF_Name_GetValue');
  late final _HPDF_Name_GetValue = _HPDF_Name_GetValuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(HPDF_Name)>();

  HPDF_String HPDF_String_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> value,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_String_New(
      mmgr,
      value,
      encoder,
    );
  }

  late final _HPDF_String_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_String Function(HPDF_MMgr, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_String_New');
  late final _HPDF_String_New = _HPDF_String_NewPtr.asFunction<
      HPDF_String Function(HPDF_MMgr, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  int HPDF_String_SetValue(
    HPDF_String obj,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_String_SetValue(
      obj,
      value,
    );
  }

  late final _HPDF_String_SetValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_String, ffi.Pointer<ffi.Char>)>>('HPDF_String_SetValue');
  late final _HPDF_String_SetValue = _HPDF_String_SetValuePtr.asFunction<
      int Function(HPDF_String, ffi.Pointer<ffi.Char>)>();

  void HPDF_String_Free(
    HPDF_String obj,
  ) {
    return _HPDF_String_Free(
      obj,
    );
  }

  late final _HPDF_String_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_String)>>(
          'HPDF_String_Free');
  late final _HPDF_String_Free =
      _HPDF_String_FreePtr.asFunction<void Function(HPDF_String)>();

  int HPDF_String_Write(
    HPDF_String obj,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_String_Write(
      obj,
      stream,
      e,
    );
  }

  late final _HPDF_String_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_String, HPDF_Stream, HPDF_Encrypt)>>('HPDF_String_Write');
  late final _HPDF_String_Write = _HPDF_String_WritePtr.asFunction<
      int Function(HPDF_String, HPDF_Stream, HPDF_Encrypt)>();

  int HPDF_String_Cmp(
    HPDF_String s1,
    HPDF_String s2,
  ) {
    return _HPDF_String_Cmp(
      s1,
      s2,
    );
  }

  late final _HPDF_String_CmpPtr = _lookup<
          ffi.NativeFunction<HPDF_INT32 Function(HPDF_String, HPDF_String)>>(
      'HPDF_String_Cmp');
  late final _HPDF_String_Cmp =
      _HPDF_String_CmpPtr.asFunction<int Function(HPDF_String, HPDF_String)>();

  HPDF_Binary HPDF_Binary_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<HPDF_BYTE> value,
    int len,
  ) {
    return _HPDF_Binary_New(
      mmgr,
      value,
      len,
    );
  }

  late final _HPDF_Binary_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Binary Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Binary_New');
  late final _HPDF_Binary_New = _HPDF_Binary_NewPtr.asFunction<
      HPDF_Binary Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_Binary_SetValue(
    HPDF_Binary obj,
    ffi.Pointer<HPDF_BYTE> value,
    int len,
  ) {
    return _HPDF_Binary_SetValue(
      obj,
      value,
      len,
    );
  }

  late final _HPDF_Binary_SetValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Binary, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Binary_SetValue');
  late final _HPDF_Binary_SetValue = _HPDF_Binary_SetValuePtr.asFunction<
      int Function(HPDF_Binary, ffi.Pointer<HPDF_BYTE>, int)>();

  ffi.Pointer<HPDF_BYTE> HPDF_Binary_GetValue(
    HPDF_Binary obj,
  ) {
    return _HPDF_Binary_GetValue(
      obj,
    );
  }

  late final _HPDF_Binary_GetValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HPDF_BYTE> Function(HPDF_Binary)>>(
          'HPDF_Binary_GetValue');
  late final _HPDF_Binary_GetValue = _HPDF_Binary_GetValuePtr.asFunction<
      ffi.Pointer<HPDF_BYTE> Function(HPDF_Binary)>();

  void HPDF_Binary_Free(
    HPDF_Binary obj,
  ) {
    return _HPDF_Binary_Free(
      obj,
    );
  }

  late final _HPDF_Binary_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Binary)>>(
          'HPDF_Binary_Free');
  late final _HPDF_Binary_Free =
      _HPDF_Binary_FreePtr.asFunction<void Function(HPDF_Binary)>();

  int HPDF_Binary_Write(
    HPDF_Binary obj,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Binary_Write(
      obj,
      stream,
      e,
    );
  }

  late final _HPDF_Binary_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Binary, HPDF_Stream, HPDF_Encrypt)>>('HPDF_Binary_Write');
  late final _HPDF_Binary_Write = _HPDF_Binary_WritePtr.asFunction<
      int Function(HPDF_Binary, HPDF_Stream, HPDF_Encrypt)>();

  int HPDF_Binary_GetLen(
    HPDF_Binary obj,
  ) {
    return _HPDF_Binary_GetLen(
      obj,
    );
  }

  late final _HPDF_Binary_GetLenPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Binary)>>(
          'HPDF_Binary_GetLen');
  late final _HPDF_Binary_GetLen =
      _HPDF_Binary_GetLenPtr.asFunction<int Function(HPDF_Binary)>();

  HPDF_Array HPDF_Array_New(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_Array_New(
      mmgr,
    );
  }

  late final _HPDF_Array_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Array Function(HPDF_MMgr)>>(
          'HPDF_Array_New');
  late final _HPDF_Array_New =
      _HPDF_Array_NewPtr.asFunction<HPDF_Array Function(HPDF_MMgr)>();

  HPDF_Array HPDF_Box_Array_New(
    HPDF_MMgr mmgr,
    HPDF_Box box,
  ) {
    return _HPDF_Box_Array_New(
      mmgr,
      box,
    );
  }

  late final _HPDF_Box_Array_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Array Function(HPDF_MMgr, HPDF_Box)>>(
          'HPDF_Box_Array_New');
  late final _HPDF_Box_Array_New = _HPDF_Box_Array_NewPtr.asFunction<
      HPDF_Array Function(HPDF_MMgr, HPDF_Box)>();

  void HPDF_Array_Free(
    HPDF_Array array,
  ) {
    return _HPDF_Array_Free(
      array,
    );
  }

  late final _HPDF_Array_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Array)>>(
          'HPDF_Array_Free');
  late final _HPDF_Array_Free =
      _HPDF_Array_FreePtr.asFunction<void Function(HPDF_Array)>();

  int HPDF_Array_Write(
    HPDF_Array array,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Array_Write(
      array,
      stream,
      e,
    );
  }

  late final _HPDF_Array_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Array, HPDF_Stream, HPDF_Encrypt)>>('HPDF_Array_Write');
  late final _HPDF_Array_Write = _HPDF_Array_WritePtr.asFunction<
      int Function(HPDF_Array, HPDF_Stream, HPDF_Encrypt)>();

  int HPDF_Array_Add(
    HPDF_Array array,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Array_Add(
      array,
      obj,
    );
  }

  late final _HPDF_Array_AddPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Array, ffi.Pointer<ffi.Void>)>>('HPDF_Array_Add');
  late final _HPDF_Array_Add = _HPDF_Array_AddPtr.asFunction<
      int Function(HPDF_Array, ffi.Pointer<ffi.Void>)>();

  int HPDF_Array_Insert(
    HPDF_Array array,
    ffi.Pointer<ffi.Void> target,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Array_Insert(
      array,
      target,
      obj,
    );
  }

  late final _HPDF_Array_InsertPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Array, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('HPDF_Array_Insert');
  late final _HPDF_Array_Insert = _HPDF_Array_InsertPtr.asFunction<
      int Function(HPDF_Array, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> HPDF_Array_GetItem(
    HPDF_Array array,
    int index,
    int obj_class,
  ) {
    return _HPDF_Array_GetItem(
      array,
      index,
      obj_class,
    );
  }

  late final _HPDF_Array_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              HPDF_Array, HPDF_UINT, HPDF_UINT16)>>('HPDF_Array_GetItem');
  late final _HPDF_Array_GetItem = _HPDF_Array_GetItemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(HPDF_Array, int, int)>();

  int HPDF_Array_AddNumber(
    HPDF_Array array,
    int value,
  ) {
    return _HPDF_Array_AddNumber(
      array,
      value,
    );
  }

  late final _HPDF_Array_AddNumberPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Array, HPDF_INT32)>>(
          'HPDF_Array_AddNumber');
  late final _HPDF_Array_AddNumber =
      _HPDF_Array_AddNumberPtr.asFunction<int Function(HPDF_Array, int)>();

  int HPDF_Array_AddReal(
    HPDF_Array array,
    double value,
  ) {
    return _HPDF_Array_AddReal(
      array,
      value,
    );
  }

  late final _HPDF_Array_AddRealPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Array, HPDF_REAL)>>(
          'HPDF_Array_AddReal');
  late final _HPDF_Array_AddReal =
      _HPDF_Array_AddRealPtr.asFunction<int Function(HPDF_Array, double)>();

  int HPDF_Array_AddNull(
    HPDF_Array array,
  ) {
    return _HPDF_Array_AddNull(
      array,
    );
  }

  late final _HPDF_Array_AddNullPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Array)>>(
          'HPDF_Array_AddNull');
  late final _HPDF_Array_AddNull =
      _HPDF_Array_AddNullPtr.asFunction<int Function(HPDF_Array)>();

  int HPDF_Array_AddName(
    HPDF_Array array,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Array_AddName(
      array,
      value,
    );
  }

  late final _HPDF_Array_AddNamePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Array, ffi.Pointer<ffi.Char>)>>('HPDF_Array_AddName');
  late final _HPDF_Array_AddName = _HPDF_Array_AddNamePtr.asFunction<
      int Function(HPDF_Array, ffi.Pointer<ffi.Char>)>();

  void HPDF_Array_Clear(
    HPDF_Array array,
  ) {
    return _HPDF_Array_Clear(
      array,
    );
  }

  late final _HPDF_Array_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Array)>>(
          'HPDF_Array_Clear');
  late final _HPDF_Array_Clear =
      _HPDF_Array_ClearPtr.asFunction<void Function(HPDF_Array)>();

  int HPDF_Array_Items(
    HPDF_Array array,
  ) {
    return _HPDF_Array_Items(
      array,
    );
  }

  late final _HPDF_Array_ItemsPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Array)>>(
          'HPDF_Array_Items');
  late final _HPDF_Array_Items =
      _HPDF_Array_ItemsPtr.asFunction<int Function(HPDF_Array)>();

  HPDF_Dict HPDF_Dict_New(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_Dict_New(
      mmgr,
    );
  }

  late final _HPDF_Dict_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Dict Function(HPDF_MMgr)>>(
          'HPDF_Dict_New');
  late final _HPDF_Dict_New =
      _HPDF_Dict_NewPtr.asFunction<HPDF_Dict Function(HPDF_MMgr)>();

  HPDF_Dict HPDF_DictStream_New(
    HPDF_MMgr mmgr,
    HPDF_Xref xref,
  ) {
    return _HPDF_DictStream_New(
      mmgr,
      xref,
    );
  }

  late final _HPDF_DictStream_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Dict Function(HPDF_MMgr, HPDF_Xref)>>(
          'HPDF_DictStream_New');
  late final _HPDF_DictStream_New = _HPDF_DictStream_NewPtr.asFunction<
      HPDF_Dict Function(HPDF_MMgr, HPDF_Xref)>();

  void HPDF_Dict_Free(
    HPDF_Dict dict,
  ) {
    return _HPDF_Dict_Free(
      dict,
    );
  }

  late final _HPDF_Dict_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Dict)>>(
          'HPDF_Dict_Free');
  late final _HPDF_Dict_Free =
      _HPDF_Dict_FreePtr.asFunction<void Function(HPDF_Dict)>();

  int HPDF_Dict_Write(
    HPDF_Dict dict,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Dict_Write(
      dict,
      stream,
      e,
    );
  }

  late final _HPDF_Dict_WritePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Dict, HPDF_Stream, HPDF_Encrypt)>>('HPDF_Dict_Write');
  late final _HPDF_Dict_Write = _HPDF_Dict_WritePtr.asFunction<
      int Function(HPDF_Dict, HPDF_Stream, HPDF_Encrypt)>();

  ffi.Pointer<ffi.Char> HPDF_Dict_GetKeyByObj(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Dict_GetKeyByObj(
      dict,
      obj,
    );
  }

  late final _HPDF_Dict_GetKeyByObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Dict, ffi.Pointer<ffi.Void>)>>('HPDF_Dict_GetKeyByObj');
  late final _HPDF_Dict_GetKeyByObj = _HPDF_Dict_GetKeyByObjPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(HPDF_Dict, ffi.Pointer<ffi.Void>)>();

  int HPDF_Dict_Add(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Dict_Add(
      dict,
      key,
      obj,
    );
  }

  late final _HPDF_Dict_AddPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('HPDF_Dict_Add');
  late final _HPDF_Dict_Add = _HPDF_Dict_AddPtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> HPDF_Dict_GetItem(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    int obj_class,
  ) {
    return _HPDF_Dict_GetItem(
      dict,
      key,
      obj_class,
    );
  }

  late final _HPDF_Dict_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              HPDF_UINT16)>>('HPDF_Dict_GetItem');
  late final _HPDF_Dict_GetItem = _HPDF_Dict_GetItemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(HPDF_Dict, ffi.Pointer<ffi.Char>, int)>();

  int HPDF_Dict_AddName(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_Dict_AddName(
      dict,
      key,
      value,
    );
  }

  late final _HPDF_Dict_AddNamePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('HPDF_Dict_AddName');
  late final _HPDF_Dict_AddName = _HPDF_Dict_AddNamePtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int HPDF_Dict_AddNumber(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _HPDF_Dict_AddNumber(
      dict,
      key,
      value,
    );
  }

  late final _HPDF_Dict_AddNumberPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              HPDF_INT32)>>('HPDF_Dict_AddNumber');
  late final _HPDF_Dict_AddNumber = _HPDF_Dict_AddNumberPtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>, int)>();

  int HPDF_Dict_AddReal(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    double value,
  ) {
    return _HPDF_Dict_AddReal(
      dict,
      key,
      value,
    );
  }

  late final _HPDF_Dict_AddRealPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              HPDF_REAL)>>('HPDF_Dict_AddReal');
  late final _HPDF_Dict_AddReal = _HPDF_Dict_AddRealPtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>, double)>();

  int HPDF_Dict_AddBoolean(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _HPDF_Dict_AddBoolean(
      dict,
      key,
      value,
    );
  }

  late final _HPDF_Dict_AddBooleanPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Dict, ffi.Pointer<ffi.Char>,
              HPDF_BOOL)>>('HPDF_Dict_AddBoolean');
  late final _HPDF_Dict_AddBoolean = _HPDF_Dict_AddBooleanPtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>, int)>();

  int HPDF_Dict_RemoveElement(
    HPDF_Dict dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _HPDF_Dict_RemoveElement(
      dict,
      key,
    );
  }

  late final _HPDF_Dict_RemoveElementPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Dict, ffi.Pointer<ffi.Char>)>>('HPDF_Dict_RemoveElement');
  late final _HPDF_Dict_RemoveElement = _HPDF_Dict_RemoveElementPtr.asFunction<
      int Function(HPDF_Dict, ffi.Pointer<ffi.Char>)>();

  HPDF_Proxy HPDF_Proxy_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Proxy_New(
      mmgr,
      obj,
    );
  }

  late final _HPDF_Proxy_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Proxy Function(
              HPDF_MMgr, ffi.Pointer<ffi.Void>)>>('HPDF_Proxy_New');
  late final _HPDF_Proxy_New = _HPDF_Proxy_NewPtr.asFunction<
      HPDF_Proxy Function(HPDF_MMgr, ffi.Pointer<ffi.Void>)>();

  HPDF_Xref HPDF_Xref_New(
    HPDF_MMgr mmgr,
    int offset,
  ) {
    return _HPDF_Xref_New(
      mmgr,
      offset,
    );
  }

  late final _HPDF_Xref_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Xref Function(HPDF_MMgr, HPDF_UINT32)>>(
          'HPDF_Xref_New');
  late final _HPDF_Xref_New =
      _HPDF_Xref_NewPtr.asFunction<HPDF_Xref Function(HPDF_MMgr, int)>();

  void HPDF_Xref_Free(
    HPDF_Xref xref,
  ) {
    return _HPDF_Xref_Free(
      xref,
    );
  }

  late final _HPDF_Xref_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Xref)>>(
          'HPDF_Xref_Free');
  late final _HPDF_Xref_Free =
      _HPDF_Xref_FreePtr.asFunction<void Function(HPDF_Xref)>();

  int HPDF_Xref_Add(
    HPDF_Xref xref,
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _HPDF_Xref_Add(
      xref,
      obj,
    );
  }

  late final _HPDF_Xref_AddPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Xref, ffi.Pointer<ffi.Void>)>>('HPDF_Xref_Add');
  late final _HPDF_Xref_Add = _HPDF_Xref_AddPtr.asFunction<
      int Function(HPDF_Xref, ffi.Pointer<ffi.Void>)>();

  HPDF_XrefEntry HPDF_Xref_GetEntry(
    HPDF_Xref xref,
    int index,
  ) {
    return _HPDF_Xref_GetEntry(
      xref,
      index,
    );
  }

  late final _HPDF_Xref_GetEntryPtr = _lookup<
          ffi.NativeFunction<HPDF_XrefEntry Function(HPDF_Xref, HPDF_UINT)>>(
      'HPDF_Xref_GetEntry');
  late final _HPDF_Xref_GetEntry = _HPDF_Xref_GetEntryPtr.asFunction<
      HPDF_XrefEntry Function(HPDF_Xref, int)>();

  int HPDF_Xref_WriteToStream(
    HPDF_Xref xref,
    HPDF_Stream stream,
    HPDF_Encrypt e,
  ) {
    return _HPDF_Xref_WriteToStream(
      xref,
      stream,
      e,
    );
  }

  late final _HPDF_Xref_WriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Xref, HPDF_Stream,
              HPDF_Encrypt)>>('HPDF_Xref_WriteToStream');
  late final _HPDF_Xref_WriteToStream = _HPDF_Xref_WriteToStreamPtr.asFunction<
      int Function(HPDF_Xref, HPDF_Stream, HPDF_Encrypt)>();

  HPDF_XrefEntry HPDF_Xref_GetEntryByObjectId(
    HPDF_Xref xref,
    int obj_id,
  ) {
    return _HPDF_Xref_GetEntryByObjectId(
      xref,
      obj_id,
    );
  }

  late final _HPDF_Xref_GetEntryByObjectIdPtr = _lookup<
          ffi.NativeFunction<HPDF_XrefEntry Function(HPDF_Xref, HPDF_UINT)>>(
      'HPDF_Xref_GetEntryByObjectId');
  late final _HPDF_Xref_GetEntryByObjectId = _HPDF_Xref_GetEntryByObjectIdPtr
      .asFunction<HPDF_XrefEntry Function(HPDF_Xref, int)>();

  HPDF_Direct HPDF_Direct_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<HPDF_BYTE> value,
    int len,
  ) {
    return _HPDF_Direct_New(
      mmgr,
      value,
      len,
    );
  }

  late final _HPDF_Direct_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Direct Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Direct_New');
  late final _HPDF_Direct_New = _HPDF_Direct_NewPtr.asFunction<
      HPDF_Direct Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_Direct_SetValue(
    HPDF_Direct obj,
    ffi.Pointer<HPDF_BYTE> value,
    int len,
  ) {
    return _HPDF_Direct_SetValue(
      obj,
      value,
      len,
    );
  }

  late final _HPDF_Direct_SetValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Direct, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Direct_SetValue');
  late final _HPDF_Direct_SetValue = _HPDF_Direct_SetValuePtr.asFunction<
      int Function(HPDF_Direct, ffi.Pointer<HPDF_BYTE>, int)>();

  void HPDF_Direct_Free(
    HPDF_Direct obj,
  ) {
    return _HPDF_Direct_Free(
      obj,
    );
  }

  late final _HPDF_Direct_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Direct)>>(
          'HPDF_Direct_Free');
  late final _HPDF_Direct_Free =
      _HPDF_Direct_FreePtr.asFunction<void Function(HPDF_Direct)>();

  int HPDF_Direct_Write(
    HPDF_Direct obj,
    HPDF_Stream stream,
  ) {
    return _HPDF_Direct_Write(
      obj,
      stream,
    );
  }

  late final _HPDF_Direct_WritePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Direct, HPDF_Stream)>>(
      'HPDF_Direct_Write');
  late final _HPDF_Direct_Write = _HPDF_Direct_WritePtr.asFunction<
      int Function(HPDF_Direct, HPDF_Stream)>();

  HPDF_Catalog HPDF_Catalog_New(
    HPDF_MMgr mmgr,
    HPDF_Xref xref,
  ) {
    return _HPDF_Catalog_New(
      mmgr,
      xref,
    );
  }

  late final _HPDF_Catalog_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Catalog Function(HPDF_MMgr, HPDF_Xref)>>(
          'HPDF_Catalog_New');
  late final _HPDF_Catalog_New = _HPDF_Catalog_NewPtr.asFunction<
      HPDF_Catalog Function(HPDF_MMgr, HPDF_Xref)>();

  HPDF_NameDict HPDF_Catalog_GetNames(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_GetNames(
      catalog,
    );
  }

  late final _HPDF_Catalog_GetNamesPtr =
      _lookup<ffi.NativeFunction<HPDF_NameDict Function(HPDF_Catalog)>>(
          'HPDF_Catalog_GetNames');
  late final _HPDF_Catalog_GetNames = _HPDF_Catalog_GetNamesPtr.asFunction<
      HPDF_NameDict Function(HPDF_Catalog)>();

  int HPDF_Catalog_SetNames(
    HPDF_Catalog catalog,
    HPDF_NameDict dict,
  ) {
    return _HPDF_Catalog_SetNames(
      catalog,
      dict,
    );
  }

  late final _HPDF_Catalog_SetNamesPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Catalog, HPDF_NameDict)>>('HPDF_Catalog_SetNames');
  late final _HPDF_Catalog_SetNames = _HPDF_Catalog_SetNamesPtr.asFunction<
      int Function(HPDF_Catalog, HPDF_NameDict)>();

  HPDF_Pages HPDF_Catalog_GetRoot(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_GetRoot(
      catalog,
    );
  }

  late final _HPDF_Catalog_GetRootPtr =
      _lookup<ffi.NativeFunction<HPDF_Pages Function(HPDF_Catalog)>>(
          'HPDF_Catalog_GetRoot');
  late final _HPDF_Catalog_GetRoot =
      _HPDF_Catalog_GetRootPtr.asFunction<HPDF_Pages Function(HPDF_Catalog)>();

  int HPDF_Catalog_GetPageLayout(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_GetPageLayout(
      catalog,
    );
  }

  late final _HPDF_Catalog_GetPageLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Catalog)>>(
          'HPDF_Catalog_GetPageLayout');
  late final _HPDF_Catalog_GetPageLayout =
      _HPDF_Catalog_GetPageLayoutPtr.asFunction<int Function(HPDF_Catalog)>();

  int HPDF_Catalog_SetPageLayout(
    HPDF_Catalog catalog,
    int layout,
  ) {
    return _HPDF_Catalog_SetPageLayout(
      catalog,
      layout,
    );
  }

  late final _HPDF_Catalog_SetPageLayoutPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Catalog, ffi.Int32)>>(
      'HPDF_Catalog_SetPageLayout');
  late final _HPDF_Catalog_SetPageLayout = _HPDF_Catalog_SetPageLayoutPtr
      .asFunction<int Function(HPDF_Catalog, int)>();

  int HPDF_Catalog_GetPageMode(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_GetPageMode(
      catalog,
    );
  }

  late final _HPDF_Catalog_GetPageModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Catalog)>>(
          'HPDF_Catalog_GetPageMode');
  late final _HPDF_Catalog_GetPageMode =
      _HPDF_Catalog_GetPageModePtr.asFunction<int Function(HPDF_Catalog)>();

  int HPDF_Catalog_SetPageMode(
    HPDF_Catalog catalog,
    int mode,
  ) {
    return _HPDF_Catalog_SetPageMode(
      catalog,
      mode,
    );
  }

  late final _HPDF_Catalog_SetPageModePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Catalog, ffi.Int32)>>(
      'HPDF_Catalog_SetPageMode');
  late final _HPDF_Catalog_SetPageMode = _HPDF_Catalog_SetPageModePtr
      .asFunction<int Function(HPDF_Catalog, int)>();

  int HPDF_Catalog_SetOpenAction(
    HPDF_Catalog catalog,
    HPDF_Destination open_action,
  ) {
    return _HPDF_Catalog_SetOpenAction(
      catalog,
      open_action,
    );
  }

  late final _HPDF_Catalog_SetOpenActionPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Catalog, HPDF_Destination)>>('HPDF_Catalog_SetOpenAction');
  late final _HPDF_Catalog_SetOpenAction = _HPDF_Catalog_SetOpenActionPtr
      .asFunction<int Function(HPDF_Catalog, HPDF_Destination)>();

  int HPDF_Catalog_AddPageLabel(
    HPDF_Catalog catalog,
    int page_num,
    HPDF_Dict page_label,
  ) {
    return _HPDF_Catalog_AddPageLabel(
      catalog,
      page_num,
      page_label,
    );
  }

  late final _HPDF_Catalog_AddPageLabelPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Catalog, HPDF_UINT,
              HPDF_Dict)>>('HPDF_Catalog_AddPageLabel');
  late final _HPDF_Catalog_AddPageLabel = _HPDF_Catalog_AddPageLabelPtr
      .asFunction<int Function(HPDF_Catalog, int, HPDF_Dict)>();

  int HPDF_Catalog_GetViewerPreference(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_GetViewerPreference(
      catalog,
    );
  }

  late final _HPDF_Catalog_GetViewerPreferencePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Catalog)>>(
          'HPDF_Catalog_GetViewerPreference');
  late final _HPDF_Catalog_GetViewerPreference =
      _HPDF_Catalog_GetViewerPreferencePtr.asFunction<
          int Function(HPDF_Catalog)>();

  int HPDF_Catalog_SetViewerPreference(
    HPDF_Catalog catalog,
    int value,
  ) {
    return _HPDF_Catalog_SetViewerPreference(
      catalog,
      value,
    );
  }

  late final _HPDF_Catalog_SetViewerPreferencePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Catalog, HPDF_UINT)>>(
      'HPDF_Catalog_SetViewerPreference');
  late final _HPDF_Catalog_SetViewerPreference =
      _HPDF_Catalog_SetViewerPreferencePtr.asFunction<
          int Function(HPDF_Catalog, int)>();

  int HPDF_Catalog_Validate(
    HPDF_Catalog catalog,
  ) {
    return _HPDF_Catalog_Validate(
      catalog,
    );
  }

  late final _HPDF_Catalog_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Catalog)>>(
          'HPDF_Catalog_Validate');
  late final _HPDF_Catalog_Validate =
      _HPDF_Catalog_ValidatePtr.asFunction<int Function(HPDF_Catalog)>();

  HPDF_Image HPDF_Image_Load1BitImageFromMem(
    HPDF_MMgr mmgr,
    ffi.Pointer<HPDF_BYTE> buf,
    HPDF_Xref xref,
    int width,
    int height,
    int line_width,
    int top_is_first,
  ) {
    return _HPDF_Image_Load1BitImageFromMem(
      mmgr,
      buf,
      xref,
      width,
      height,
      line_width,
      top_is_first,
    );
  }

  late final _HPDF_Image_Load1BitImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_MMgr,
              ffi.Pointer<HPDF_BYTE>,
              HPDF_Xref,
              HPDF_UINT,
              HPDF_UINT,
              HPDF_UINT,
              HPDF_BOOL)>>('HPDF_Image_Load1BitImageFromMem');
  late final _HPDF_Image_Load1BitImageFromMem =
      _HPDF_Image_Load1BitImageFromMemPtr.asFunction<
          HPDF_Image Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, HPDF_Xref, int,
              int, int, int)>();

  HPDF_Image HPDF_Image_LoadJpegImage(
    HPDF_MMgr mmgr,
    HPDF_Stream jpeg_data,
    HPDF_Xref xref,
  ) {
    return _HPDF_Image_LoadJpegImage(
      mmgr,
      jpeg_data,
      xref,
    );
  }

  late final _HPDF_Image_LoadJpegImagePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_MMgr, HPDF_Stream, HPDF_Xref)>>('HPDF_Image_LoadJpegImage');
  late final _HPDF_Image_LoadJpegImage = _HPDF_Image_LoadJpegImagePtr
      .asFunction<HPDF_Image Function(HPDF_MMgr, HPDF_Stream, HPDF_Xref)>();

  HPDF_Image HPDF_Image_LoadJpegImageFromMem(
    HPDF_MMgr mmgr,
    ffi.Pointer<HPDF_BYTE> buf,
    int size,
    HPDF_Xref xref,
  ) {
    return _HPDF_Image_LoadJpegImageFromMem(
      mmgr,
      buf,
      size,
      xref,
    );
  }

  late final _HPDF_Image_LoadJpegImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, HPDF_UINT,
              HPDF_Xref)>>('HPDF_Image_LoadJpegImageFromMem');
  late final _HPDF_Image_LoadJpegImageFromMem =
      _HPDF_Image_LoadJpegImageFromMemPtr.asFunction<
          HPDF_Image Function(
              HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, int, HPDF_Xref)>();

  HPDF_Image HPDF_Image_LoadRawImage(
    HPDF_MMgr mmgr,
    HPDF_Stream stream,
    HPDF_Xref xref,
    int width,
    int height,
    int color_space,
  ) {
    return _HPDF_Image_LoadRawImage(
      mmgr,
      stream,
      xref,
      width,
      height,
      color_space,
    );
  }

  late final _HPDF_Image_LoadRawImagePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_MMgr, HPDF_Stream, HPDF_Xref, HPDF_UINT,
              HPDF_UINT, ffi.Int32)>>('HPDF_Image_LoadRawImage');
  late final _HPDF_Image_LoadRawImage = _HPDF_Image_LoadRawImagePtr.asFunction<
      HPDF_Image Function(HPDF_MMgr, HPDF_Stream, HPDF_Xref, int, int, int)>();

  HPDF_Image HPDF_Image_LoadRawImageFromMem(
    HPDF_MMgr mmgr,
    ffi.Pointer<HPDF_BYTE> buf,
    HPDF_Xref xref,
    int width,
    int height,
    int color_space,
    int bits_per_component,
  ) {
    return _HPDF_Image_LoadRawImageFromMem(
      mmgr,
      buf,
      xref,
      width,
      height,
      color_space,
      bits_per_component,
    );
  }

  late final _HPDF_Image_LoadRawImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_MMgr,
              ffi.Pointer<HPDF_BYTE>,
              HPDF_Xref,
              HPDF_UINT,
              HPDF_UINT,
              ffi.Int32,
              HPDF_UINT)>>('HPDF_Image_LoadRawImageFromMem');
  late final _HPDF_Image_LoadRawImageFromMem =
      _HPDF_Image_LoadRawImageFromMemPtr.asFunction<
          HPDF_Image Function(HPDF_MMgr, ffi.Pointer<HPDF_BYTE>, HPDF_Xref, int,
              int, int, int)>();

  int HPDF_Image_Validate(
    HPDF_Image image,
  ) {
    return _HPDF_Image_Validate(
      image,
    );
  }

  late final _HPDF_Image_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Image)>>(
          'HPDF_Image_Validate');
  late final _HPDF_Image_Validate =
      _HPDF_Image_ValidatePtr.asFunction<int Function(HPDF_Image)>();

  int HPDF_Image_SetMask(
    HPDF_Image image,
    int mask,
  ) {
    return _HPDF_Image_SetMask(
      image,
      mask,
    );
  }

  late final _HPDF_Image_SetMaskPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Image, HPDF_BOOL)>>(
          'HPDF_Image_SetMask');
  late final _HPDF_Image_SetMask =
      _HPDF_Image_SetMaskPtr.asFunction<int Function(HPDF_Image, int)>();

  int HPDF_Image_SetColorSpace(
    HPDF_Image image,
    HPDF_Array colorspace,
  ) {
    return _HPDF_Image_SetColorSpace(
      image,
      colorspace,
    );
  }

  late final _HPDF_Image_SetColorSpacePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Image, HPDF_Array)>>(
          'HPDF_Image_SetColorSpace');
  late final _HPDF_Image_SetColorSpace = _HPDF_Image_SetColorSpacePtr
      .asFunction<int Function(HPDF_Image, HPDF_Array)>();

  int HPDF_Image_SetRenderingIntent(
    HPDF_Image image,
    ffi.Pointer<ffi.Char> intent,
  ) {
    return _HPDF_Image_SetRenderingIntent(
      image,
      intent,
    );
  }

  late final _HPDF_Image_SetRenderingIntentPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Image,
              ffi.Pointer<ffi.Char>)>>('HPDF_Image_SetRenderingIntent');
  late final _HPDF_Image_SetRenderingIntent = _HPDF_Image_SetRenderingIntentPtr
      .asFunction<int Function(HPDF_Image, ffi.Pointer<ffi.Char>)>();

  void HPDF_FontDef_Free(
    HPDF_FontDef fontdef,
  ) {
    return _HPDF_FontDef_Free(
      fontdef,
    );
  }

  late final _HPDF_FontDef_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_FontDef)>>(
          'HPDF_FontDef_Free');
  late final _HPDF_FontDef_Free =
      _HPDF_FontDef_FreePtr.asFunction<void Function(HPDF_FontDef)>();

  void HPDF_FontDef_Cleanup(
    HPDF_FontDef fontdef,
  ) {
    return _HPDF_FontDef_Cleanup(
      fontdef,
    );
  }

  late final _HPDF_FontDef_CleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_FontDef)>>(
          'HPDF_FontDef_Cleanup');
  late final _HPDF_FontDef_Cleanup =
      _HPDF_FontDef_CleanupPtr.asFunction<void Function(HPDF_FontDef)>();

  int HPDF_FontDef_Validate(
    HPDF_FontDef fontdef,
  ) {
    return _HPDF_FontDef_Validate(
      fontdef,
    );
  }

  late final _HPDF_FontDef_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_FontDef)>>(
          'HPDF_FontDef_Validate');
  late final _HPDF_FontDef_Validate =
      _HPDF_FontDef_ValidatePtr.asFunction<int Function(HPDF_FontDef)>();

  HPDF_FontDef HPDF_Type1FontDef_New(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_Type1FontDef_New(
      mmgr,
    );
  }

  late final _HPDF_Type1FontDef_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_FontDef Function(HPDF_MMgr)>>(
          'HPDF_Type1FontDef_New');
  late final _HPDF_Type1FontDef_New =
      _HPDF_Type1FontDef_NewPtr.asFunction<HPDF_FontDef Function(HPDF_MMgr)>();

  HPDF_FontDef HPDF_Type1FontDef_Load(
    HPDF_MMgr mmgr,
    HPDF_Stream afm,
    HPDF_Stream font_data,
  ) {
    return _HPDF_Type1FontDef_Load(
      mmgr,
      afm,
      font_data,
    );
  }

  late final _HPDF_Type1FontDef_LoadPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(
              HPDF_MMgr, HPDF_Stream, HPDF_Stream)>>('HPDF_Type1FontDef_Load');
  late final _HPDF_Type1FontDef_Load = _HPDF_Type1FontDef_LoadPtr.asFunction<
      HPDF_FontDef Function(HPDF_MMgr, HPDF_Stream, HPDF_Stream)>();

  HPDF_FontDef HPDF_Type1FontDef_Duplicate(
    HPDF_MMgr mmgr,
    HPDF_FontDef src,
  ) {
    return _HPDF_Type1FontDef_Duplicate(
      mmgr,
      src,
    );
  }

  late final _HPDF_Type1FontDef_DuplicatePtr = _lookup<
          ffi.NativeFunction<HPDF_FontDef Function(HPDF_MMgr, HPDF_FontDef)>>(
      'HPDF_Type1FontDef_Duplicate');
  late final _HPDF_Type1FontDef_Duplicate = _HPDF_Type1FontDef_DuplicatePtr
      .asFunction<HPDF_FontDef Function(HPDF_MMgr, HPDF_FontDef)>();

  int HPDF_Type1FontDef_SetWidths(
    HPDF_FontDef fontdef,
    ffi.Pointer<HPDF_CharData> widths,
  ) {
    return _HPDF_Type1FontDef_SetWidths(
      fontdef,
      widths,
    );
  }

  late final _HPDF_Type1FontDef_SetWidthsPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_FontDef,
              ffi.Pointer<HPDF_CharData>)>>('HPDF_Type1FontDef_SetWidths');
  late final _HPDF_Type1FontDef_SetWidths = _HPDF_Type1FontDef_SetWidthsPtr
      .asFunction<int Function(HPDF_FontDef, ffi.Pointer<HPDF_CharData>)>();

  int HPDF_Type1FontDef_GetWidthByName(
    HPDF_FontDef fontdef,
    ffi.Pointer<ffi.Char> gryph_name,
  ) {
    return _HPDF_Type1FontDef_GetWidthByName(
      fontdef,
      gryph_name,
    );
  }

  late final _HPDF_Type1FontDef_GetWidthByNamePtr = _lookup<
      ffi.NativeFunction<
          HPDF_INT16 Function(HPDF_FontDef,
              ffi.Pointer<ffi.Char>)>>('HPDF_Type1FontDef_GetWidthByName');
  late final _HPDF_Type1FontDef_GetWidthByName =
      _HPDF_Type1FontDef_GetWidthByNamePtr.asFunction<
          int Function(HPDF_FontDef, ffi.Pointer<ffi.Char>)>();

  int HPDF_Type1FontDef_GetWidth(
    HPDF_FontDef fontdef,
    int unicode,
  ) {
    return _HPDF_Type1FontDef_GetWidth(
      fontdef,
      unicode,
    );
  }

  late final _HPDF_Type1FontDef_GetWidthPtr = _lookup<
          ffi.NativeFunction<HPDF_INT16 Function(HPDF_FontDef, HPDF_UNICODE)>>(
      'HPDF_Type1FontDef_GetWidth');
  late final _HPDF_Type1FontDef_GetWidth = _HPDF_Type1FontDef_GetWidthPtr
      .asFunction<int Function(HPDF_FontDef, int)>();

  HPDF_FontDef HPDF_Base14FontDef_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> font_name,
  ) {
    return _HPDF_Base14FontDef_New(
      mmgr,
      font_name,
    );
  }

  late final _HPDF_Base14FontDef_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(
              HPDF_MMgr, ffi.Pointer<ffi.Char>)>>('HPDF_Base14FontDef_New');
  late final _HPDF_Base14FontDef_New = _HPDF_Base14FontDef_NewPtr.asFunction<
      HPDF_FontDef Function(HPDF_MMgr, ffi.Pointer<ffi.Char>)>();

  HPDF_FontDef HPDF_TTFontDef_New(
    HPDF_MMgr mmgr,
  ) {
    return _HPDF_TTFontDef_New(
      mmgr,
    );
  }

  late final _HPDF_TTFontDef_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_FontDef Function(HPDF_MMgr)>>(
          'HPDF_TTFontDef_New');
  late final _HPDF_TTFontDef_New =
      _HPDF_TTFontDef_NewPtr.asFunction<HPDF_FontDef Function(HPDF_MMgr)>();

  HPDF_FontDef HPDF_TTFontDef_Load(
    HPDF_MMgr mmgr,
    HPDF_Stream stream,
    int embedding,
  ) {
    return _HPDF_TTFontDef_Load(
      mmgr,
      stream,
      embedding,
    );
  }

  late final _HPDF_TTFontDef_LoadPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(
              HPDF_MMgr, HPDF_Stream, HPDF_BOOL)>>('HPDF_TTFontDef_Load');
  late final _HPDF_TTFontDef_Load = _HPDF_TTFontDef_LoadPtr.asFunction<
      HPDF_FontDef Function(HPDF_MMgr, HPDF_Stream, int)>();

  HPDF_FontDef HPDF_TTFontDef_Load2(
    HPDF_MMgr mmgr,
    HPDF_Stream stream,
    int index,
    int embedding,
  ) {
    return _HPDF_TTFontDef_Load2(
      mmgr,
      stream,
      index,
      embedding,
    );
  }

  late final _HPDF_TTFontDef_Load2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(HPDF_MMgr, HPDF_Stream, HPDF_UINT,
              HPDF_BOOL)>>('HPDF_TTFontDef_Load2');
  late final _HPDF_TTFontDef_Load2 = _HPDF_TTFontDef_Load2Ptr.asFunction<
      HPDF_FontDef Function(HPDF_MMgr, HPDF_Stream, int, int)>();

  int HPDF_TTFontDef_GetGlyphid(
    HPDF_FontDef fontdef,
    int unicode,
  ) {
    return _HPDF_TTFontDef_GetGlyphid(
      fontdef,
      unicode,
    );
  }

  late final _HPDF_TTFontDef_GetGlyphidPtr = _lookup<
          ffi.NativeFunction<HPDF_UINT16 Function(HPDF_FontDef, HPDF_UINT16)>>(
      'HPDF_TTFontDef_GetGlyphid');
  late final _HPDF_TTFontDef_GetGlyphid = _HPDF_TTFontDef_GetGlyphidPtr
      .asFunction<int Function(HPDF_FontDef, int)>();

  int HPDF_TTFontDef_GetCharWidth(
    HPDF_FontDef fontdef,
    int unicode,
  ) {
    return _HPDF_TTFontDef_GetCharWidth(
      fontdef,
      unicode,
    );
  }

  late final _HPDF_TTFontDef_GetCharWidthPtr = _lookup<
          ffi.NativeFunction<HPDF_INT16 Function(HPDF_FontDef, HPDF_UINT16)>>(
      'HPDF_TTFontDef_GetCharWidth');
  late final _HPDF_TTFontDef_GetCharWidth = _HPDF_TTFontDef_GetCharWidthPtr
      .asFunction<int Function(HPDF_FontDef, int)>();

  int HPDF_TTFontDef_GetGidWidth(
    HPDF_FontDef fontdef,
    int gid,
  ) {
    return _HPDF_TTFontDef_GetGidWidth(
      fontdef,
      gid,
    );
  }

  late final _HPDF_TTFontDef_GetGidWidthPtr = _lookup<
          ffi.NativeFunction<HPDF_INT16 Function(HPDF_FontDef, HPDF_UINT16)>>(
      'HPDF_TTFontDef_GetGidWidth');
  late final _HPDF_TTFontDef_GetGidWidth = _HPDF_TTFontDef_GetGidWidthPtr
      .asFunction<int Function(HPDF_FontDef, int)>();

  int HPDF_TTFontDef_SaveFontData(
    HPDF_FontDef fontdef,
    HPDF_Stream stream,
  ) {
    return _HPDF_TTFontDef_SaveFontData(
      fontdef,
      stream,
    );
  }

  late final _HPDF_TTFontDef_SaveFontDataPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_FontDef, HPDF_Stream)>>(
      'HPDF_TTFontDef_SaveFontData');
  late final _HPDF_TTFontDef_SaveFontData = _HPDF_TTFontDef_SaveFontDataPtr
      .asFunction<int Function(HPDF_FontDef, HPDF_Stream)>();

  HPDF_Box HPDF_TTFontDef_GetCharBBox(
    HPDF_FontDef fontdef,
    int unicode,
  ) {
    return _HPDF_TTFontDef_GetCharBBox(
      fontdef,
      unicode,
    );
  }

  late final _HPDF_TTFontDef_GetCharBBoxPtr =
      _lookup<ffi.NativeFunction<HPDF_Box Function(HPDF_FontDef, HPDF_UINT16)>>(
          'HPDF_TTFontDef_GetCharBBox');
  late final _HPDF_TTFontDef_GetCharBBox = _HPDF_TTFontDef_GetCharBBoxPtr
      .asFunction<HPDF_Box Function(HPDF_FontDef, int)>();

  void HPDF_TTFontDef_SetTagName(
    HPDF_FontDef fontdef,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _HPDF_TTFontDef_SetTagName(
      fontdef,
      tag,
    );
  }

  late final _HPDF_TTFontDef_SetTagNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(HPDF_FontDef,
              ffi.Pointer<ffi.Char>)>>('HPDF_TTFontDef_SetTagName');
  late final _HPDF_TTFontDef_SetTagName = _HPDF_TTFontDef_SetTagNamePtr
      .asFunction<void Function(HPDF_FontDef, ffi.Pointer<ffi.Char>)>();

  HPDF_FontDef HPDF_CIDFontDef_New(
    HPDF_MMgr mmgr,
    ffi.Pointer<ffi.Char> name,
    HPDF_FontDef_InitFunc init_fn,
  ) {
    return _HPDF_CIDFontDef_New(
      mmgr,
      name,
      init_fn,
    );
  }

  late final _HPDF_CIDFontDef_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(HPDF_MMgr, ffi.Pointer<ffi.Char>,
              HPDF_FontDef_InitFunc)>>('HPDF_CIDFontDef_New');
  late final _HPDF_CIDFontDef_New = _HPDF_CIDFontDef_NewPtr.asFunction<
      HPDF_FontDef Function(
          HPDF_MMgr, ffi.Pointer<ffi.Char>, HPDF_FontDef_InitFunc)>();

  int HPDF_CIDFontDef_AddWidth(
    HPDF_FontDef fontdef,
    ffi.Pointer<HPDF_CID_Width> widths,
  ) {
    return _HPDF_CIDFontDef_AddWidth(
      fontdef,
      widths,
    );
  }

  late final _HPDF_CIDFontDef_AddWidthPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_FontDef,
              ffi.Pointer<HPDF_CID_Width>)>>('HPDF_CIDFontDef_AddWidth');
  late final _HPDF_CIDFontDef_AddWidth = _HPDF_CIDFontDef_AddWidthPtr
      .asFunction<int Function(HPDF_FontDef, ffi.Pointer<HPDF_CID_Width>)>();

  int HPDF_CIDFontDef_GetCIDWidth(
    HPDF_FontDef fontdef,
    int cid,
  ) {
    return _HPDF_CIDFontDef_GetCIDWidth(
      fontdef,
      cid,
    );
  }

  late final _HPDF_CIDFontDef_GetCIDWidthPtr = _lookup<
          ffi.NativeFunction<HPDF_INT16 Function(HPDF_FontDef, HPDF_UINT16)>>(
      'HPDF_CIDFontDef_GetCIDWidth');
  late final _HPDF_CIDFontDef_GetCIDWidth = _HPDF_CIDFontDef_GetCIDWidthPtr
      .asFunction<int Function(HPDF_FontDef, int)>();

  int HPDF_CIDFontDef_ChangeStyle(
    HPDF_FontDef fontdef,
    int bold,
    int italic,
  ) {
    return _HPDF_CIDFontDef_ChangeStyle(
      fontdef,
      bold,
      italic,
    );
  }

  late final _HPDF_CIDFontDef_ChangeStylePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_FontDef, HPDF_BOOL,
              HPDF_BOOL)>>('HPDF_CIDFontDef_ChangeStyle');
  late final _HPDF_CIDFontDef_ChangeStyle = _HPDF_CIDFontDef_ChangeStylePtr
      .asFunction<int Function(HPDF_FontDef, int, int)>();

  HPDF_Font HPDF_Type1Font_New(
    HPDF_MMgr mmgr,
    HPDF_FontDef fontdef,
    HPDF_Encoder encoder,
    HPDF_Xref xref,
  ) {
    return _HPDF_Type1Font_New(
      mmgr,
      fontdef,
      encoder,
      xref,
    );
  }

  late final _HPDF_Type1Font_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder,
              HPDF_Xref)>>('HPDF_Type1Font_New');
  late final _HPDF_Type1Font_New = _HPDF_Type1Font_NewPtr.asFunction<
      HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder, HPDF_Xref)>();

  HPDF_Font HPDF_TTFont_New(
    HPDF_MMgr mmgr,
    HPDF_FontDef fontdef,
    HPDF_Encoder encoder,
    HPDF_Xref xref,
  ) {
    return _HPDF_TTFont_New(
      mmgr,
      fontdef,
      encoder,
      xref,
    );
  }

  late final _HPDF_TTFont_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder,
              HPDF_Xref)>>('HPDF_TTFont_New');
  late final _HPDF_TTFont_New = _HPDF_TTFont_NewPtr.asFunction<
      HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder, HPDF_Xref)>();

  HPDF_Font HPDF_Type0Font_New(
    HPDF_MMgr mmgr,
    HPDF_FontDef fontdef,
    HPDF_Encoder encoder,
    HPDF_Xref xref,
  ) {
    return _HPDF_Type0Font_New(
      mmgr,
      fontdef,
      encoder,
      xref,
    );
  }

  late final _HPDF_Type0Font_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder,
              HPDF_Xref)>>('HPDF_Type0Font_New');
  late final _HPDF_Type0Font_New = _HPDF_Type0Font_NewPtr.asFunction<
      HPDF_Font Function(HPDF_MMgr, HPDF_FontDef, HPDF_Encoder, HPDF_Xref)>();

  int HPDF_Font_Validate(
    HPDF_Font font,
  ) {
    return _HPDF_Font_Validate(
      font,
    );
  }

  late final _HPDF_Font_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Font)>>(
          'HPDF_Font_Validate');
  late final _HPDF_Font_Validate =
      _HPDF_Font_ValidatePtr.asFunction<int Function(HPDF_Font)>();

  HPDF_GState HPDF_GState_New(
    HPDF_MMgr mmgr,
    HPDF_GState current,
  ) {
    return _HPDF_GState_New(
      mmgr,
      current,
    );
  }

  late final _HPDF_GState_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_GState Function(HPDF_MMgr, HPDF_GState)>>(
          'HPDF_GState_New');
  late final _HPDF_GState_New = _HPDF_GState_NewPtr.asFunction<
      HPDF_GState Function(HPDF_MMgr, HPDF_GState)>();

  HPDF_GState HPDF_GState_Free(
    HPDF_MMgr mmgr,
    HPDF_GState gstate,
  ) {
    return _HPDF_GState_Free(
      mmgr,
      gstate,
    );
  }

  late final _HPDF_GState_FreePtr =
      _lookup<ffi.NativeFunction<HPDF_GState Function(HPDF_MMgr, HPDF_GState)>>(
          'HPDF_GState_Free');
  late final _HPDF_GState_Free = _HPDF_GState_FreePtr.asFunction<
      HPDF_GState Function(HPDF_MMgr, HPDF_GState)>();

  HPDF_Dict HPDF_ExtGState_New(
    HPDF_MMgr mmgr,
    HPDF_Xref xref,
  ) {
    return _HPDF_ExtGState_New(
      mmgr,
      xref,
    );
  }

  late final _HPDF_ExtGState_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Dict Function(HPDF_MMgr, HPDF_Xref)>>(
          'HPDF_ExtGState_New');
  late final _HPDF_ExtGState_New = _HPDF_ExtGState_NewPtr.asFunction<
      HPDF_Dict Function(HPDF_MMgr, HPDF_Xref)>();

  int HPDF_ExtGState_Validate(
    HPDF_ExtGState ext_gstate,
  ) {
    return _HPDF_ExtGState_Validate(
      ext_gstate,
    );
  }

  late final _HPDF_ExtGState_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_ExtGState)>>(
          'HPDF_ExtGState_Validate');
  late final _HPDF_ExtGState_Validate =
      _HPDF_ExtGState_ValidatePtr.asFunction<int Function(HPDF_ExtGState)>();

  HPDF_Pages HPDF_Pages_New(
    HPDF_MMgr mmgr,
    HPDF_Pages parent,
    HPDF_Xref xref,
  ) {
    return _HPDF_Pages_New(
      mmgr,
      parent,
      xref,
    );
  }

  late final _HPDF_Pages_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Pages Function(
              HPDF_MMgr, HPDF_Pages, HPDF_Xref)>>('HPDF_Pages_New');
  late final _HPDF_Pages_New = _HPDF_Pages_NewPtr.asFunction<
      HPDF_Pages Function(HPDF_MMgr, HPDF_Pages, HPDF_Xref)>();

  int HPDF_Pages_Validate(
    HPDF_Pages pages,
  ) {
    return _HPDF_Pages_Validate(
      pages,
    );
  }

  late final _HPDF_Pages_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Pages)>>(
          'HPDF_Pages_Validate');
  late final _HPDF_Pages_Validate =
      _HPDF_Pages_ValidatePtr.asFunction<int Function(HPDF_Pages)>();

  int HPDF_Pages_AddKids(
    HPDF_Pages parent,
    HPDF_Dict kid,
  ) {
    return _HPDF_Pages_AddKids(
      parent,
      kid,
    );
  }

  late final _HPDF_Pages_AddKidsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Pages, HPDF_Dict)>>(
          'HPDF_Pages_AddKids');
  late final _HPDF_Pages_AddKids =
      _HPDF_Pages_AddKidsPtr.asFunction<int Function(HPDF_Pages, HPDF_Dict)>();

  int HPDF_Page_InsertBefore(
    HPDF_Page page,
    HPDF_Page target,
  ) {
    return _HPDF_Page_InsertBefore(
      page,
      target,
    );
  }

  late final _HPDF_Page_InsertBeforePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_Page)>>(
          'HPDF_Page_InsertBefore');
  late final _HPDF_Page_InsertBefore = _HPDF_Page_InsertBeforePtr.asFunction<
      int Function(HPDF_Page, HPDF_Page)>();

  int HPDF_Page_Validate(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Validate(
      page,
    );
  }

  late final _HPDF_Page_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Page)>>(
          'HPDF_Page_Validate');
  late final _HPDF_Page_Validate =
      _HPDF_Page_ValidatePtr.asFunction<int Function(HPDF_Page)>();

  HPDF_Page HPDF_Page_New(
    HPDF_MMgr mmgr,
    HPDF_Xref xref,
  ) {
    return _HPDF_Page_New(
      mmgr,
      xref,
    );
  }

  late final _HPDF_Page_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Page Function(HPDF_MMgr, HPDF_Xref)>>(
          'HPDF_Page_New');
  late final _HPDF_Page_New =
      _HPDF_Page_NewPtr.asFunction<HPDF_Page Function(HPDF_MMgr, HPDF_Xref)>();

  ffi.Pointer<ffi.Void> HPDF_Page_GetInheritableItem(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> key,
    int obj_class,
  ) {
    return _HPDF_Page_GetInheritableItem(
      page,
      key,
      obj_class,
    );
  }

  late final _HPDF_Page_GetInheritableItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(HPDF_Page, ffi.Pointer<ffi.Char>,
              HPDF_UINT16)>>('HPDF_Page_GetInheritableItem');
  late final _HPDF_Page_GetInheritableItem =
      _HPDF_Page_GetInheritableItemPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              HPDF_Page, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> HPDF_Page_GetXObjectName(
    HPDF_Page page,
    HPDF_XObject xobj,
  ) {
    return _HPDF_Page_GetXObjectName(
      page,
      xobj,
    );
  }

  late final _HPDF_Page_GetXObjectNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Page, HPDF_XObject)>>('HPDF_Page_GetXObjectName');
  late final _HPDF_Page_GetXObjectName = _HPDF_Page_GetXObjectNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Page, HPDF_XObject)>();

  ffi.Pointer<ffi.Char> HPDF_Page_GetLocalFontName(
    HPDF_Page page,
    HPDF_Font font,
  ) {
    return _HPDF_Page_GetLocalFontName(
      page,
      font,
    );
  }

  late final _HPDF_Page_GetLocalFontNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Page, HPDF_Font)>>('HPDF_Page_GetLocalFontName');
  late final _HPDF_Page_GetLocalFontName = _HPDF_Page_GetLocalFontNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Page, HPDF_Font)>();

  ffi.Pointer<ffi.Char> HPDF_Page_GetExtGStateName(
    HPDF_Page page,
    HPDF_ExtGState gstate,
  ) {
    return _HPDF_Page_GetExtGStateName(
      page,
      gstate,
    );
  }

  late final _HPDF_Page_GetExtGStateNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Page, HPDF_ExtGState)>>('HPDF_Page_GetExtGStateName');
  late final _HPDF_Page_GetExtGStateName = _HPDF_Page_GetExtGStateNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Page, HPDF_ExtGState)>();

  ffi.Pointer<ffi.Char> HPDF_Page_GetShadingName(
    HPDF_Page page,
    HPDF_Shading shading,
  ) {
    return _HPDF_Page_GetShadingName(
      page,
      shading,
    );
  }

  late final _HPDF_Page_GetShadingNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Page, HPDF_Shading)>>('HPDF_Page_GetShadingName');
  late final _HPDF_Page_GetShadingName = _HPDF_Page_GetShadingNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Page, HPDF_Shading)>();

  HPDF_Box HPDF_Page_GetMediaBox(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetMediaBox(
      page,
    );
  }

  late final _HPDF_Page_GetMediaBoxPtr =
      _lookup<ffi.NativeFunction<HPDF_Box Function(HPDF_Page)>>(
          'HPDF_Page_GetMediaBox');
  late final _HPDF_Page_GetMediaBox =
      _HPDF_Page_GetMediaBoxPtr.asFunction<HPDF_Box Function(HPDF_Page)>();

  int HPDF_Page_SetBoxValue(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> name,
    int index,
    double value,
  ) {
    return _HPDF_Page_SetBoxValue(
      page,
      name,
      index,
      value,
    );
  }

  late final _HPDF_Page_SetBoxValuePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, ffi.Pointer<ffi.Char>, HPDF_UINT,
              HPDF_REAL)>>('HPDF_Page_SetBoxValue');
  late final _HPDF_Page_SetBoxValue = _HPDF_Page_SetBoxValuePtr.asFunction<
      int Function(HPDF_Page, ffi.Pointer<ffi.Char>, int, double)>();

  void HPDF_Page_SetFilter(
    HPDF_Page page,
    int filter,
  ) {
    return _HPDF_Page_SetFilter(
      page,
      filter,
    );
  }

  late final _HPDF_Page_SetFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Page, HPDF_UINT)>>(
          'HPDF_Page_SetFilter');
  late final _HPDF_Page_SetFilter =
      _HPDF_Page_SetFilterPtr.asFunction<void Function(HPDF_Page, int)>();

  int HPDF_Page_CheckState(
    HPDF_Page page,
    int mode,
  ) {
    return _HPDF_Page_CheckState(
      page,
      mode,
    );
  }

  late final _HPDF_Page_CheckStatePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_UINT)>>(
          'HPDF_Page_CheckState');
  late final _HPDF_Page_CheckState =
      _HPDF_Page_CheckStatePtr.asFunction<int Function(HPDF_Page, int)>();

  HPDF_Outline HPDF_OutlineRoot_New(
    HPDF_MMgr mmgr,
    HPDF_Xref xref,
  ) {
    return _HPDF_OutlineRoot_New(
      mmgr,
      xref,
    );
  }

  late final _HPDF_OutlineRoot_NewPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_MMgr, HPDF_Xref)>>(
          'HPDF_OutlineRoot_New');
  late final _HPDF_OutlineRoot_New = _HPDF_OutlineRoot_NewPtr.asFunction<
      HPDF_Outline Function(HPDF_MMgr, HPDF_Xref)>();

  HPDF_Outline HPDF_Outline_New(
    HPDF_MMgr mmgr,
    HPDF_Outline parent,
    ffi.Pointer<ffi.Char> title,
    HPDF_Encoder encoder,
    HPDF_Xref xref,
  ) {
    return _HPDF_Outline_New(
      mmgr,
      parent,
      title,
      encoder,
      xref,
    );
  }

  late final _HPDF_Outline_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Outline Function(HPDF_MMgr, HPDF_Outline, ffi.Pointer<ffi.Char>,
              HPDF_Encoder, HPDF_Xref)>>('HPDF_Outline_New');
  late final _HPDF_Outline_New = _HPDF_Outline_NewPtr.asFunction<
      HPDF_Outline Function(HPDF_MMgr, HPDF_Outline, ffi.Pointer<ffi.Char>,
          HPDF_Encoder, HPDF_Xref)>();

  HPDF_Outline HPDF_Outline_GetFirst(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetFirst(
      outline,
    );
  }

  late final _HPDF_Outline_GetFirstPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_Outline)>>(
          'HPDF_Outline_GetFirst');
  late final _HPDF_Outline_GetFirst = _HPDF_Outline_GetFirstPtr.asFunction<
      HPDF_Outline Function(HPDF_Outline)>();

  HPDF_Outline HPDF_Outline_GetLast(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetLast(
      outline,
    );
  }

  late final _HPDF_Outline_GetLastPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_Outline)>>(
          'HPDF_Outline_GetLast');
  late final _HPDF_Outline_GetLast = _HPDF_Outline_GetLastPtr.asFunction<
      HPDF_Outline Function(HPDF_Outline)>();

  HPDF_Outline HPDF_Outline_GetPrev(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetPrev(
      outline,
    );
  }

  late final _HPDF_Outline_GetPrevPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_Outline)>>(
          'HPDF_Outline_GetPrev');
  late final _HPDF_Outline_GetPrev = _HPDF_Outline_GetPrevPtr.asFunction<
      HPDF_Outline Function(HPDF_Outline)>();

  HPDF_Outline HPDF_Outline_GetNext(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetNext(
      outline,
    );
  }

  late final _HPDF_Outline_GetNextPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_Outline)>>(
          'HPDF_Outline_GetNext');
  late final _HPDF_Outline_GetNext = _HPDF_Outline_GetNextPtr.asFunction<
      HPDF_Outline Function(HPDF_Outline)>();

  HPDF_Outline HPDF_Outline_GetParent(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetParent(
      outline,
    );
  }

  late final _HPDF_Outline_GetParentPtr =
      _lookup<ffi.NativeFunction<HPDF_Outline Function(HPDF_Outline)>>(
          'HPDF_Outline_GetParent');
  late final _HPDF_Outline_GetParent = _HPDF_Outline_GetParentPtr.asFunction<
      HPDF_Outline Function(HPDF_Outline)>();

  int HPDF_Outline_GetOpened(
    HPDF_Outline outline,
  ) {
    return _HPDF_Outline_GetOpened(
      outline,
    );
  }

  late final _HPDF_Outline_GetOpenedPtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Outline)>>(
          'HPDF_Outline_GetOpened');
  late final _HPDF_Outline_GetOpened =
      _HPDF_Outline_GetOpenedPtr.asFunction<int Function(HPDF_Outline)>();

  int HPDF_Outline_Validate(
    HPDF_Outline obj,
  ) {
    return _HPDF_Outline_Validate(
      obj,
    );
  }

  late final _HPDF_Outline_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Outline)>>(
          'HPDF_Outline_Validate');
  late final _HPDF_Outline_Validate =
      _HPDF_Outline_ValidatePtr.asFunction<int Function(HPDF_Outline)>();

  HPDF_Encoder HPDF_Doc_FindEncoder(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_Doc_FindEncoder(
      pdf,
      encoding_name,
    );
  }

  late final _HPDF_Doc_FindEncoderPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Encoder Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_Doc_FindEncoder');
  late final _HPDF_Doc_FindEncoder = _HPDF_Doc_FindEncoderPtr.asFunction<
      HPDF_Encoder Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_FontDef HPDF_Doc_FindFontDef(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> font_name,
  ) {
    return _HPDF_Doc_FindFontDef(
      pdf,
      font_name,
    );
  }

  late final _HPDF_Doc_FindFontDefPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_Doc_FindFontDef');
  late final _HPDF_Doc_FindFontDef = _HPDF_Doc_FindFontDefPtr.asFunction<
      HPDF_FontDef Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Font HPDF_Doc_FindFont(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> font_name,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_Doc_FindFont(
      pdf,
      font_name,
      encoding_name,
    );
  }

  late final _HPDF_Doc_FindFontPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Font Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('HPDF_Doc_FindFont');
  late final _HPDF_Doc_FindFont = _HPDF_Doc_FindFontPtr.asFunction<
      HPDF_Font Function(
          HPDF_Doc, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int HPDF_Doc_Validate(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Doc_Validate(
      pdf,
    );
  }

  late final _HPDF_Doc_ValidatePtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Doc)>>(
          'HPDF_Doc_Validate');
  late final _HPDF_Doc_Validate =
      _HPDF_Doc_ValidatePtr.asFunction<int Function(HPDF_Doc)>();

  HPDF_Pages HPDF_Doc_GetCurrentPages(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Doc_GetCurrentPages(
      pdf,
    );
  }

  late final _HPDF_Doc_GetCurrentPagesPtr =
      _lookup<ffi.NativeFunction<HPDF_Pages Function(HPDF_Doc)>>(
          'HPDF_Doc_GetCurrentPages');
  late final _HPDF_Doc_GetCurrentPages =
      _HPDF_Doc_GetCurrentPagesPtr.asFunction<HPDF_Pages Function(HPDF_Doc)>();

  HPDF_Pages HPDF_Doc_AddPagesTo(
    HPDF_Doc pdf,
    HPDF_Pages parent,
  ) {
    return _HPDF_Doc_AddPagesTo(
      pdf,
      parent,
    );
  }

  late final _HPDF_Doc_AddPagesToPtr =
      _lookup<ffi.NativeFunction<HPDF_Pages Function(HPDF_Doc, HPDF_Pages)>>(
          'HPDF_Doc_AddPagesTo');
  late final _HPDF_Doc_AddPagesTo = _HPDF_Doc_AddPagesToPtr.asFunction<
      HPDF_Pages Function(HPDF_Doc, HPDF_Pages)>();

  int HPDF_Doc_SetCurrentPages(
    HPDF_Doc pdf,
    HPDF_Pages pages,
  ) {
    return _HPDF_Doc_SetCurrentPages(
      pdf,
      pages,
    );
  }

  late final _HPDF_Doc_SetCurrentPagesPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_Pages)>>(
          'HPDF_Doc_SetCurrentPages');
  late final _HPDF_Doc_SetCurrentPages = _HPDF_Doc_SetCurrentPagesPtr
      .asFunction<int Function(HPDF_Doc, HPDF_Pages)>();

  int HPDF_Doc_SetCurrentPage(
    HPDF_Doc pdf,
    HPDF_Page page,
  ) {
    return _HPDF_Doc_SetCurrentPage(
      pdf,
      page,
    );
  }

  late final _HPDF_Doc_SetCurrentPagePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_Page)>>(
          'HPDF_Doc_SetCurrentPage');
  late final _HPDF_Doc_SetCurrentPage = _HPDF_Doc_SetCurrentPagePtr.asFunction<
      int Function(HPDF_Doc, HPDF_Page)>();

  HPDF_FontDef HPDF_GetFontDef(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> font_name,
  ) {
    return _HPDF_GetFontDef(
      pdf,
      font_name,
    );
  }

  late final _HPDF_GetFontDefPtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_GetFontDef');
  late final _HPDF_GetFontDef = _HPDF_GetFontDefPtr.asFunction<
      HPDF_FontDef Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  int HPDF_Doc_RegisterFontDef(
    HPDF_Doc pdf,
    HPDF_FontDef fontdef,
  ) {
    return _HPDF_Doc_RegisterFontDef(
      pdf,
      fontdef,
    );
  }

  late final _HPDF_Doc_RegisterFontDefPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_FontDef)>>(
          'HPDF_Doc_RegisterFontDef');
  late final _HPDF_Doc_RegisterFontDef = _HPDF_Doc_RegisterFontDefPtr
      .asFunction<int Function(HPDF_Doc, HPDF_FontDef)>();

  int HPDF_Doc_RegisterEncoder(
    HPDF_Doc pdf,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Doc_RegisterEncoder(
      pdf,
      encoder,
    );
  }

  late final _HPDF_Doc_RegisterEncoderPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_Encoder)>>(
          'HPDF_Doc_RegisterEncoder');
  late final _HPDF_Doc_RegisterEncoder = _HPDF_Doc_RegisterEncoderPtr
      .asFunction<int Function(HPDF_Doc, HPDF_Encoder)>();

  int HPDF_Doc_SetEncryptOn(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Doc_SetEncryptOn(
      pdf,
    );
  }

  late final _HPDF_Doc_SetEncryptOnPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_Doc_SetEncryptOn');
  late final _HPDF_Doc_SetEncryptOn =
      _HPDF_Doc_SetEncryptOnPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_Doc_SetEncryptOff(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Doc_SetEncryptOff(
      pdf,
    );
  }

  late final _HPDF_Doc_SetEncryptOffPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_Doc_SetEncryptOff');
  late final _HPDF_Doc_SetEncryptOff =
      _HPDF_Doc_SetEncryptOffPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_Doc_PrepareEncryption(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Doc_PrepareEncryption(
      pdf,
    );
  }

  late final _HPDF_Doc_PrepareEncryptionPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_Doc_PrepareEncryption');
  late final _HPDF_Doc_PrepareEncryption =
      _HPDF_Doc_PrepareEncryptionPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_PDFA_AppendOutputIntents(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> iccname,
    HPDF_Dict iccdict,
  ) {
    return _HPDF_PDFA_AppendOutputIntents(
      pdf,
      iccname,
      iccdict,
    );
  }

  late final _HPDF_PDFA_AppendOutputIntentsPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              HPDF_Dict)>>('HPDF_PDFA_AppendOutputIntents');
  late final _HPDF_PDFA_AppendOutputIntents = _HPDF_PDFA_AppendOutputIntentsPtr
      .asFunction<int Function(HPDF_Doc, ffi.Pointer<ffi.Char>, HPDF_Dict)>();

  int HPDF_PDFA_SetPDFAConformance(
    HPDF_Doc pdf,
    int pdfatype,
  ) {
    return _HPDF_PDFA_SetPDFAConformance(
      pdf,
      pdfatype,
    );
  }

  late final _HPDF_PDFA_SetPDFAConformancePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, ffi.Int32)>>(
          'HPDF_PDFA_SetPDFAConformance');
  late final _HPDF_PDFA_SetPDFAConformance = _HPDF_PDFA_SetPDFAConformancePtr
      .asFunction<int Function(HPDF_Doc, int)>();

  int HPDF_PDFA_GenerateID(
    HPDF_Doc arg0,
  ) {
    return _HPDF_PDFA_GenerateID(
      arg0,
    );
  }

  late final _HPDF_PDFA_GenerateIDPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_PDFA_GenerateID');
  late final _HPDF_PDFA_GenerateID =
      _HPDF_PDFA_GenerateIDPtr.asFunction<int Function(HPDF_Doc)>();

  ffi.Pointer<ffi.Char> HPDF_GetVersion() {
    return _HPDF_GetVersion();
  }

  late final _HPDF_GetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'HPDF_GetVersion');
  late final _HPDF_GetVersion =
      _HPDF_GetVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  HPDF_Doc HPDF_NewEx(
    HPDF_Error_Handler user_error_fn,
    HPDF_Alloc_Func user_alloc_fn,
    HPDF_Free_Func user_free_fn,
    int mem_pool_buf_size,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _HPDF_NewEx(
      user_error_fn,
      user_alloc_fn,
      user_free_fn,
      mem_pool_buf_size,
      user_data,
    );
  }

  late final _HPDF_NewExPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Doc Function(HPDF_Error_Handler, HPDF_Alloc_Func, HPDF_Free_Func,
              HPDF_UINT, ffi.Pointer<ffi.Void>)>>('HPDF_NewEx');
  late final _HPDF_NewEx = _HPDF_NewExPtr.asFunction<
      HPDF_Doc Function(HPDF_Error_Handler, HPDF_Alloc_Func, HPDF_Free_Func,
          int, ffi.Pointer<ffi.Void>)>();

  HPDF_Doc HPDF_New(
    HPDF_Error_Handler user_error_fn,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _HPDF_New(
      user_error_fn,
      user_data,
    );
  }

  late final _HPDF_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Doc Function(
              HPDF_Error_Handler, ffi.Pointer<ffi.Void>)>>('HPDF_New');
  late final _HPDF_New = _HPDF_NewPtr.asFunction<
      HPDF_Doc Function(HPDF_Error_Handler, ffi.Pointer<ffi.Void>)>();

  int HPDF_SetErrorHandler(
    HPDF_Doc pdf,
    HPDF_Error_Handler user_error_fn,
  ) {
    return _HPDF_SetErrorHandler(
      pdf,
      user_error_fn,
    );
  }

  late final _HPDF_SetErrorHandlerPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, HPDF_Error_Handler)>>('HPDF_SetErrorHandler');
  late final _HPDF_SetErrorHandler = _HPDF_SetErrorHandlerPtr.asFunction<
      int Function(HPDF_Doc, HPDF_Error_Handler)>();

  void HPDF_Free(
    HPDF_Doc pdf,
  ) {
    return _HPDF_Free(
      pdf,
    );
  }

  late final _HPDF_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Doc)>>('HPDF_Free');
  late final _HPDF_Free = _HPDF_FreePtr.asFunction<void Function(HPDF_Doc)>();

  HPDF_MMgr HPDF_GetDocMMgr(
    HPDF_Doc doc,
  ) {
    return _HPDF_GetDocMMgr(
      doc,
    );
  }

  late final _HPDF_GetDocMMgrPtr =
      _lookup<ffi.NativeFunction<HPDF_MMgr Function(HPDF_Doc)>>(
          'HPDF_GetDocMMgr');
  late final _HPDF_GetDocMMgr =
      _HPDF_GetDocMMgrPtr.asFunction<HPDF_MMgr Function(HPDF_Doc)>();

  int HPDF_NewDoc(
    HPDF_Doc pdf,
  ) {
    return _HPDF_NewDoc(
      pdf,
    );
  }

  late final _HPDF_NewDocPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_NewDoc');
  late final _HPDF_NewDoc =
      _HPDF_NewDocPtr.asFunction<int Function(HPDF_Doc)>();

  void HPDF_FreeDoc(
    HPDF_Doc pdf,
  ) {
    return _HPDF_FreeDoc(
      pdf,
    );
  }

  late final _HPDF_FreeDocPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Doc)>>('HPDF_FreeDoc');
  late final _HPDF_FreeDoc =
      _HPDF_FreeDocPtr.asFunction<void Function(HPDF_Doc)>();

  int HPDF_HasDoc(
    HPDF_Doc pdf,
  ) {
    return _HPDF_HasDoc(
      pdf,
    );
  }

  late final _HPDF_HasDocPtr =
      _lookup<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Doc)>>('HPDF_HasDoc');
  late final _HPDF_HasDoc =
      _HPDF_HasDocPtr.asFunction<int Function(HPDF_Doc)>();

  void HPDF_FreeDocAll(
    HPDF_Doc pdf,
  ) {
    return _HPDF_FreeDocAll(
      pdf,
    );
  }

  late final _HPDF_FreeDocAllPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Doc)>>(
          'HPDF_FreeDocAll');
  late final _HPDF_FreeDocAll =
      _HPDF_FreeDocAllPtr.asFunction<void Function(HPDF_Doc)>();

  int HPDF_SaveToStream(
    HPDF_Doc pdf,
  ) {
    return _HPDF_SaveToStream(
      pdf,
    );
  }

  late final _HPDF_SaveToStreamPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_SaveToStream');
  late final _HPDF_SaveToStream =
      _HPDF_SaveToStreamPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_GetContents(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buf,
    ffi.Pointer<HPDF_UINT32> size,
  ) {
    return _HPDF_GetContents(
      pdf,
      buf,
      size,
    );
  }

  late final _HPDF_GetContentsPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>,
              ffi.Pointer<HPDF_UINT32>)>>('HPDF_GetContents');
  late final _HPDF_GetContents = _HPDF_GetContentsPtr.asFunction<
      int Function(
          HPDF_Doc, ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_UINT32>)>();

  int HPDF_GetStreamSize(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetStreamSize(
      pdf,
    );
  }

  late final _HPDF_GetStreamSizePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT32 Function(HPDF_Doc)>>(
          'HPDF_GetStreamSize');
  late final _HPDF_GetStreamSize =
      _HPDF_GetStreamSizePtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_ReadFromStream(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buf,
    ffi.Pointer<HPDF_UINT32> size,
  ) {
    return _HPDF_ReadFromStream(
      pdf,
      buf,
      size,
    );
  }

  late final _HPDF_ReadFromStreamPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>,
              ffi.Pointer<HPDF_UINT32>)>>('HPDF_ReadFromStream');
  late final _HPDF_ReadFromStream = _HPDF_ReadFromStreamPtr.asFunction<
      int Function(
          HPDF_Doc, ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_UINT32>)>();

  int HPDF_ResetStream(
    HPDF_Doc pdf,
  ) {
    return _HPDF_ResetStream(
      pdf,
    );
  }

  late final _HPDF_ResetStreamPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_ResetStream');
  late final _HPDF_ResetStream =
      _HPDF_ResetStreamPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_SaveToFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _HPDF_SaveToFile(
      pdf,
      file_name,
    );
  }

  late final _HPDF_SaveToFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_SaveToFile');
  late final _HPDF_SaveToFile = _HPDF_SaveToFilePtr.asFunction<
      int Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  int HPDF_GetError(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetError(
      pdf,
    );
  }

  late final _HPDF_GetErrorPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_GetError');
  late final _HPDF_GetError =
      _HPDF_GetErrorPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_GetErrorDetail(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetErrorDetail(
      pdf,
    );
  }

  late final _HPDF_GetErrorDetailPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_GetErrorDetail');
  late final _HPDF_GetErrorDetail =
      _HPDF_GetErrorDetailPtr.asFunction<int Function(HPDF_Doc)>();

  void HPDF_ResetError(
    HPDF_Doc pdf,
  ) {
    return _HPDF_ResetError(
      pdf,
    );
  }

  late final _HPDF_ResetErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPDF_Doc)>>(
          'HPDF_ResetError');
  late final _HPDF_ResetError =
      _HPDF_ResetErrorPtr.asFunction<void Function(HPDF_Doc)>();

  int HPDF_CheckError(
    HPDF_Error error,
  ) {
    return _HPDF_CheckError(
      error,
    );
  }

  late final _HPDF_CheckErrorPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Error)>>(
          'HPDF_CheckError');
  late final _HPDF_CheckError =
      _HPDF_CheckErrorPtr.asFunction<int Function(HPDF_Error)>();

  int HPDF_SetPagesConfiguration(
    HPDF_Doc pdf,
    int page_per_pages,
  ) {
    return _HPDF_SetPagesConfiguration(
      pdf,
      page_per_pages,
    );
  }

  late final _HPDF_SetPagesConfigurationPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_UINT)>>(
          'HPDF_SetPagesConfiguration');
  late final _HPDF_SetPagesConfiguration =
      _HPDF_SetPagesConfigurationPtr.asFunction<int Function(HPDF_Doc, int)>();

  HPDF_Page HPDF_GetPageByIndex(
    HPDF_Doc pdf,
    int index,
  ) {
    return _HPDF_GetPageByIndex(
      pdf,
      index,
    );
  }

  late final _HPDF_GetPageByIndexPtr =
      _lookup<ffi.NativeFunction<HPDF_Page Function(HPDF_Doc, HPDF_UINT)>>(
          'HPDF_GetPageByIndex');
  late final _HPDF_GetPageByIndex =
      _HPDF_GetPageByIndexPtr.asFunction<HPDF_Page Function(HPDF_Doc, int)>();

  HPDF_MMgr HPDF_GetPageMMgr(
    HPDF_Page page,
  ) {
    return _HPDF_GetPageMMgr(
      page,
    );
  }

  late final _HPDF_GetPageMMgrPtr =
      _lookup<ffi.NativeFunction<HPDF_MMgr Function(HPDF_Page)>>(
          'HPDF_GetPageMMgr');
  late final _HPDF_GetPageMMgr =
      _HPDF_GetPageMMgrPtr.asFunction<HPDF_MMgr Function(HPDF_Page)>();

  int HPDF_GetPageLayout(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetPageLayout(
      pdf,
    );
  }

  late final _HPDF_GetPageLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Doc)>>(
          'HPDF_GetPageLayout');
  late final _HPDF_GetPageLayout =
      _HPDF_GetPageLayoutPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_SetPageLayout(
    HPDF_Doc pdf,
    int layout,
  ) {
    return _HPDF_SetPageLayout(
      pdf,
      layout,
    );
  }

  late final _HPDF_SetPageLayoutPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, ffi.Int32)>>(
          'HPDF_SetPageLayout');
  late final _HPDF_SetPageLayout =
      _HPDF_SetPageLayoutPtr.asFunction<int Function(HPDF_Doc, int)>();

  int HPDF_GetPageMode(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetPageMode(
      pdf,
    );
  }

  late final _HPDF_GetPageModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Doc)>>(
          'HPDF_GetPageMode');
  late final _HPDF_GetPageMode =
      _HPDF_GetPageModePtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_SetPageMode(
    HPDF_Doc pdf,
    int mode,
  ) {
    return _HPDF_SetPageMode(
      pdf,
      mode,
    );
  }

  late final _HPDF_SetPageModePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, ffi.Int32)>>(
          'HPDF_SetPageMode');
  late final _HPDF_SetPageMode =
      _HPDF_SetPageModePtr.asFunction<int Function(HPDF_Doc, int)>();

  int HPDF_GetViewerPreference(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetViewerPreference(
      pdf,
    );
  }

  late final _HPDF_GetViewerPreferencePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Doc)>>(
          'HPDF_GetViewerPreference');
  late final _HPDF_GetViewerPreference =
      _HPDF_GetViewerPreferencePtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_SetViewerPreference(
    HPDF_Doc pdf,
    int value,
  ) {
    return _HPDF_SetViewerPreference(
      pdf,
      value,
    );
  }

  late final _HPDF_SetViewerPreferencePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_UINT)>>(
          'HPDF_SetViewerPreference');
  late final _HPDF_SetViewerPreference =
      _HPDF_SetViewerPreferencePtr.asFunction<int Function(HPDF_Doc, int)>();

  int HPDF_SetOpenAction(
    HPDF_Doc pdf,
    HPDF_Destination open_action,
  ) {
    return _HPDF_SetOpenAction(
      pdf,
      open_action,
    );
  }

  late final _HPDF_SetOpenActionPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_Destination)>>(
      'HPDF_SetOpenAction');
  late final _HPDF_SetOpenAction = _HPDF_SetOpenActionPtr.asFunction<
      int Function(HPDF_Doc, HPDF_Destination)>();

  HPDF_Page HPDF_GetCurrentPage(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetCurrentPage(
      pdf,
    );
  }

  late final _HPDF_GetCurrentPagePtr =
      _lookup<ffi.NativeFunction<HPDF_Page Function(HPDF_Doc)>>(
          'HPDF_GetCurrentPage');
  late final _HPDF_GetCurrentPage =
      _HPDF_GetCurrentPagePtr.asFunction<HPDF_Page Function(HPDF_Doc)>();

  HPDF_Page HPDF_AddPage(
    HPDF_Doc pdf,
  ) {
    return _HPDF_AddPage(
      pdf,
    );
  }

  late final _HPDF_AddPagePtr =
      _lookup<ffi.NativeFunction<HPDF_Page Function(HPDF_Doc)>>('HPDF_AddPage');
  late final _HPDF_AddPage =
      _HPDF_AddPagePtr.asFunction<HPDF_Page Function(HPDF_Doc)>();

  HPDF_Page HPDF_InsertPage(
    HPDF_Doc pdf,
    HPDF_Page page,
  ) {
    return _HPDF_InsertPage(
      pdf,
      page,
    );
  }

  late final _HPDF_InsertPagePtr =
      _lookup<ffi.NativeFunction<HPDF_Page Function(HPDF_Doc, HPDF_Page)>>(
          'HPDF_InsertPage');
  late final _HPDF_InsertPage =
      _HPDF_InsertPagePtr.asFunction<HPDF_Page Function(HPDF_Doc, HPDF_Page)>();

  int HPDF_Page_SetWidth(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetWidth(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetWidth');
  late final _HPDF_Page_SetWidth =
      _HPDF_Page_SetWidthPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetHeight(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetHeight(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetHeightPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetHeight');
  late final _HPDF_Page_SetHeight =
      _HPDF_Page_SetHeightPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetSize(
    HPDF_Page page,
    int size,
    int direction,
  ) {
    return _HPDF_Page_SetSize(
      page,
      size,
      direction,
    );
  }

  late final _HPDF_Page_SetSizePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, ffi.Int32, ffi.Int32)>>('HPDF_Page_SetSize');
  late final _HPDF_Page_SetSize =
      _HPDF_Page_SetSizePtr.asFunction<int Function(HPDF_Page, int, int)>();

  int HPDF_Page_SetRotate(
    HPDF_Page page,
    int angle,
  ) {
    return _HPDF_Page_SetRotate(
      page,
      angle,
    );
  }

  late final _HPDF_Page_SetRotatePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_UINT16)>>(
          'HPDF_Page_SetRotate');
  late final _HPDF_Page_SetRotate =
      _HPDF_Page_SetRotatePtr.asFunction<int Function(HPDF_Page, int)>();

  int HPDF_Page_SetZoom(
    HPDF_Page page,
    double zoom,
  ) {
    return _HPDF_Page_SetZoom(
      page,
      zoom,
    );
  }

  late final _HPDF_Page_SetZoomPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetZoom');
  late final _HPDF_Page_SetZoom =
      _HPDF_Page_SetZoomPtr.asFunction<int Function(HPDF_Page, double)>();

  HPDF_Font HPDF_GetFont(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> font_name,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_GetFont(
      pdf,
      font_name,
      encoding_name,
    );
  }

  late final _HPDF_GetFontPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Font Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('HPDF_GetFont');
  late final _HPDF_GetFont = _HPDF_GetFontPtr.asFunction<
      HPDF_Font Function(
          HPDF_Doc, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> HPDF_LoadType1FontFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> afm_file_name,
    ffi.Pointer<ffi.Char> data_file_name,
  ) {
    return _HPDF_LoadType1FontFromFile(
      pdf,
      afm_file_name,
      data_file_name,
    );
  }

  late final _HPDF_LoadType1FontFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('HPDF_LoadType1FontFromFile');
  late final _HPDF_LoadType1FontFromFile =
      _HPDF_LoadType1FontFromFilePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  HPDF_FontDef HPDF_GetTTFontDefFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> file_name,
    int embedding,
  ) {
    return _HPDF_GetTTFontDefFromFile(
      pdf,
      file_name,
      embedding,
    );
  }

  late final _HPDF_GetTTFontDefFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_FontDef Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              HPDF_BOOL)>>('HPDF_GetTTFontDefFromFile');
  late final _HPDF_GetTTFontDefFromFile =
      _HPDF_GetTTFontDefFromFilePtr.asFunction<
          HPDF_FontDef Function(HPDF_Doc, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> HPDF_LoadTTFontFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> file_name,
    int embedding,
  ) {
    return _HPDF_LoadTTFontFromFile(
      pdf,
      file_name,
      embedding,
    );
  }

  late final _HPDF_LoadTTFontFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              HPDF_BOOL)>>('HPDF_LoadTTFontFromFile');
  late final _HPDF_LoadTTFontFromFile = _HPDF_LoadTTFontFromFilePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(HPDF_Doc, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> HPDF_LoadTTFontFromFile2(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> file_name,
    int index,
    int embedding,
  ) {
    return _HPDF_LoadTTFontFromFile2(
      pdf,
      file_name,
      index,
      embedding,
    );
  }

  late final _HPDF_LoadTTFontFromFile2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              HPDF_UINT, HPDF_BOOL)>>('HPDF_LoadTTFontFromFile2');
  late final _HPDF_LoadTTFontFromFile2 =
      _HPDF_LoadTTFontFromFile2Ptr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>, int, int)>();

  int HPDF_AddPageLabel(
    HPDF_Doc pdf,
    int page_num,
    int style,
    int first_page,
    ffi.Pointer<ffi.Char> prefix,
  ) {
    return _HPDF_AddPageLabel(
      pdf,
      page_num,
      style,
      first_page,
      prefix,
    );
  }

  late final _HPDF_AddPageLabelPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Doc, HPDF_UINT, ffi.Int32, HPDF_UINT,
              ffi.Pointer<ffi.Char>)>>('HPDF_AddPageLabel');
  late final _HPDF_AddPageLabel = _HPDF_AddPageLabelPtr.asFunction<
      int Function(HPDF_Doc, int, int, int, ffi.Pointer<ffi.Char>)>();

  int HPDF_UseJPFonts(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseJPFonts(
      pdf,
    );
  }

  late final _HPDF_UseJPFontsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseJPFonts');
  late final _HPDF_UseJPFonts =
      _HPDF_UseJPFontsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseKRFonts(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseKRFonts(
      pdf,
    );
  }

  late final _HPDF_UseKRFontsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseKRFonts');
  late final _HPDF_UseKRFonts =
      _HPDF_UseKRFontsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseCNSFonts(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseCNSFonts(
      pdf,
    );
  }

  late final _HPDF_UseCNSFontsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseCNSFonts');
  late final _HPDF_UseCNSFonts =
      _HPDF_UseCNSFontsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseCNTFonts(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseCNTFonts(
      pdf,
    );
  }

  late final _HPDF_UseCNTFontsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseCNTFonts');
  late final _HPDF_UseCNTFonts =
      _HPDF_UseCNTFontsPtr.asFunction<int Function(HPDF_Doc)>();

  HPDF_Outline HPDF_CreateOutline(
    HPDF_Doc pdf,
    HPDF_Outline parent,
    ffi.Pointer<ffi.Char> title,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_CreateOutline(
      pdf,
      parent,
      title,
      encoder,
    );
  }

  late final _HPDF_CreateOutlinePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Outline Function(HPDF_Doc, HPDF_Outline, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_CreateOutline');
  late final _HPDF_CreateOutline = _HPDF_CreateOutlinePtr.asFunction<
      HPDF_Outline Function(
          HPDF_Doc, HPDF_Outline, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  int HPDF_Outline_SetOpened(
    HPDF_Outline outline,
    int opened,
  ) {
    return _HPDF_Outline_SetOpened(
      outline,
      opened,
    );
  }

  late final _HPDF_Outline_SetOpenedPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Outline, HPDF_BOOL)>>(
      'HPDF_Outline_SetOpened');
  late final _HPDF_Outline_SetOpened =
      _HPDF_Outline_SetOpenedPtr.asFunction<int Function(HPDF_Outline, int)>();

  int HPDF_Outline_SetDestination(
    HPDF_Outline outline,
    HPDF_Destination dst,
  ) {
    return _HPDF_Outline_SetDestination(
      outline,
      dst,
    );
  }

  late final _HPDF_Outline_SetDestinationPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Outline, HPDF_Destination)>>('HPDF_Outline_SetDestination');
  late final _HPDF_Outline_SetDestination = _HPDF_Outline_SetDestinationPtr
      .asFunction<int Function(HPDF_Outline, HPDF_Destination)>();

  HPDF_Destination HPDF_Page_CreateDestination(
    HPDF_Page page,
  ) {
    return _HPDF_Page_CreateDestination(
      page,
    );
  }

  late final _HPDF_Page_CreateDestinationPtr =
      _lookup<ffi.NativeFunction<HPDF_Destination Function(HPDF_Page)>>(
          'HPDF_Page_CreateDestination');
  late final _HPDF_Page_CreateDestination = _HPDF_Page_CreateDestinationPtr
      .asFunction<HPDF_Destination Function(HPDF_Page)>();

  int HPDF_Destination_SetXYZ(
    HPDF_Destination dst,
    double left,
    double top,
    double zoom,
  ) {
    return _HPDF_Destination_SetXYZ(
      dst,
      left,
      top,
      zoom,
    );
  }

  late final _HPDF_Destination_SetXYZPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Destination, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Destination_SetXYZ');
  late final _HPDF_Destination_SetXYZ = _HPDF_Destination_SetXYZPtr.asFunction<
      int Function(HPDF_Destination, double, double, double)>();

  int HPDF_Destination_SetFit(
    HPDF_Destination dst,
  ) {
    return _HPDF_Destination_SetFit(
      dst,
    );
  }

  late final _HPDF_Destination_SetFitPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Destination)>>(
          'HPDF_Destination_SetFit');
  late final _HPDF_Destination_SetFit =
      _HPDF_Destination_SetFitPtr.asFunction<int Function(HPDF_Destination)>();

  int HPDF_Destination_SetFitH(
    HPDF_Destination dst,
    double top,
  ) {
    return _HPDF_Destination_SetFitH(
      dst,
      top,
    );
  }

  late final _HPDF_Destination_SetFitHPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Destination, HPDF_REAL)>>('HPDF_Destination_SetFitH');
  late final _HPDF_Destination_SetFitH = _HPDF_Destination_SetFitHPtr
      .asFunction<int Function(HPDF_Destination, double)>();

  int HPDF_Destination_SetFitV(
    HPDF_Destination dst,
    double left,
  ) {
    return _HPDF_Destination_SetFitV(
      dst,
      left,
    );
  }

  late final _HPDF_Destination_SetFitVPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Destination, HPDF_REAL)>>('HPDF_Destination_SetFitV');
  late final _HPDF_Destination_SetFitV = _HPDF_Destination_SetFitVPtr
      .asFunction<int Function(HPDF_Destination, double)>();

  int HPDF_Destination_SetFitR(
    HPDF_Destination dst,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    return _HPDF_Destination_SetFitR(
      dst,
      left,
      bottom,
      right,
      top,
    );
  }

  late final _HPDF_Destination_SetFitRPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Destination, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL)>>('HPDF_Destination_SetFitR');
  late final _HPDF_Destination_SetFitR =
      _HPDF_Destination_SetFitRPtr.asFunction<
          int Function(HPDF_Destination, double, double, double, double)>();

  int HPDF_Destination_SetFitB(
    HPDF_Destination dst,
  ) {
    return _HPDF_Destination_SetFitB(
      dst,
    );
  }

  late final _HPDF_Destination_SetFitBPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Destination)>>(
          'HPDF_Destination_SetFitB');
  late final _HPDF_Destination_SetFitB =
      _HPDF_Destination_SetFitBPtr.asFunction<int Function(HPDF_Destination)>();

  int HPDF_Destination_SetFitBH(
    HPDF_Destination dst,
    double top,
  ) {
    return _HPDF_Destination_SetFitBH(
      dst,
      top,
    );
  }

  late final _HPDF_Destination_SetFitBHPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Destination, HPDF_REAL)>>('HPDF_Destination_SetFitBH');
  late final _HPDF_Destination_SetFitBH = _HPDF_Destination_SetFitBHPtr
      .asFunction<int Function(HPDF_Destination, double)>();

  int HPDF_Destination_SetFitBV(
    HPDF_Destination dst,
    double left,
  ) {
    return _HPDF_Destination_SetFitBV(
      dst,
      left,
    );
  }

  late final _HPDF_Destination_SetFitBVPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Destination, HPDF_REAL)>>('HPDF_Destination_SetFitBV');
  late final _HPDF_Destination_SetFitBV = _HPDF_Destination_SetFitBVPtr
      .asFunction<int Function(HPDF_Destination, double)>();

  HPDF_Encoder HPDF_GetEncoder(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_GetEncoder(
      pdf,
      encoding_name,
    );
  }

  late final _HPDF_GetEncoderPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Encoder Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_GetEncoder');
  late final _HPDF_GetEncoder = _HPDF_GetEncoderPtr.asFunction<
      HPDF_Encoder Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Encoder HPDF_GetCurrentEncoder(
    HPDF_Doc pdf,
  ) {
    return _HPDF_GetCurrentEncoder(
      pdf,
    );
  }

  late final _HPDF_GetCurrentEncoderPtr =
      _lookup<ffi.NativeFunction<HPDF_Encoder Function(HPDF_Doc)>>(
          'HPDF_GetCurrentEncoder');
  late final _HPDF_GetCurrentEncoder =
      _HPDF_GetCurrentEncoderPtr.asFunction<HPDF_Encoder Function(HPDF_Doc)>();

  int HPDF_SetCurrentEncoder(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> encoding_name,
  ) {
    return _HPDF_SetCurrentEncoder(
      pdf,
      encoding_name,
    );
  }

  late final _HPDF_SetCurrentEncoderPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_SetCurrentEncoder');
  late final _HPDF_SetCurrentEncoder = _HPDF_SetCurrentEncoderPtr.asFunction<
      int Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  int HPDF_Encoder_GetType(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Encoder_GetType(
      encoder,
    );
  }

  late final _HPDF_Encoder_GetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Encoder)>>(
          'HPDF_Encoder_GetType');
  late final _HPDF_Encoder_GetType =
      _HPDF_Encoder_GetTypePtr.asFunction<int Function(HPDF_Encoder)>();

  int HPDF_Encoder_GetByteType(
    HPDF_Encoder encoder,
    ffi.Pointer<ffi.Char> text,
    int index,
  ) {
    return _HPDF_Encoder_GetByteType(
      encoder,
      text,
      index,
    );
  }

  late final _HPDF_Encoder_GetByteTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(HPDF_Encoder, ffi.Pointer<ffi.Char>,
              HPDF_UINT)>>('HPDF_Encoder_GetByteType');
  late final _HPDF_Encoder_GetByteType = _HPDF_Encoder_GetByteTypePtr
      .asFunction<int Function(HPDF_Encoder, ffi.Pointer<ffi.Char>, int)>();

  int HPDF_Encoder_GetUnicode(
    HPDF_Encoder encoder,
    int code,
  ) {
    return _HPDF_Encoder_GetUnicode(
      encoder,
      code,
    );
  }

  late final _HPDF_Encoder_GetUnicodePtr = _lookup<
          ffi.NativeFunction<HPDF_UNICODE Function(HPDF_Encoder, HPDF_UINT16)>>(
      'HPDF_Encoder_GetUnicode');
  late final _HPDF_Encoder_GetUnicode =
      _HPDF_Encoder_GetUnicodePtr.asFunction<int Function(HPDF_Encoder, int)>();

  int HPDF_Encoder_GetWritingMode(
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Encoder_GetWritingMode(
      encoder,
    );
  }

  late final _HPDF_Encoder_GetWritingModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Encoder)>>(
          'HPDF_Encoder_GetWritingMode');
  late final _HPDF_Encoder_GetWritingMode =
      _HPDF_Encoder_GetWritingModePtr.asFunction<int Function(HPDF_Encoder)>();

  int HPDF_UseJPEncodings(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseJPEncodings(
      pdf,
    );
  }

  late final _HPDF_UseJPEncodingsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseJPEncodings');
  late final _HPDF_UseJPEncodings =
      _HPDF_UseJPEncodingsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseKREncodings(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseKREncodings(
      pdf,
    );
  }

  late final _HPDF_UseKREncodingsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseKREncodings');
  late final _HPDF_UseKREncodings =
      _HPDF_UseKREncodingsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseCNSEncodings(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseCNSEncodings(
      pdf,
    );
  }

  late final _HPDF_UseCNSEncodingsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseCNSEncodings');
  late final _HPDF_UseCNSEncodings =
      _HPDF_UseCNSEncodingsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseCNTEncodings(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseCNTEncodings(
      pdf,
    );
  }

  late final _HPDF_UseCNTEncodingsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseCNTEncodings');
  late final _HPDF_UseCNTEncodings =
      _HPDF_UseCNTEncodingsPtr.asFunction<int Function(HPDF_Doc)>();

  int HPDF_UseUTFEncodings(
    HPDF_Doc pdf,
  ) {
    return _HPDF_UseUTFEncodings(
      pdf,
    );
  }

  late final _HPDF_UseUTFEncodingsPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc)>>(
          'HPDF_UseUTFEncodings');
  late final _HPDF_UseUTFEncodings =
      _HPDF_UseUTFEncodingsPtr.asFunction<int Function(HPDF_Doc)>();

  HPDF_XObject HPDF_Page_CreateXObjectFromImage(
    HPDF_Doc pdf,
    HPDF_Page page,
    HPDF_Rect rect,
    HPDF_Image image,
    int zoom,
  ) {
    return _HPDF_Page_CreateXObjectFromImage(
      pdf,
      page,
      rect,
      image,
      zoom,
    );
  }

  late final _HPDF_Page_CreateXObjectFromImagePtr = _lookup<
      ffi.NativeFunction<
          HPDF_XObject Function(HPDF_Doc, HPDF_Page, HPDF_Rect, HPDF_Image,
              HPDF_BOOL)>>('HPDF_Page_CreateXObjectFromImage');
  late final _HPDF_Page_CreateXObjectFromImage =
      _HPDF_Page_CreateXObjectFromImagePtr.asFunction<
          HPDF_XObject Function(
              HPDF_Doc, HPDF_Page, HPDF_Rect, HPDF_Image, int)>();

  HPDF_XObject HPDF_Page_CreateXObjectAsWhiteRect(
    HPDF_Doc pdf,
    HPDF_Page page,
    HPDF_Rect rect,
  ) {
    return _HPDF_Page_CreateXObjectAsWhiteRect(
      pdf,
      page,
      rect,
    );
  }

  late final _HPDF_Page_CreateXObjectAsWhiteRectPtr = _lookup<
      ffi.NativeFunction<
          HPDF_XObject Function(HPDF_Doc, HPDF_Page,
              HPDF_Rect)>>('HPDF_Page_CreateXObjectAsWhiteRect');
  late final _HPDF_Page_CreateXObjectAsWhiteRect =
      _HPDF_Page_CreateXObjectAsWhiteRectPtr.asFunction<
          HPDF_XObject Function(HPDF_Doc, HPDF_Page, HPDF_Rect)>();

  HPDF_Annotation HPDF_Page_Create3DAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    int tb,
    int np,
    HPDF_U3D u3d,
    HPDF_Image ap,
  ) {
    return _HPDF_Page_Create3DAnnot(
      page,
      rect,
      tb,
      np,
      u3d,
      ap,
    );
  }

  late final _HPDF_Page_Create3DAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, HPDF_BOOL, HPDF_BOOL,
              HPDF_U3D, HPDF_Image)>>('HPDF_Page_Create3DAnnot');
  late final _HPDF_Page_Create3DAnnot = _HPDF_Page_Create3DAnnotPtr.asFunction<
      HPDF_Annotation Function(
          HPDF_Page, HPDF_Rect, int, int, HPDF_U3D, HPDF_Image)>();

  HPDF_Annotation HPDF_Page_CreateTextAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateTextAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateTextAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateTextAnnot');
  late final _HPDF_Page_CreateTextAnnot =
      _HPDF_Page_CreateTextAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateFreeTextAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateFreeTextAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateFreeTextAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateFreeTextAnnot');
  late final _HPDF_Page_CreateFreeTextAnnot =
      _HPDF_Page_CreateFreeTextAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateLineAnnot(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateLineAnnot(
      page,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateLineAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateLineAnnot');
  late final _HPDF_Page_CreateLineAnnot =
      _HPDF_Page_CreateLineAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint(
    HPDF_Doc pdf,
    HPDF_Page page,
    HPDF_Rect rect,
  ) {
    return _HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint(
      pdf,
      page,
      rect,
    );
  }

  late final _HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrintPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Doc, HPDF_Page,
              HPDF_Rect)>>('HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint');
  late final _HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint =
      _HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrintPtr.asFunction<
          HPDF_Annotation Function(HPDF_Doc, HPDF_Page, HPDF_Rect)>();

  HPDF_Annotation HPDF_Page_CreateWidgetAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
  ) {
    return _HPDF_Page_CreateWidgetAnnot(
      page,
      rect,
    );
  }

  late final _HPDF_Page_CreateWidgetAnnotPtr = _lookup<
          ffi.NativeFunction<HPDF_Annotation Function(HPDF_Page, HPDF_Rect)>>(
      'HPDF_Page_CreateWidgetAnnot');
  late final _HPDF_Page_CreateWidgetAnnot = _HPDF_Page_CreateWidgetAnnotPtr
      .asFunction<HPDF_Annotation Function(HPDF_Page, HPDF_Rect)>();

  HPDF_Annotation HPDF_Page_CreateLinkAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    HPDF_Destination dst,
  ) {
    return _HPDF_Page_CreateLinkAnnot(
      page,
      rect,
      dst,
    );
  }

  late final _HPDF_Page_CreateLinkAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect,
              HPDF_Destination)>>('HPDF_Page_CreateLinkAnnot');
  late final _HPDF_Page_CreateLinkAnnot =
      _HPDF_Page_CreateLinkAnnotPtr.asFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, HPDF_Destination)>();

  HPDF_Annotation HPDF_Page_CreateURILinkAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _HPDF_Page_CreateURILinkAnnot(
      page,
      rect,
      uri,
    );
  }

  late final _HPDF_Page_CreateURILinkAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect,
              ffi.Pointer<ffi.Char>)>>('HPDF_Page_CreateURILinkAnnot');
  late final _HPDF_Page_CreateURILinkAnnot =
      _HPDF_Page_CreateURILinkAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>)>();

  HPDF_Annotation HPDF_Page_CreateTextMarkupAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
    int subType,
  ) {
    return _HPDF_Page_CreateTextMarkupAnnot(
      page,
      rect,
      text,
      encoder,
      subType,
    );
  }

  late final _HPDF_Page_CreateTextMarkupAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder, ffi.Int32)>>('HPDF_Page_CreateTextMarkupAnnot');
  late final _HPDF_Page_CreateTextMarkupAnnot =
      _HPDF_Page_CreateTextMarkupAnnotPtr.asFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder, int)>();

  HPDF_Annotation HPDF_Page_CreateHighlightAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateHighlightAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateHighlightAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateHighlightAnnot');
  late final _HPDF_Page_CreateHighlightAnnot =
      _HPDF_Page_CreateHighlightAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateUnderlineAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateUnderlineAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateUnderlineAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateUnderlineAnnot');
  late final _HPDF_Page_CreateUnderlineAnnot =
      _HPDF_Page_CreateUnderlineAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateSquigglyAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateSquigglyAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateSquigglyAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateSquigglyAnnot');
  late final _HPDF_Page_CreateSquigglyAnnot =
      _HPDF_Page_CreateSquigglyAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateStrikeOutAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateStrikeOutAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateStrikeOutAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateStrikeOutAnnot');
  late final _HPDF_Page_CreateStrikeOutAnnot =
      _HPDF_Page_CreateStrikeOutAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreatePopupAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    HPDF_Annotation parent,
  ) {
    return _HPDF_Page_CreatePopupAnnot(
      page,
      rect,
      parent,
    );
  }

  late final _HPDF_Page_CreatePopupAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect,
              HPDF_Annotation)>>('HPDF_Page_CreatePopupAnnot');
  late final _HPDF_Page_CreatePopupAnnot =
      _HPDF_Page_CreatePopupAnnotPtr.asFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, HPDF_Annotation)>();

  HPDF_Annotation HPDF_Page_CreateStampAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    int name,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateStampAnnot(
      page,
      rect,
      name,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateStampAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(
              HPDF_Page,
              HPDF_Rect,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateStampAnnot');
  late final _HPDF_Page_CreateStampAnnot =
      _HPDF_Page_CreateStampAnnotPtr.asFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, int,
              ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateProjectionAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateProjectionAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateProjectionAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateProjectionAnnot');
  late final _HPDF_Page_CreateProjectionAnnot =
      _HPDF_Page_CreateProjectionAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateSquareAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateSquareAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateSquareAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateSquareAnnot');
  late final _HPDF_Page_CreateSquareAnnot =
      _HPDF_Page_CreateSquareAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  HPDF_Annotation HPDF_Page_CreateCircleAnnot(
    HPDF_Page page,
    HPDF_Rect rect,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_Page_CreateCircleAnnot(
      page,
      rect,
      text,
      encoder,
    );
  }

  late final _HPDF_Page_CreateCircleAnnotPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Annotation Function(HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_Page_CreateCircleAnnot');
  late final _HPDF_Page_CreateCircleAnnot =
      _HPDF_Page_CreateCircleAnnotPtr.asFunction<
          HPDF_Annotation Function(
              HPDF_Page, HPDF_Rect, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  int HPDF_LinkAnnot_SetHighlightMode(
    HPDF_Annotation annot,
    int mode,
  ) {
    return _HPDF_LinkAnnot_SetHighlightMode(
      annot,
      mode,
    );
  }

  late final _HPDF_LinkAnnot_SetHighlightModePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, ffi.Int32)>>(
      'HPDF_LinkAnnot_SetHighlightMode');
  late final _HPDF_LinkAnnot_SetHighlightMode =
      _HPDF_LinkAnnot_SetHighlightModePtr.asFunction<
          int Function(HPDF_Annotation, int)>();

  int HPDF_LinkAnnot_SetJavaScript(
    HPDF_Annotation annot,
    HPDF_JavaScript javascript,
  ) {
    return _HPDF_LinkAnnot_SetJavaScript(
      annot,
      javascript,
    );
  }

  late final _HPDF_LinkAnnot_SetJavaScriptPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              HPDF_JavaScript)>>('HPDF_LinkAnnot_SetJavaScript');
  late final _HPDF_LinkAnnot_SetJavaScript = _HPDF_LinkAnnot_SetJavaScriptPtr
      .asFunction<int Function(HPDF_Annotation, HPDF_JavaScript)>();

  int HPDF_LinkAnnot_SetBorderStyle(
    HPDF_Annotation annot,
    double width,
    int dash_on,
    int dash_off,
  ) {
    return _HPDF_LinkAnnot_SetBorderStyle(
      annot,
      width,
      dash_on,
      dash_off,
    );
  }

  late final _HPDF_LinkAnnot_SetBorderStylePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_REAL, HPDF_UINT16,
              HPDF_UINT16)>>('HPDF_LinkAnnot_SetBorderStyle');
  late final _HPDF_LinkAnnot_SetBorderStyle = _HPDF_LinkAnnot_SetBorderStylePtr
      .asFunction<int Function(HPDF_Annotation, double, int, int)>();

  int HPDF_TextAnnot_SetIcon(
    HPDF_Annotation annot,
    int icon,
  ) {
    return _HPDF_TextAnnot_SetIcon(
      annot,
      icon,
    );
  }

  late final _HPDF_TextAnnot_SetIconPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, ffi.Int32)>>(
      'HPDF_TextAnnot_SetIcon');
  late final _HPDF_TextAnnot_SetIcon = _HPDF_TextAnnot_SetIconPtr.asFunction<
      int Function(HPDF_Annotation, int)>();

  int HPDF_TextAnnot_SetOpened(
    HPDF_Annotation annot,
    int opened,
  ) {
    return _HPDF_TextAnnot_SetOpened(
      annot,
      opened,
    );
  }

  late final _HPDF_TextAnnot_SetOpenedPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_BOOL)>>(
      'HPDF_TextAnnot_SetOpened');
  late final _HPDF_TextAnnot_SetOpened = _HPDF_TextAnnot_SetOpenedPtr
      .asFunction<int Function(HPDF_Annotation, int)>();

  int HPDF_Annot_SetRGBColor(
    HPDF_Annotation annot,
    HPDF_RGBColor color,
  ) {
    return _HPDF_Annot_SetRGBColor(
      annot,
      color,
    );
  }

  late final _HPDF_Annot_SetRGBColorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Annotation, HPDF_RGBColor)>>('HPDF_Annot_SetRGBColor');
  late final _HPDF_Annot_SetRGBColor = _HPDF_Annot_SetRGBColorPtr.asFunction<
      int Function(HPDF_Annotation, HPDF_RGBColor)>();

  int HPDF_Annot_SetCMYKColor(
    HPDF_Annotation annot,
    HPDF_CMYKColor color,
  ) {
    return _HPDF_Annot_SetCMYKColor(
      annot,
      color,
    );
  }

  late final _HPDF_Annot_SetCMYKColorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Annotation, HPDF_CMYKColor)>>('HPDF_Annot_SetCMYKColor');
  late final _HPDF_Annot_SetCMYKColor = _HPDF_Annot_SetCMYKColorPtr.asFunction<
      int Function(HPDF_Annotation, HPDF_CMYKColor)>();

  int HPDF_Annot_SetGrayColor(
    HPDF_Annotation annot,
    double color,
  ) {
    return _HPDF_Annot_SetGrayColor(
      annot,
      color,
    );
  }

  late final _HPDF_Annot_SetGrayColorPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_REAL)>>(
      'HPDF_Annot_SetGrayColor');
  late final _HPDF_Annot_SetGrayColor = _HPDF_Annot_SetGrayColorPtr.asFunction<
      int Function(HPDF_Annotation, double)>();

  int HPDF_Annot_SetNoColor(
    HPDF_Annotation annot,
  ) {
    return _HPDF_Annot_SetNoColor(
      annot,
    );
  }

  late final _HPDF_Annot_SetNoColorPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation)>>(
          'HPDF_Annot_SetNoColor');
  late final _HPDF_Annot_SetNoColor =
      _HPDF_Annot_SetNoColorPtr.asFunction<int Function(HPDF_Annotation)>();

  int HPDF_MarkupAnnot_SetTitle(
    HPDF_Annotation annot,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _HPDF_MarkupAnnot_SetTitle(
      annot,
      name,
    );
  }

  late final _HPDF_MarkupAnnot_SetTitlePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              ffi.Pointer<ffi.Char>)>>('HPDF_MarkupAnnot_SetTitle');
  late final _HPDF_MarkupAnnot_SetTitle = _HPDF_MarkupAnnot_SetTitlePtr
      .asFunction<int Function(HPDF_Annotation, ffi.Pointer<ffi.Char>)>();

  int HPDF_MarkupAnnot_SetSubject(
    HPDF_Annotation annot,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _HPDF_MarkupAnnot_SetSubject(
      annot,
      name,
    );
  }

  late final _HPDF_MarkupAnnot_SetSubjectPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              ffi.Pointer<ffi.Char>)>>('HPDF_MarkupAnnot_SetSubject');
  late final _HPDF_MarkupAnnot_SetSubject = _HPDF_MarkupAnnot_SetSubjectPtr
      .asFunction<int Function(HPDF_Annotation, ffi.Pointer<ffi.Char>)>();

  int HPDF_MarkupAnnot_SetCreationDate(
    HPDF_Annotation annot,
    HPDF_Date value,
  ) {
    return _HPDF_MarkupAnnot_SetCreationDate(
      annot,
      value,
    );
  }

  late final _HPDF_MarkupAnnot_SetCreationDatePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_Date)>>(
      'HPDF_MarkupAnnot_SetCreationDate');
  late final _HPDF_MarkupAnnot_SetCreationDate =
      _HPDF_MarkupAnnot_SetCreationDatePtr.asFunction<
          int Function(HPDF_Annotation, HPDF_Date)>();

  int HPDF_MarkupAnnot_SetTransparency(
    HPDF_Annotation annot,
    double value,
  ) {
    return _HPDF_MarkupAnnot_SetTransparency(
      annot,
      value,
    );
  }

  late final _HPDF_MarkupAnnot_SetTransparencyPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_REAL)>>(
      'HPDF_MarkupAnnot_SetTransparency');
  late final _HPDF_MarkupAnnot_SetTransparency =
      _HPDF_MarkupAnnot_SetTransparencyPtr.asFunction<
          int Function(HPDF_Annotation, double)>();

  int HPDF_MarkupAnnot_SetIntent(
    HPDF_Annotation annot,
    int intent,
  ) {
    return _HPDF_MarkupAnnot_SetIntent(
      annot,
      intent,
    );
  }

  late final _HPDF_MarkupAnnot_SetIntentPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, ffi.Int32)>>(
      'HPDF_MarkupAnnot_SetIntent');
  late final _HPDF_MarkupAnnot_SetIntent = _HPDF_MarkupAnnot_SetIntentPtr
      .asFunction<int Function(HPDF_Annotation, int)>();

  int HPDF_MarkupAnnot_SetPopup(
    HPDF_Annotation annot,
    HPDF_Annotation popup,
  ) {
    return _HPDF_MarkupAnnot_SetPopup(
      annot,
      popup,
    );
  }

  late final _HPDF_MarkupAnnot_SetPopupPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Annotation, HPDF_Annotation)>>('HPDF_MarkupAnnot_SetPopup');
  late final _HPDF_MarkupAnnot_SetPopup = _HPDF_MarkupAnnot_SetPopupPtr
      .asFunction<int Function(HPDF_Annotation, HPDF_Annotation)>();

  int HPDF_MarkupAnnot_SetRectDiff(
    HPDF_Annotation annot,
    HPDF_Rect rect,
  ) {
    return _HPDF_MarkupAnnot_SetRectDiff(
      annot,
      rect,
    );
  }

  late final _HPDF_MarkupAnnot_SetRectDiffPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_Rect)>>(
      'HPDF_MarkupAnnot_SetRectDiff');
  late final _HPDF_MarkupAnnot_SetRectDiff = _HPDF_MarkupAnnot_SetRectDiffPtr
      .asFunction<int Function(HPDF_Annotation, HPDF_Rect)>();

  int HPDF_MarkupAnnot_SetCloudEffect(
    HPDF_Annotation annot,
    int cloudIntensity,
  ) {
    return _HPDF_MarkupAnnot_SetCloudEffect(
      annot,
      cloudIntensity,
    );
  }

  late final _HPDF_MarkupAnnot_SetCloudEffectPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_INT)>>(
      'HPDF_MarkupAnnot_SetCloudEffect');
  late final _HPDF_MarkupAnnot_SetCloudEffect =
      _HPDF_MarkupAnnot_SetCloudEffectPtr.asFunction<
          int Function(HPDF_Annotation, int)>();

  int HPDF_MarkupAnnot_SetInteriorRGBColor(
    HPDF_Annotation annot,
    HPDF_RGBColor color,
  ) {
    return _HPDF_MarkupAnnot_SetInteriorRGBColor(
      annot,
      color,
    );
  }

  late final _HPDF_MarkupAnnot_SetInteriorRGBColorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              HPDF_RGBColor)>>('HPDF_MarkupAnnot_SetInteriorRGBColor');
  late final _HPDF_MarkupAnnot_SetInteriorRGBColor =
      _HPDF_MarkupAnnot_SetInteriorRGBColorPtr.asFunction<
          int Function(HPDF_Annotation, HPDF_RGBColor)>();

  int HPDF_MarkupAnnot_SetInteriorCMYKColor(
    HPDF_Annotation annot,
    HPDF_CMYKColor color,
  ) {
    return _HPDF_MarkupAnnot_SetInteriorCMYKColor(
      annot,
      color,
    );
  }

  late final _HPDF_MarkupAnnot_SetInteriorCMYKColorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              HPDF_CMYKColor)>>('HPDF_MarkupAnnot_SetInteriorCMYKColor');
  late final _HPDF_MarkupAnnot_SetInteriorCMYKColor =
      _HPDF_MarkupAnnot_SetInteriorCMYKColorPtr.asFunction<
          int Function(HPDF_Annotation, HPDF_CMYKColor)>();

  int HPDF_MarkupAnnot_SetInteriorGrayColor(
    HPDF_Annotation annot,
    double color,
  ) {
    return _HPDF_MarkupAnnot_SetInteriorGrayColor(
      annot,
      color,
    );
  }

  late final _HPDF_MarkupAnnot_SetInteriorGrayColorPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_REAL)>>(
      'HPDF_MarkupAnnot_SetInteriorGrayColor');
  late final _HPDF_MarkupAnnot_SetInteriorGrayColor =
      _HPDF_MarkupAnnot_SetInteriorGrayColorPtr.asFunction<
          int Function(HPDF_Annotation, double)>();

  int HPDF_MarkupAnnot_SetInteriorTransparent(
    HPDF_Annotation annot,
  ) {
    return _HPDF_MarkupAnnot_SetInteriorTransparent(
      annot,
    );
  }

  late final _HPDF_MarkupAnnot_SetInteriorTransparentPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation)>>(
          'HPDF_MarkupAnnot_SetInteriorTransparent');
  late final _HPDF_MarkupAnnot_SetInteriorTransparent =
      _HPDF_MarkupAnnot_SetInteriorTransparentPtr.asFunction<
          int Function(HPDF_Annotation)>();

  int HPDF_TextMarkupAnnot_SetQuadPoints(
    HPDF_Annotation annot,
    HPDF_Point lb,
    HPDF_Point rb,
    HPDF_Point rt,
    HPDF_Point lt,
  ) {
    return _HPDF_TextMarkupAnnot_SetQuadPoints(
      annot,
      lb,
      rb,
      rt,
      lt,
    );
  }

  late final _HPDF_TextMarkupAnnot_SetQuadPointsPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_Point, HPDF_Point,
              HPDF_Point, HPDF_Point)>>('HPDF_TextMarkupAnnot_SetQuadPoints');
  late final _HPDF_TextMarkupAnnot_SetQuadPoints =
      _HPDF_TextMarkupAnnot_SetQuadPointsPtr.asFunction<
          int Function(HPDF_Annotation, HPDF_Point, HPDF_Point, HPDF_Point,
              HPDF_Point)>();

  int HPDF_Annot_Set3DView(
    HPDF_MMgr mmgr,
    HPDF_Annotation annot,
    HPDF_Annotation annot3d,
    HPDF_Dict view,
  ) {
    return _HPDF_Annot_Set3DView(
      mmgr,
      annot,
      annot3d,
      view,
    );
  }

  late final _HPDF_Annot_Set3DViewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_MMgr, HPDF_Annotation, HPDF_Annotation,
              HPDF_Dict)>>('HPDF_Annot_Set3DView');
  late final _HPDF_Annot_Set3DView = _HPDF_Annot_Set3DViewPtr.asFunction<
      int Function(HPDF_MMgr, HPDF_Annotation, HPDF_Annotation, HPDF_Dict)>();

  int HPDF_PopupAnnot_SetOpened(
    HPDF_Annotation annot,
    int opened,
  ) {
    return _HPDF_PopupAnnot_SetOpened(
      annot,
      opened,
    );
  }

  late final _HPDF_PopupAnnot_SetOpenedPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Annotation, HPDF_BOOL)>>(
      'HPDF_PopupAnnot_SetOpened');
  late final _HPDF_PopupAnnot_SetOpened = _HPDF_PopupAnnot_SetOpenedPtr
      .asFunction<int Function(HPDF_Annotation, int)>();

  int HPDF_FreeTextAnnot_SetLineEndingStyle(
    HPDF_Annotation annot,
    int startStyle,
    int endStyle,
  ) {
    return _HPDF_FreeTextAnnot_SetLineEndingStyle(
      annot,
      startStyle,
      endStyle,
    );
  }

  late final _HPDF_FreeTextAnnot_SetLineEndingStylePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, ffi.Int32,
              ffi.Int32)>>('HPDF_FreeTextAnnot_SetLineEndingStyle');
  late final _HPDF_FreeTextAnnot_SetLineEndingStyle =
      _HPDF_FreeTextAnnot_SetLineEndingStylePtr.asFunction<
          int Function(HPDF_Annotation, int, int)>();

  int HPDF_FreeTextAnnot_Set3PointCalloutLine(
    HPDF_Annotation annot,
    HPDF_Point startPoint,
    HPDF_Point kneePoint,
    HPDF_Point endPoint,
  ) {
    return _HPDF_FreeTextAnnot_Set3PointCalloutLine(
      annot,
      startPoint,
      kneePoint,
      endPoint,
    );
  }

  late final _HPDF_FreeTextAnnot_Set3PointCalloutLinePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_Point, HPDF_Point,
              HPDF_Point)>>('HPDF_FreeTextAnnot_Set3PointCalloutLine');
  late final _HPDF_FreeTextAnnot_Set3PointCalloutLine =
      _HPDF_FreeTextAnnot_Set3PointCalloutLinePtr.asFunction<
          int Function(HPDF_Annotation, HPDF_Point, HPDF_Point, HPDF_Point)>();

  int HPDF_FreeTextAnnot_Set2PointCalloutLine(
    HPDF_Annotation annot,
    HPDF_Point startPoint,
    HPDF_Point endPoint,
  ) {
    return _HPDF_FreeTextAnnot_Set2PointCalloutLine(
      annot,
      startPoint,
      endPoint,
    );
  }

  late final _HPDF_FreeTextAnnot_Set2PointCalloutLinePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_Point,
              HPDF_Point)>>('HPDF_FreeTextAnnot_Set2PointCalloutLine');
  late final _HPDF_FreeTextAnnot_Set2PointCalloutLine =
      _HPDF_FreeTextAnnot_Set2PointCalloutLinePtr.asFunction<
          int Function(HPDF_Annotation, HPDF_Point, HPDF_Point)>();

  int HPDF_FreeTextAnnot_SetDefaultStyle(
    HPDF_Annotation annot,
    ffi.Pointer<ffi.Char> style,
  ) {
    return _HPDF_FreeTextAnnot_SetDefaultStyle(
      annot,
      style,
    );
  }

  late final _HPDF_FreeTextAnnot_SetDefaultStylePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation,
              ffi.Pointer<ffi.Char>)>>('HPDF_FreeTextAnnot_SetDefaultStyle');
  late final _HPDF_FreeTextAnnot_SetDefaultStyle =
      _HPDF_FreeTextAnnot_SetDefaultStylePtr.asFunction<
          int Function(HPDF_Annotation, ffi.Pointer<ffi.Char>)>();

  int HPDF_LineAnnot_SetPosition(
    HPDF_Annotation annot,
    HPDF_Point startPoint,
    int startStyle,
    HPDF_Point endPoint,
    int endStyle,
  ) {
    return _HPDF_LineAnnot_SetPosition(
      annot,
      startPoint,
      startStyle,
      endPoint,
      endStyle,
    );
  }

  late final _HPDF_LineAnnot_SetPositionPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_Point, ffi.Int32,
              HPDF_Point, ffi.Int32)>>('HPDF_LineAnnot_SetPosition');
  late final _HPDF_LineAnnot_SetPosition =
      _HPDF_LineAnnot_SetPositionPtr.asFunction<
          int Function(HPDF_Annotation, HPDF_Point, int, HPDF_Point, int)>();

  int HPDF_LineAnnot_SetLeader(
    HPDF_Annotation annot,
    int leaderLen,
    int leaderExtLen,
    int leaderOffsetLen,
  ) {
    return _HPDF_LineAnnot_SetLeader(
      annot,
      leaderLen,
      leaderExtLen,
      leaderOffsetLen,
    );
  }

  late final _HPDF_LineAnnot_SetLeaderPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_INT, HPDF_INT,
              HPDF_INT)>>('HPDF_LineAnnot_SetLeader');
  late final _HPDF_LineAnnot_SetLeader = _HPDF_LineAnnot_SetLeaderPtr
      .asFunction<int Function(HPDF_Annotation, int, int, int)>();

  int HPDF_LineAnnot_SetCaption(
    HPDF_Annotation annot,
    int showCaption,
    int position,
    int horzOffset,
    int vertOffset,
  ) {
    return _HPDF_LineAnnot_SetCaption(
      annot,
      showCaption,
      position,
      horzOffset,
      vertOffset,
    );
  }

  late final _HPDF_LineAnnot_SetCaptionPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Annotation, HPDF_BOOL, ffi.Int32, HPDF_INT,
              HPDF_INT)>>('HPDF_LineAnnot_SetCaption');
  late final _HPDF_LineAnnot_SetCaption = _HPDF_LineAnnot_SetCaptionPtr
      .asFunction<int Function(HPDF_Annotation, int, int, int, int)>();

  int HPDF_Annotation_SetBorderStyle(
    HPDF_Annotation annot,
    int subtype,
    double width,
    int dash_on,
    int dash_off,
    int dash_phase,
  ) {
    return _HPDF_Annotation_SetBorderStyle(
      annot,
      subtype,
      width,
      dash_on,
      dash_off,
      dash_phase,
    );
  }

  late final _HPDF_Annotation_SetBorderStylePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Annotation,
              ffi.Int32,
              HPDF_REAL,
              HPDF_UINT16,
              HPDF_UINT16,
              HPDF_UINT16)>>('HPDF_Annotation_SetBorderStyle');
  late final _HPDF_Annotation_SetBorderStyle =
      _HPDF_Annotation_SetBorderStylePtr.asFunction<
          int Function(HPDF_Annotation, int, double, int, int, int)>();

  int HPDF_ProjectionAnnot_SetExData(
    HPDF_Annotation annot,
    HPDF_ExData exdata,
  ) {
    return _HPDF_ProjectionAnnot_SetExData(
      annot,
      exdata,
    );
  }

  late final _HPDF_ProjectionAnnot_SetExDataPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Annotation, HPDF_ExData)>>('HPDF_ProjectionAnnot_SetExData');
  late final _HPDF_ProjectionAnnot_SetExData =
      _HPDF_ProjectionAnnot_SetExDataPtr.asFunction<
          int Function(HPDF_Annotation, HPDF_ExData)>();

  HPDF_3DMeasure HPDF_Page_Create3DC3DMeasure(
    HPDF_Page page,
    HPDF_Point3D firstanchorpoint,
    HPDF_Point3D textanchorpoint,
  ) {
    return _HPDF_Page_Create3DC3DMeasure(
      page,
      firstanchorpoint,
      textanchorpoint,
    );
  }

  late final _HPDF_Page_Create3DC3DMeasurePtr = _lookup<
      ffi.NativeFunction<
          HPDF_3DMeasure Function(HPDF_Page, HPDF_Point3D,
              HPDF_Point3D)>>('HPDF_Page_Create3DC3DMeasure');
  late final _HPDF_Page_Create3DC3DMeasure =
      _HPDF_Page_Create3DC3DMeasurePtr.asFunction<
          HPDF_3DMeasure Function(HPDF_Page, HPDF_Point3D, HPDF_Point3D)>();

  HPDF_3DMeasure HPDF_Page_CreatePD33DMeasure(
    HPDF_Page page,
    HPDF_Point3D annotationPlaneNormal,
    HPDF_Point3D firstAnchorPoint,
    HPDF_Point3D secondAnchorPoint,
    HPDF_Point3D leaderLinesDirection,
    HPDF_Point3D measurementValuePoint,
    HPDF_Point3D textYDirection,
    double value,
    ffi.Pointer<ffi.Char> unitsString,
  ) {
    return _HPDF_Page_CreatePD33DMeasure(
      page,
      annotationPlaneNormal,
      firstAnchorPoint,
      secondAnchorPoint,
      leaderLinesDirection,
      measurementValuePoint,
      textYDirection,
      value,
      unitsString,
    );
  }

  late final _HPDF_Page_CreatePD33DMeasurePtr = _lookup<
      ffi.NativeFunction<
          HPDF_3DMeasure Function(
              HPDF_Page,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_REAL,
              ffi.Pointer<ffi.Char>)>>('HPDF_Page_CreatePD33DMeasure');
  late final _HPDF_Page_CreatePD33DMeasure =
      _HPDF_Page_CreatePD33DMeasurePtr.asFunction<
          HPDF_3DMeasure Function(
              HPDF_Page,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              HPDF_Point3D,
              double,
              ffi.Pointer<ffi.Char>)>();

  int HPDF_3DMeasure_SetName(
    HPDF_3DMeasure measure,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _HPDF_3DMeasure_SetName(
      measure,
      name,
    );
  }

  late final _HPDF_3DMeasure_SetNamePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_3DMeasure,
              ffi.Pointer<ffi.Char>)>>('HPDF_3DMeasure_SetName');
  late final _HPDF_3DMeasure_SetName = _HPDF_3DMeasure_SetNamePtr.asFunction<
      int Function(HPDF_3DMeasure, ffi.Pointer<ffi.Char>)>();

  int HPDF_3DMeasure_SetColor(
    HPDF_3DMeasure measure,
    HPDF_RGBColor color,
  ) {
    return _HPDF_3DMeasure_SetColor(
      measure,
      color,
    );
  }

  late final _HPDF_3DMeasure_SetColorPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_3DMeasure, HPDF_RGBColor)>>('HPDF_3DMeasure_SetColor');
  late final _HPDF_3DMeasure_SetColor = _HPDF_3DMeasure_SetColorPtr.asFunction<
      int Function(HPDF_3DMeasure, HPDF_RGBColor)>();

  int HPDF_3DMeasure_SetTextSize(
    HPDF_3DMeasure measure,
    double textsize,
  ) {
    return _HPDF_3DMeasure_SetTextSize(
      measure,
      textsize,
    );
  }

  late final _HPDF_3DMeasure_SetTextSizePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_3DMeasure, HPDF_REAL)>>(
      'HPDF_3DMeasure_SetTextSize');
  late final _HPDF_3DMeasure_SetTextSize = _HPDF_3DMeasure_SetTextSizePtr
      .asFunction<int Function(HPDF_3DMeasure, double)>();

  int HPDF_3DC3DMeasure_SetTextBoxSize(
    HPDF_3DMeasure measure,
    int x,
    int y,
  ) {
    return _HPDF_3DC3DMeasure_SetTextBoxSize(
      measure,
      x,
      y,
    );
  }

  late final _HPDF_3DC3DMeasure_SetTextBoxSizePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_3DMeasure, HPDF_INT32,
              HPDF_INT32)>>('HPDF_3DC3DMeasure_SetTextBoxSize');
  late final _HPDF_3DC3DMeasure_SetTextBoxSize =
      _HPDF_3DC3DMeasure_SetTextBoxSizePtr.asFunction<
          int Function(HPDF_3DMeasure, int, int)>();

  int HPDF_3DC3DMeasure_SetText(
    HPDF_3DMeasure measure,
    ffi.Pointer<ffi.Char> text,
    HPDF_Encoder encoder,
  ) {
    return _HPDF_3DC3DMeasure_SetText(
      measure,
      text,
      encoder,
    );
  }

  late final _HPDF_3DC3DMeasure_SetTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_3DMeasure, ffi.Pointer<ffi.Char>,
              HPDF_Encoder)>>('HPDF_3DC3DMeasure_SetText');
  late final _HPDF_3DC3DMeasure_SetText =
      _HPDF_3DC3DMeasure_SetTextPtr.asFunction<
          int Function(HPDF_3DMeasure, ffi.Pointer<ffi.Char>, HPDF_Encoder)>();

  int HPDF_3DC3DMeasure_SetProjectionAnotation(
    HPDF_3DMeasure measure,
    HPDF_Annotation projectionanotation,
  ) {
    return _HPDF_3DC3DMeasure_SetProjectionAnotation(
      measure,
      projectionanotation,
    );
  }

  late final _HPDF_3DC3DMeasure_SetProjectionAnotationPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_3DMeasure,
              HPDF_Annotation)>>('HPDF_3DC3DMeasure_SetProjectionAnotation');
  late final _HPDF_3DC3DMeasure_SetProjectionAnotation =
      _HPDF_3DC3DMeasure_SetProjectionAnotationPtr.asFunction<
          int Function(HPDF_3DMeasure, HPDF_Annotation)>();

  HPDF_ExData HPDF_Page_Create3DAnnotExData(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Create3DAnnotExData(
      page,
    );
  }

  late final _HPDF_Page_Create3DAnnotExDataPtr =
      _lookup<ffi.NativeFunction<HPDF_ExData Function(HPDF_Page)>>(
          'HPDF_Page_Create3DAnnotExData');
  late final _HPDF_Page_Create3DAnnotExData = _HPDF_Page_Create3DAnnotExDataPtr
      .asFunction<HPDF_ExData Function(HPDF_Page)>();

  int HPDF_3DAnnotExData_Set3DMeasurement(
    HPDF_ExData exdata,
    HPDF_3DMeasure measure,
  ) {
    return _HPDF_3DAnnotExData_Set3DMeasurement(
      exdata,
      measure,
    );
  }

  late final _HPDF_3DAnnotExData_Set3DMeasurementPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_ExData,
              HPDF_3DMeasure)>>('HPDF_3DAnnotExData_Set3DMeasurement');
  late final _HPDF_3DAnnotExData_Set3DMeasurement =
      _HPDF_3DAnnotExData_Set3DMeasurementPtr.asFunction<
          int Function(HPDF_ExData, HPDF_3DMeasure)>();

  HPDF_Dict HPDF_Page_Create3DView(
    HPDF_Page page,
    HPDF_U3D u3d,
    HPDF_Annotation annot3d,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _HPDF_Page_Create3DView(
      page,
      u3d,
      annot3d,
      name,
    );
  }

  late final _HPDF_Page_Create3DViewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Dict Function(HPDF_Page, HPDF_U3D, HPDF_Annotation,
              ffi.Pointer<ffi.Char>)>>('HPDF_Page_Create3DView');
  late final _HPDF_Page_Create3DView = _HPDF_Page_Create3DViewPtr.asFunction<
      HPDF_Dict Function(
          HPDF_Page, HPDF_U3D, HPDF_Annotation, ffi.Pointer<ffi.Char>)>();

  int HPDF_3DView_Add3DC3DMeasure(
    HPDF_Dict view,
    HPDF_3DMeasure measure,
  ) {
    return _HPDF_3DView_Add3DC3DMeasure(
      view,
      measure,
    );
  }

  late final _HPDF_3DView_Add3DC3DMeasurePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Dict, HPDF_3DMeasure)>>(
      'HPDF_3DView_Add3DC3DMeasure');
  late final _HPDF_3DView_Add3DC3DMeasure = _HPDF_3DView_Add3DC3DMeasurePtr
      .asFunction<int Function(HPDF_Dict, HPDF_3DMeasure)>();

  HPDF_Image HPDF_LoadPngImageFromMem(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buffer,
    int size,
  ) {
    return _HPDF_LoadPngImageFromMem(
      pdf,
      buffer,
      size,
    );
  }

  late final _HPDF_LoadPngImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_LoadPngImageFromMem');
  late final _HPDF_LoadPngImageFromMem = _HPDF_LoadPngImageFromMemPtr
      .asFunction<HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>, int)>();

  HPDF_Image HPDF_LoadPngImageFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _HPDF_LoadPngImageFromFile(
      pdf,
      filename,
    );
  }

  late final _HPDF_LoadPngImageFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_LoadPngImageFromFile');
  late final _HPDF_LoadPngImageFromFile = _HPDF_LoadPngImageFromFilePtr
      .asFunction<HPDF_Image Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Image HPDF_LoadPngImageFromFile2(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _HPDF_LoadPngImageFromFile2(
      pdf,
      filename,
    );
  }

  late final _HPDF_LoadPngImageFromFile2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_LoadPngImageFromFile2');
  late final _HPDF_LoadPngImageFromFile2 = _HPDF_LoadPngImageFromFile2Ptr
      .asFunction<HPDF_Image Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Image HPDF_LoadJpegImageFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _HPDF_LoadJpegImageFromFile(
      pdf,
      filename,
    );
  }

  late final _HPDF_LoadJpegImageFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_LoadJpegImageFromFile');
  late final _HPDF_LoadJpegImageFromFile = _HPDF_LoadJpegImageFromFilePtr
      .asFunction<HPDF_Image Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Image HPDF_LoadJpegImageFromMem(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buffer,
    int size,
  ) {
    return _HPDF_LoadJpegImageFromMem(
      pdf,
      buffer,
      size,
    );
  }

  late final _HPDF_LoadJpegImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_LoadJpegImageFromMem');
  late final _HPDF_LoadJpegImageFromMem = _HPDF_LoadJpegImageFromMemPtr
      .asFunction<HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>, int)>();

  HPDF_Image HPDF_LoadU3DFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _HPDF_LoadU3DFromFile(
      pdf,
      filename,
    );
  }

  late final _HPDF_LoadU3DFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_LoadU3DFromFile');
  late final _HPDF_LoadU3DFromFile = _HPDF_LoadU3DFromFilePtr.asFunction<
      HPDF_Image Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_Image HPDF_LoadU3DFromMem(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buffer,
    int size,
  ) {
    return _HPDF_LoadU3DFromMem(
      pdf,
      buffer,
      size,
    );
  }

  late final _HPDF_LoadU3DFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_LoadU3DFromMem');
  late final _HPDF_LoadU3DFromMem = _HPDF_LoadU3DFromMemPtr.asFunction<
      HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>, int)>();

  HPDF_Image HPDF_Image_LoadRaw1BitImageFromMem(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buf,
    int width,
    int height,
    int line_width,
    int black_is1,
    int top_is_first,
  ) {
    return _HPDF_Image_LoadRaw1BitImageFromMem(
      pdf,
      buf,
      width,
      height,
      line_width,
      black_is1,
      top_is_first,
    );
  }

  late final _HPDF_Image_LoadRaw1BitImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(
              HPDF_Doc,
              ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT,
              HPDF_UINT,
              HPDF_UINT,
              HPDF_BOOL,
              HPDF_BOOL)>>('HPDF_Image_LoadRaw1BitImageFromMem');
  late final _HPDF_Image_LoadRaw1BitImageFromMem =
      _HPDF_Image_LoadRaw1BitImageFromMemPtr.asFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<HPDF_BYTE>, int, int, int, int, int)>();

  HPDF_Image HPDF_LoadRawImageFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> filename,
    int width,
    int height,
    int color_space,
  ) {
    return _HPDF_LoadRawImageFromFile(
      pdf,
      filename,
      width,
      height,
      color_space,
    );
  }

  late final _HPDF_LoadRawImageFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_Doc, ffi.Pointer<ffi.Char>, HPDF_UINT,
              HPDF_UINT, ffi.Int32)>>('HPDF_LoadRawImageFromFile');
  late final _HPDF_LoadRawImageFromFile =
      _HPDF_LoadRawImageFromFilePtr.asFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>, int, int, int)>();

  HPDF_Image HPDF_LoadRawImageFromMem(
    HPDF_Doc pdf,
    ffi.Pointer<HPDF_BYTE> buf,
    int width,
    int height,
    int color_space,
    int bits_per_component,
  ) {
    return _HPDF_LoadRawImageFromMem(
      pdf,
      buf,
      width,
      height,
      color_space,
      bits_per_component,
    );
  }

  late final _HPDF_LoadRawImageFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Image Function(HPDF_Doc, ffi.Pointer<HPDF_BYTE>, HPDF_UINT,
              HPDF_UINT, ffi.Int32, HPDF_UINT)>>('HPDF_LoadRawImageFromMem');
  late final _HPDF_LoadRawImageFromMem =
      _HPDF_LoadRawImageFromMemPtr.asFunction<
          HPDF_Image Function(
              HPDF_Doc, ffi.Pointer<HPDF_BYTE>, int, int, int, int)>();

  int HPDF_Image_AddSMask(
    HPDF_Image image,
    HPDF_Image smask,
  ) {
    return _HPDF_Image_AddSMask(
      image,
      smask,
    );
  }

  late final _HPDF_Image_AddSMaskPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Image, HPDF_Image)>>(
          'HPDF_Image_AddSMask');
  late final _HPDF_Image_AddSMask = _HPDF_Image_AddSMaskPtr.asFunction<
      int Function(HPDF_Image, HPDF_Image)>();

  HPDF_Point HPDF_Image_GetSize(
    HPDF_Image image,
  ) {
    return _HPDF_Image_GetSize(
      image,
    );
  }

  late final _HPDF_Image_GetSizePtr =
      _lookup<ffi.NativeFunction<HPDF_Point Function(HPDF_Image)>>(
          'HPDF_Image_GetSize');
  late final _HPDF_Image_GetSize =
      _HPDF_Image_GetSizePtr.asFunction<HPDF_Point Function(HPDF_Image)>();

  int HPDF_Image_GetSize2(
    HPDF_Image image,
    ffi.Pointer<HPDF_Point> size,
  ) {
    return _HPDF_Image_GetSize2(
      image,
      size,
    );
  }

  late final _HPDF_Image_GetSize2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Image, ffi.Pointer<HPDF_Point>)>>('HPDF_Image_GetSize2');
  late final _HPDF_Image_GetSize2 = _HPDF_Image_GetSize2Ptr.asFunction<
      int Function(HPDF_Image, ffi.Pointer<HPDF_Point>)>();

  int HPDF_Image_GetWidth(
    HPDF_Image image,
  ) {
    return _HPDF_Image_GetWidth(
      image,
    );
  }

  late final _HPDF_Image_GetWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Image)>>(
          'HPDF_Image_GetWidth');
  late final _HPDF_Image_GetWidth =
      _HPDF_Image_GetWidthPtr.asFunction<int Function(HPDF_Image)>();

  int HPDF_Image_GetHeight(
    HPDF_Image image,
  ) {
    return _HPDF_Image_GetHeight(
      image,
    );
  }

  late final _HPDF_Image_GetHeightPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Image)>>(
          'HPDF_Image_GetHeight');
  late final _HPDF_Image_GetHeight =
      _HPDF_Image_GetHeightPtr.asFunction<int Function(HPDF_Image)>();

  int HPDF_Image_GetBitsPerComponent(
    HPDF_Image image,
  ) {
    return _HPDF_Image_GetBitsPerComponent(
      image,
    );
  }

  late final _HPDF_Image_GetBitsPerComponentPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Image)>>(
          'HPDF_Image_GetBitsPerComponent');
  late final _HPDF_Image_GetBitsPerComponent =
      _HPDF_Image_GetBitsPerComponentPtr.asFunction<int Function(HPDF_Image)>();

  ffi.Pointer<ffi.Char> HPDF_Image_GetColorSpace(
    HPDF_Image image,
  ) {
    return _HPDF_Image_GetColorSpace(
      image,
    );
  }

  late final _HPDF_Image_GetColorSpacePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(HPDF_Image)>>(
          'HPDF_Image_GetColorSpace');
  late final _HPDF_Image_GetColorSpace = _HPDF_Image_GetColorSpacePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Image)>();

  int HPDF_Image_SetColorMask(
    HPDF_Image image,
    int rmin,
    int rmax,
    int gmin,
    int gmax,
    int bmin,
    int bmax,
  ) {
    return _HPDF_Image_SetColorMask(
      image,
      rmin,
      rmax,
      gmin,
      gmax,
      bmin,
      bmax,
    );
  }

  late final _HPDF_Image_SetColorMaskPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Image, HPDF_UINT, HPDF_UINT, HPDF_UINT,
              HPDF_UINT, HPDF_UINT, HPDF_UINT)>>('HPDF_Image_SetColorMask');
  late final _HPDF_Image_SetColorMask = _HPDF_Image_SetColorMaskPtr.asFunction<
      int Function(HPDF_Image, int, int, int, int, int, int)>();

  int HPDF_Image_SetMaskImage(
    HPDF_Image image,
    HPDF_Image mask_image,
  ) {
    return _HPDF_Image_SetMaskImage(
      image,
      mask_image,
    );
  }

  late final _HPDF_Image_SetMaskImagePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Image, HPDF_Image)>>(
          'HPDF_Image_SetMaskImage');
  late final _HPDF_Image_SetMaskImage = _HPDF_Image_SetMaskImagePtr.asFunction<
      int Function(HPDF_Image, HPDF_Image)>();

  int HPDF_SetInfoAttr(
    HPDF_Doc pdf,
    int type,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _HPDF_SetInfoAttr(
      pdf,
      type,
      value,
    );
  }

  late final _HPDF_SetInfoAttrPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, ffi.Int32, ffi.Pointer<ffi.Char>)>>('HPDF_SetInfoAttr');
  late final _HPDF_SetInfoAttr = _HPDF_SetInfoAttrPtr.asFunction<
      int Function(HPDF_Doc, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> HPDF_GetInfoAttr(
    HPDF_Doc pdf,
    int type,
  ) {
    return _HPDF_GetInfoAttr(
      pdf,
      type,
    );
  }

  late final _HPDF_GetInfoAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              HPDF_Doc, ffi.Int32)>>('HPDF_GetInfoAttr');
  late final _HPDF_GetInfoAttr = _HPDF_GetInfoAttrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(HPDF_Doc, int)>();

  int HPDF_SetInfoDateAttr(
    HPDF_Doc pdf,
    int type,
    HPDF_Date value,
  ) {
    return _HPDF_SetInfoDateAttr(
      pdf,
      type,
      value,
    );
  }

  late final _HPDF_SetInfoDateAttrPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, ffi.Int32, HPDF_Date)>>('HPDF_SetInfoDateAttr');
  late final _HPDF_SetInfoDateAttr = _HPDF_SetInfoDateAttrPtr.asFunction<
      int Function(HPDF_Doc, int, HPDF_Date)>();

  int HPDF_SetPassword(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> owner_passwd,
    ffi.Pointer<ffi.Char> user_passwd,
  ) {
    return _HPDF_SetPassword(
      pdf,
      owner_passwd,
      user_passwd,
    );
  }

  late final _HPDF_SetPasswordPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('HPDF_SetPassword');
  late final _HPDF_SetPassword = _HPDF_SetPasswordPtr.asFunction<
      int Function(HPDF_Doc, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int HPDF_SetPermission(
    HPDF_Doc pdf,
    int permission,
  ) {
    return _HPDF_SetPermission(
      pdf,
      permission,
    );
  }

  late final _HPDF_SetPermissionPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_UINT)>>(
          'HPDF_SetPermission');
  late final _HPDF_SetPermission =
      _HPDF_SetPermissionPtr.asFunction<int Function(HPDF_Doc, int)>();

  int HPDF_SetEncryptionMode(
    HPDF_Doc pdf,
    int mode,
    int key_len,
  ) {
    return _HPDF_SetEncryptionMode(
      pdf,
      mode,
      key_len,
    );
  }

  late final _HPDF_SetEncryptionModePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Doc, ffi.Int32, HPDF_UINT)>>('HPDF_SetEncryptionMode');
  late final _HPDF_SetEncryptionMode =
      _HPDF_SetEncryptionModePtr.asFunction<int Function(HPDF_Doc, int, int)>();

  int HPDF_SetCompressionMode(
    HPDF_Doc pdf,
    int mode,
  ) {
    return _HPDF_SetCompressionMode(
      pdf,
      mode,
    );
  }

  late final _HPDF_SetCompressionModePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Doc, HPDF_UINT)>>(
          'HPDF_SetCompressionMode');
  late final _HPDF_SetCompressionMode =
      _HPDF_SetCompressionModePtr.asFunction<int Function(HPDF_Doc, int)>();

  ffi.Pointer<ffi.Char> HPDF_Font_GetFontName(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetFontName(
      font,
    );
  }

  late final _HPDF_Font_GetFontNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(HPDF_Font)>>(
          'HPDF_Font_GetFontName');
  late final _HPDF_Font_GetFontName = _HPDF_Font_GetFontNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(HPDF_Font)>();

  ffi.Pointer<ffi.Char> HPDF_Font_GetEncodingName(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetEncodingName(
      font,
    );
  }

  late final _HPDF_Font_GetEncodingNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(HPDF_Font)>>(
          'HPDF_Font_GetEncodingName');
  late final _HPDF_Font_GetEncodingName = _HPDF_Font_GetEncodingNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(HPDF_Font)>();

  int HPDF_Font_GetUnicodeWidth(
    HPDF_Font font,
    int code,
  ) {
    return _HPDF_Font_GetUnicodeWidth(
      font,
      code,
    );
  }

  late final _HPDF_Font_GetUnicodeWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_INT Function(HPDF_Font, HPDF_UNICODE)>>(
          'HPDF_Font_GetUnicodeWidth');
  late final _HPDF_Font_GetUnicodeWidth =
      _HPDF_Font_GetUnicodeWidthPtr.asFunction<int Function(HPDF_Font, int)>();

  HPDF_Box HPDF_Font_GetBBox(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetBBox(
      font,
    );
  }

  late final _HPDF_Font_GetBBoxPtr =
      _lookup<ffi.NativeFunction<HPDF_Box Function(HPDF_Font)>>(
          'HPDF_Font_GetBBox');
  late final _HPDF_Font_GetBBox =
      _HPDF_Font_GetBBoxPtr.asFunction<HPDF_Box Function(HPDF_Font)>();

  int HPDF_Font_GetAscent(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetAscent(
      font,
    );
  }

  late final _HPDF_Font_GetAscentPtr =
      _lookup<ffi.NativeFunction<HPDF_INT Function(HPDF_Font)>>(
          'HPDF_Font_GetAscent');
  late final _HPDF_Font_GetAscent =
      _HPDF_Font_GetAscentPtr.asFunction<int Function(HPDF_Font)>();

  int HPDF_Font_GetDescent(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetDescent(
      font,
    );
  }

  late final _HPDF_Font_GetDescentPtr =
      _lookup<ffi.NativeFunction<HPDF_INT Function(HPDF_Font)>>(
          'HPDF_Font_GetDescent');
  late final _HPDF_Font_GetDescent =
      _HPDF_Font_GetDescentPtr.asFunction<int Function(HPDF_Font)>();

  int HPDF_Font_GetXHeight(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetXHeight(
      font,
    );
  }

  late final _HPDF_Font_GetXHeightPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Font)>>(
          'HPDF_Font_GetXHeight');
  late final _HPDF_Font_GetXHeight =
      _HPDF_Font_GetXHeightPtr.asFunction<int Function(HPDF_Font)>();

  int HPDF_Font_GetCapHeight(
    HPDF_Font font,
  ) {
    return _HPDF_Font_GetCapHeight(
      font,
    );
  }

  late final _HPDF_Font_GetCapHeightPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Font)>>(
          'HPDF_Font_GetCapHeight');
  late final _HPDF_Font_GetCapHeight =
      _HPDF_Font_GetCapHeightPtr.asFunction<int Function(HPDF_Font)>();

  HPDF_TextWidth HPDF_Font_TextWidth(
    HPDF_Font font,
    ffi.Pointer<HPDF_BYTE> text,
    int len,
  ) {
    return _HPDF_Font_TextWidth(
      font,
      text,
      len,
    );
  }

  late final _HPDF_Font_TextWidthPtr = _lookup<
      ffi.NativeFunction<
          HPDF_TextWidth Function(HPDF_Font, ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT)>>('HPDF_Font_TextWidth');
  late final _HPDF_Font_TextWidth = _HPDF_Font_TextWidthPtr.asFunction<
      HPDF_TextWidth Function(HPDF_Font, ffi.Pointer<HPDF_BYTE>, int)>();

  int HPDF_Font_MeasureText(
    HPDF_Font font,
    ffi.Pointer<HPDF_BYTE> text,
    int len,
    double width,
    double font_size,
    double char_space,
    double word_space,
    int wordwrap,
    ffi.Pointer<HPDF_REAL> real_width,
  ) {
    return _HPDF_Font_MeasureText(
      font,
      text,
      len,
      width,
      font_size,
      char_space,
      word_space,
      wordwrap,
      real_width,
    );
  }

  late final _HPDF_Font_MeasureTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_UINT Function(
              HPDF_Font,
              ffi.Pointer<HPDF_BYTE>,
              HPDF_UINT,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_BOOL,
              ffi.Pointer<HPDF_REAL>)>>('HPDF_Font_MeasureText');
  late final _HPDF_Font_MeasureText = _HPDF_Font_MeasureTextPtr.asFunction<
      int Function(HPDF_Font, ffi.Pointer<HPDF_BYTE>, int, double, double,
          double, double, int, ffi.Pointer<HPDF_REAL>)>();

  HPDF_EmbeddedFile HPDF_AttachFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _HPDF_AttachFile(
      pdf,
      file,
    );
  }

  late final _HPDF_AttachFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_EmbeddedFile Function(
              HPDF_Doc, ffi.Pointer<ffi.Char>)>>('HPDF_AttachFile');
  late final _HPDF_AttachFile = _HPDF_AttachFilePtr.asFunction<
      HPDF_EmbeddedFile Function(HPDF_Doc, ffi.Pointer<ffi.Char>)>();

  HPDF_ExtGState HPDF_CreateExtGState(
    HPDF_Doc pdf,
  ) {
    return _HPDF_CreateExtGState(
      pdf,
    );
  }

  late final _HPDF_CreateExtGStatePtr =
      _lookup<ffi.NativeFunction<HPDF_ExtGState Function(HPDF_Doc)>>(
          'HPDF_CreateExtGState');
  late final _HPDF_CreateExtGState =
      _HPDF_CreateExtGStatePtr.asFunction<HPDF_ExtGState Function(HPDF_Doc)>();

  int HPDF_ExtGState_SetAlphaStroke(
    HPDF_ExtGState ext_gstate,
    double value,
  ) {
    return _HPDF_ExtGState_SetAlphaStroke(
      ext_gstate,
      value,
    );
  }

  late final _HPDF_ExtGState_SetAlphaStrokePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_ExtGState, HPDF_REAL)>>(
      'HPDF_ExtGState_SetAlphaStroke');
  late final _HPDF_ExtGState_SetAlphaStroke = _HPDF_ExtGState_SetAlphaStrokePtr
      .asFunction<int Function(HPDF_ExtGState, double)>();

  int HPDF_ExtGState_SetAlphaFill(
    HPDF_ExtGState ext_gstate,
    double value,
  ) {
    return _HPDF_ExtGState_SetAlphaFill(
      ext_gstate,
      value,
    );
  }

  late final _HPDF_ExtGState_SetAlphaFillPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_ExtGState, HPDF_REAL)>>(
      'HPDF_ExtGState_SetAlphaFill');
  late final _HPDF_ExtGState_SetAlphaFill = _HPDF_ExtGState_SetAlphaFillPtr
      .asFunction<int Function(HPDF_ExtGState, double)>();

  int HPDF_ExtGState_SetBlendMode(
    HPDF_ExtGState ext_gstate,
    int mode,
  ) {
    return _HPDF_ExtGState_SetBlendMode(
      ext_gstate,
      mode,
    );
  }

  late final _HPDF_ExtGState_SetBlendModePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_ExtGState, ffi.Int32)>>(
      'HPDF_ExtGState_SetBlendMode');
  late final _HPDF_ExtGState_SetBlendMode = _HPDF_ExtGState_SetBlendModePtr
      .asFunction<int Function(HPDF_ExtGState, int)>();

  double HPDF_Page_TextWidth(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Page_TextWidth(
      page,
      text,
    );
  }

  late final _HPDF_Page_TextWidthPtr = _lookup<
      ffi.NativeFunction<
          HPDF_REAL Function(
              HPDF_Page, ffi.Pointer<ffi.Char>)>>('HPDF_Page_TextWidth');
  late final _HPDF_Page_TextWidth = _HPDF_Page_TextWidthPtr.asFunction<
      double Function(HPDF_Page, ffi.Pointer<ffi.Char>)>();

  int HPDF_Page_MeasureText(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> text,
    double width,
    int wordwrap,
    ffi.Pointer<HPDF_REAL> real_width,
  ) {
    return _HPDF_Page_MeasureText(
      page,
      text,
      width,
      wordwrap,
      real_width,
    );
  }

  late final _HPDF_Page_MeasureTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_UINT Function(HPDF_Page, ffi.Pointer<ffi.Char>, HPDF_REAL,
              HPDF_BOOL, ffi.Pointer<HPDF_REAL>)>>('HPDF_Page_MeasureText');
  late final _HPDF_Page_MeasureText = _HPDF_Page_MeasureTextPtr.asFunction<
      int Function(HPDF_Page, ffi.Pointer<ffi.Char>, double, int,
          ffi.Pointer<HPDF_REAL>)>();

  double HPDF_Page_GetWidth(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetWidth(
      page,
    );
  }

  late final _HPDF_Page_GetWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetWidth');
  late final _HPDF_Page_GetWidth =
      _HPDF_Page_GetWidthPtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetHeight(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetHeight(
      page,
    ) ;
  }

  late final _HPDF_Page_GetHeightPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetHeight');
  late final _HPDF_Page_GetHeight =
      _HPDF_Page_GetHeightPtr.asFunction<double Function(HPDF_Page)>();

  int HPDF_Page_GetGMode(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetGMode(
      page,
    );
  }

  late final _HPDF_Page_GetGModePtr =
      _lookup<ffi.NativeFunction<HPDF_UINT16 Function(HPDF_Page)>>(
          'HPDF_Page_GetGMode');
  late final _HPDF_Page_GetGMode =
      _HPDF_Page_GetGModePtr.asFunction<int Function(HPDF_Page)>();

  HPDF_Point HPDF_Page_GetCurrentPos(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCurrentPos(
      page,
    );
  }

  late final _HPDF_Page_GetCurrentPosPtr =
      _lookup<ffi.NativeFunction<HPDF_Point Function(HPDF_Page)>>(
          'HPDF_Page_GetCurrentPos');
  late final _HPDF_Page_GetCurrentPos =
      _HPDF_Page_GetCurrentPosPtr.asFunction<HPDF_Point Function(HPDF_Page)>();

  int HPDF_Page_GetCurrentPos2(
    HPDF_Page page,
    ffi.Pointer<HPDF_Point> pos,
  ) {
    return _HPDF_Page_GetCurrentPos2(
      page,
      pos,
    );
  }

  late final _HPDF_Page_GetCurrentPos2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, ffi.Pointer<HPDF_Point>)>>('HPDF_Page_GetCurrentPos2');
  late final _HPDF_Page_GetCurrentPos2 = _HPDF_Page_GetCurrentPos2Ptr
      .asFunction<int Function(HPDF_Page, ffi.Pointer<HPDF_Point>)>();

  HPDF_Point HPDF_Page_GetCurrentTextPos(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCurrentTextPos(
      page,
    );
  }

  late final _HPDF_Page_GetCurrentTextPosPtr =
      _lookup<ffi.NativeFunction<HPDF_Point Function(HPDF_Page)>>(
          'HPDF_Page_GetCurrentTextPos');
  late final _HPDF_Page_GetCurrentTextPos = _HPDF_Page_GetCurrentTextPosPtr
      .asFunction<HPDF_Point Function(HPDF_Page)>();

  int HPDF_Page_GetCurrentTextPos2(
    HPDF_Page page,
    ffi.Pointer<HPDF_Point> pos,
  ) {
    return _HPDF_Page_GetCurrentTextPos2(
      page,
      pos,
    );
  }

  late final _HPDF_Page_GetCurrentTextPos2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page,
              ffi.Pointer<HPDF_Point>)>>('HPDF_Page_GetCurrentTextPos2');
  late final _HPDF_Page_GetCurrentTextPos2 = _HPDF_Page_GetCurrentTextPos2Ptr
      .asFunction<int Function(HPDF_Page, ffi.Pointer<HPDF_Point>)>();

  HPDF_Font HPDF_Page_GetCurrentFont(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCurrentFont(
      page,
    );
  }

  late final _HPDF_Page_GetCurrentFontPtr =
      _lookup<ffi.NativeFunction<HPDF_Font Function(HPDF_Page)>>(
          'HPDF_Page_GetCurrentFont');
  late final _HPDF_Page_GetCurrentFont =
      _HPDF_Page_GetCurrentFontPtr.asFunction<HPDF_Font Function(HPDF_Page)>();

  double HPDF_Page_GetCurrentFontSize(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCurrentFontSize(
      page,
    );
  }

  late final _HPDF_Page_GetCurrentFontSizePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetCurrentFontSize');
  late final _HPDF_Page_GetCurrentFontSize =
      _HPDF_Page_GetCurrentFontSizePtr.asFunction<double Function(HPDF_Page)>();

  HPDF_TransMatrix HPDF_Page_GetTransMatrix(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTransMatrix(
      page,
    );
  }

  late final _HPDF_Page_GetTransMatrixPtr =
      _lookup<ffi.NativeFunction<HPDF_TransMatrix Function(HPDF_Page)>>(
          'HPDF_Page_GetTransMatrix');
  late final _HPDF_Page_GetTransMatrix = _HPDF_Page_GetTransMatrixPtr
      .asFunction<HPDF_TransMatrix Function(HPDF_Page)>();

  double HPDF_Page_GetLineWidth(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetLineWidth(
      page,
    );
  }

  late final _HPDF_Page_GetLineWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetLineWidth');
  late final _HPDF_Page_GetLineWidth =
      _HPDF_Page_GetLineWidthPtr.asFunction<double Function(HPDF_Page)>();

  int HPDF_Page_GetLineCap(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetLineCap(
      page,
    );
  }

  late final _HPDF_Page_GetLineCapPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Page)>>(
          'HPDF_Page_GetLineCap');
  late final _HPDF_Page_GetLineCap =
      _HPDF_Page_GetLineCapPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_GetLineJoin(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetLineJoin(
      page,
    );
  }

  late final _HPDF_Page_GetLineJoinPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Page)>>(
          'HPDF_Page_GetLineJoin');
  late final _HPDF_Page_GetLineJoin =
      _HPDF_Page_GetLineJoinPtr.asFunction<int Function(HPDF_Page)>();

  double HPDF_Page_GetMiterLimit(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetMiterLimit(
      page,
    );
  }

  late final _HPDF_Page_GetMiterLimitPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetMiterLimit');
  late final _HPDF_Page_GetMiterLimit =
      _HPDF_Page_GetMiterLimitPtr.asFunction<double Function(HPDF_Page)>();

  HPDF_DashMode HPDF_Page_GetDash(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetDash(
      page,
    );
  }

  late final _HPDF_Page_GetDashPtr =
      _lookup<ffi.NativeFunction<HPDF_DashMode Function(HPDF_Page)>>(
          'HPDF_Page_GetDash');
  late final _HPDF_Page_GetDash =
      _HPDF_Page_GetDashPtr.asFunction<HPDF_DashMode Function(HPDF_Page)>();

  double HPDF_Page_GetFlat(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetFlat(
      page,
    );
  }

  late final _HPDF_Page_GetFlatPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetFlat');
  late final _HPDF_Page_GetFlat =
      _HPDF_Page_GetFlatPtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetCharSpace(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCharSpace(
      page,
    );
  }

  late final _HPDF_Page_GetCharSpacePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetCharSpace');
  late final _HPDF_Page_GetCharSpace =
      _HPDF_Page_GetCharSpacePtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetWordSpace(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetWordSpace(
      page,
    );
  }

  late final _HPDF_Page_GetWordSpacePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetWordSpace');
  late final _HPDF_Page_GetWordSpace =
      _HPDF_Page_GetWordSpacePtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetHorizontalScalling(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetHorizontalScalling(
      page,
    );
  }

  late final _HPDF_Page_GetHorizontalScallingPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetHorizontalScalling');
  late final _HPDF_Page_GetHorizontalScalling =
      _HPDF_Page_GetHorizontalScallingPtr.asFunction<
          double Function(HPDF_Page)>();

  double HPDF_Page_GetTextLeading(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTextLeading(
      page,
    );
  }

  late final _HPDF_Page_GetTextLeadingPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetTextLeading');
  late final _HPDF_Page_GetTextLeading =
      _HPDF_Page_GetTextLeadingPtr.asFunction<double Function(HPDF_Page)>();

  int HPDF_Page_GetTextRenderingMode(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTextRenderingMode(
      page,
    );
  }

  late final _HPDF_Page_GetTextRenderingModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Page)>>(
          'HPDF_Page_GetTextRenderingMode');
  late final _HPDF_Page_GetTextRenderingMode =
      _HPDF_Page_GetTextRenderingModePtr.asFunction<int Function(HPDF_Page)>();

  double HPDF_Page_GetTextRaise(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTextRaise(
      page,
    );
  }

  late final _HPDF_Page_GetTextRaisePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetTextRaise');
  late final _HPDF_Page_GetTextRaise =
      _HPDF_Page_GetTextRaisePtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetTextRise(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTextRise(
      page,
    );
  }

  late final _HPDF_Page_GetTextRisePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetTextRise');
  late final _HPDF_Page_GetTextRise =
      _HPDF_Page_GetTextRisePtr.asFunction<double Function(HPDF_Page)>();

  HPDF_RGBColor HPDF_Page_GetRGBFill(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetRGBFill(
      page,
    );
  }

  late final _HPDF_Page_GetRGBFillPtr =
      _lookup<ffi.NativeFunction<HPDF_RGBColor Function(HPDF_Page)>>(
          'HPDF_Page_GetRGBFill');
  late final _HPDF_Page_GetRGBFill =
      _HPDF_Page_GetRGBFillPtr.asFunction<HPDF_RGBColor Function(HPDF_Page)>();

  HPDF_RGBColor HPDF_Page_GetRGBStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetRGBStroke(
      page,
    );
  }

  late final _HPDF_Page_GetRGBStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_RGBColor Function(HPDF_Page)>>(
          'HPDF_Page_GetRGBStroke');
  late final _HPDF_Page_GetRGBStroke = _HPDF_Page_GetRGBStrokePtr.asFunction<
      HPDF_RGBColor Function(HPDF_Page)>();

  HPDF_CMYKColor HPDF_Page_GetCMYKFill(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCMYKFill(
      page,
    );
  }

  late final _HPDF_Page_GetCMYKFillPtr =
      _lookup<ffi.NativeFunction<HPDF_CMYKColor Function(HPDF_Page)>>(
          'HPDF_Page_GetCMYKFill');
  late final _HPDF_Page_GetCMYKFill = _HPDF_Page_GetCMYKFillPtr.asFunction<
      HPDF_CMYKColor Function(HPDF_Page)>();

  HPDF_CMYKColor HPDF_Page_GetCMYKStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetCMYKStroke(
      page,
    );
  }

  late final _HPDF_Page_GetCMYKStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_CMYKColor Function(HPDF_Page)>>(
          'HPDF_Page_GetCMYKStroke');
  late final _HPDF_Page_GetCMYKStroke = _HPDF_Page_GetCMYKStrokePtr.asFunction<
      HPDF_CMYKColor Function(HPDF_Page)>();

  double HPDF_Page_GetGrayFill(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetGrayFill(
      page,
    );
  }

  late final _HPDF_Page_GetGrayFillPtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetGrayFill');
  late final _HPDF_Page_GetGrayFill =
      _HPDF_Page_GetGrayFillPtr.asFunction<double Function(HPDF_Page)>();

  double HPDF_Page_GetGrayStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetGrayStroke(
      page,
    );
  }

  late final _HPDF_Page_GetGrayStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_REAL Function(HPDF_Page)>>(
          'HPDF_Page_GetGrayStroke');
  late final _HPDF_Page_GetGrayStroke =
      _HPDF_Page_GetGrayStrokePtr.asFunction<double Function(HPDF_Page)>();

  int HPDF_Page_GetStrokingColorSpace(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetStrokingColorSpace(
      page,
    );
  }

  late final _HPDF_Page_GetStrokingColorSpacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Page)>>(
          'HPDF_Page_GetStrokingColorSpace');
  late final _HPDF_Page_GetStrokingColorSpace =
      _HPDF_Page_GetStrokingColorSpacePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_GetFillingColorSpace(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetFillingColorSpace(
      page,
    );
  }

  late final _HPDF_Page_GetFillingColorSpacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HPDF_Page)>>(
          'HPDF_Page_GetFillingColorSpace');
  late final _HPDF_Page_GetFillingColorSpace =
      _HPDF_Page_GetFillingColorSpacePtr.asFunction<int Function(HPDF_Page)>();

  HPDF_TransMatrix HPDF_Page_GetTextMatrix(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetTextMatrix(
      page,
    );
  }

  late final _HPDF_Page_GetTextMatrixPtr =
      _lookup<ffi.NativeFunction<HPDF_TransMatrix Function(HPDF_Page)>>(
          'HPDF_Page_GetTextMatrix');
  late final _HPDF_Page_GetTextMatrix = _HPDF_Page_GetTextMatrixPtr.asFunction<
      HPDF_TransMatrix Function(HPDF_Page)>();

  int HPDF_Page_GetGStateDepth(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GetGStateDepth(
      page,
    );
  }

  late final _HPDF_Page_GetGStateDepthPtr =
      _lookup<ffi.NativeFunction<HPDF_UINT Function(HPDF_Page)>>(
          'HPDF_Page_GetGStateDepth');
  late final _HPDF_Page_GetGStateDepth =
      _HPDF_Page_GetGStateDepthPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_SetLineWidth(
    HPDF_Page page,
    double line_width,
  ) {
    return _HPDF_Page_SetLineWidth(
      page,
      line_width,
    );
  }

  late final _HPDF_Page_SetLineWidthPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetLineWidth');
  late final _HPDF_Page_SetLineWidth =
      _HPDF_Page_SetLineWidthPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetLineCap(
    HPDF_Page page,
    int line_cap,
  ) {
    return _HPDF_Page_SetLineCap(
      page,
      line_cap,
    );
  }

  late final _HPDF_Page_SetLineCapPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, ffi.Int32)>>(
          'HPDF_Page_SetLineCap');
  late final _HPDF_Page_SetLineCap =
      _HPDF_Page_SetLineCapPtr.asFunction<int Function(HPDF_Page, int)>();

  int HPDF_Page_SetLineJoin(
    HPDF_Page page,
    int line_join,
  ) {
    return _HPDF_Page_SetLineJoin(
      page,
      line_join,
    );
  }

  late final _HPDF_Page_SetLineJoinPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, ffi.Int32)>>(
          'HPDF_Page_SetLineJoin');
  late final _HPDF_Page_SetLineJoin =
      _HPDF_Page_SetLineJoinPtr.asFunction<int Function(HPDF_Page, int)>();

  int HPDF_Page_SetMiterLimit(
    HPDF_Page page,
    double miter_limit,
  ) {
    return _HPDF_Page_SetMiterLimit(
      page,
      miter_limit,
    );
  }

  late final _HPDF_Page_SetMiterLimitPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetMiterLimit');
  late final _HPDF_Page_SetMiterLimit =
      _HPDF_Page_SetMiterLimitPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetDash(
    HPDF_Page page,
    ffi.Pointer<HPDF_REAL> dash_ptn,
    int num_param,
    double phase,
  ) {
    return _HPDF_Page_SetDash(
      page,
      dash_ptn,
      num_param,
      phase,
    );
  }

  late final _HPDF_Page_SetDashPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, ffi.Pointer<HPDF_REAL>, HPDF_UINT,
              HPDF_REAL)>>('HPDF_Page_SetDash');
  late final _HPDF_Page_SetDash = _HPDF_Page_SetDashPtr.asFunction<
      int Function(HPDF_Page, ffi.Pointer<HPDF_REAL>, int, double)>();

  int HPDF_Page_SetFlat(
    HPDF_Page page,
    double flatness,
  ) {
    return _HPDF_Page_SetFlat(
      page,
      flatness,
    );
  }

  late final _HPDF_Page_SetFlatPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetFlat');
  late final _HPDF_Page_SetFlat =
      _HPDF_Page_SetFlatPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetExtGState(
    HPDF_Page page,
    HPDF_ExtGState ext_gstate,
  ) {
    return _HPDF_Page_SetExtGState(
      page,
      ext_gstate,
    );
  }

  late final _HPDF_Page_SetExtGStatePtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_ExtGState)>>(
      'HPDF_Page_SetExtGState');
  late final _HPDF_Page_SetExtGState = _HPDF_Page_SetExtGStatePtr.asFunction<
      int Function(HPDF_Page, HPDF_ExtGState)>();

  int HPDF_Page_SetShading(
    HPDF_Page page,
    HPDF_Shading shading,
  ) {
    return _HPDF_Page_SetShading(
      page,
      shading,
    );
  }

  late final _HPDF_Page_SetShadingPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_Shading)>>(
      'HPDF_Page_SetShading');
  late final _HPDF_Page_SetShading = _HPDF_Page_SetShadingPtr.asFunction<
      int Function(HPDF_Page, HPDF_Shading)>();

  int HPDF_Page_GSave(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GSave(
      page,
    );
  }

  late final _HPDF_Page_GSavePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_GSave');
  late final _HPDF_Page_GSave =
      _HPDF_Page_GSavePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_GRestore(
    HPDF_Page page,
  ) {
    return _HPDF_Page_GRestore(
      page,
    );
  }

  late final _HPDF_Page_GRestorePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_GRestore');
  late final _HPDF_Page_GRestore =
      _HPDF_Page_GRestorePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Concat(
    HPDF_Page page,
    double a,
    double b,
    double c,
    double d,
    double x,
    double y,
  ) {
    return _HPDF_Page_Concat(
      page,
      a,
      b,
      c,
      d,
      x,
      y,
    );
  }

  late final _HPDF_Page_ConcatPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_Concat');
  late final _HPDF_Page_Concat = _HPDF_Page_ConcatPtr.asFunction<
      int Function(
          HPDF_Page, double, double, double, double, double, double)>();

  int HPDF_Page_MoveTo(
    HPDF_Page page,
    double x,
    double y,
  ) {
    return _HPDF_Page_MoveTo(
      page,
      x,
      y,
    );
  }

  late final _HPDF_Page_MoveToPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_MoveTo');
  late final _HPDF_Page_MoveTo = _HPDF_Page_MoveToPtr.asFunction<
      int Function(HPDF_Page, double, double)>();

  int HPDF_Page_LineTo(
    HPDF_Page page,
    double x,
    double y,
  ) {
    return _HPDF_Page_LineTo(
      page,
      x,
      y,
    );
  }

  late final _HPDF_Page_LineToPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_LineTo');
  late final _HPDF_Page_LineTo = _HPDF_Page_LineToPtr.asFunction<
      int Function(HPDF_Page, double, double)>();

  int HPDF_Page_CurveTo(
    HPDF_Page page,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _HPDF_Page_CurveTo(
      page,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _HPDF_Page_CurveToPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_CurveTo');
  late final _HPDF_Page_CurveTo = _HPDF_Page_CurveToPtr.asFunction<
      int Function(
          HPDF_Page, double, double, double, double, double, double)>();

  int HPDF_Page_CurveTo2(
    HPDF_Page page,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _HPDF_Page_CurveTo2(
      page,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _HPDF_Page_CurveTo2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_CurveTo2');
  late final _HPDF_Page_CurveTo2 = _HPDF_Page_CurveTo2Ptr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  int HPDF_Page_CurveTo3(
    HPDF_Page page,
    double x1,
    double y1,
    double x3,
    double y3,
  ) {
    return _HPDF_Page_CurveTo3(
      page,
      x1,
      y1,
      x3,
      y3,
    );
  }

  late final _HPDF_Page_CurveTo3Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_CurveTo3');
  late final _HPDF_Page_CurveTo3 = _HPDF_Page_CurveTo3Ptr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  int HPDF_Page_ClosePath(
    HPDF_Page page,
  ) {
    return _HPDF_Page_ClosePath(
      page,
    );
  }

  late final _HPDF_Page_ClosePathPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_ClosePath');
  late final _HPDF_Page_ClosePath =
      _HPDF_Page_ClosePathPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Rectangle(
    HPDF_Page page,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _HPDF_Page_Rectangle(
      page,
      x,
      y,
      width,
      height,
    );
  }

  late final _HPDF_Page_RectanglePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_Rectangle');
  late final _HPDF_Page_Rectangle = _HPDF_Page_RectanglePtr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  int HPDF_Page_Stroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Stroke(
      page,
    );
  }

  late final _HPDF_Page_StrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_Stroke');
  late final _HPDF_Page_Stroke =
      _HPDF_Page_StrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_ClosePathStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_ClosePathStroke(
      page,
    );
  }

  late final _HPDF_Page_ClosePathStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_ClosePathStroke');
  late final _HPDF_Page_ClosePathStroke =
      _HPDF_Page_ClosePathStrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Fill(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Fill(
      page,
    );
  }

  late final _HPDF_Page_FillPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_Fill');
  late final _HPDF_Page_Fill =
      _HPDF_Page_FillPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Eofill(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Eofill(
      page,
    );
  }

  late final _HPDF_Page_EofillPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_Eofill');
  late final _HPDF_Page_Eofill =
      _HPDF_Page_EofillPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_FillStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_FillStroke(
      page,
    );
  }

  late final _HPDF_Page_FillStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_FillStroke');
  late final _HPDF_Page_FillStroke =
      _HPDF_Page_FillStrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_EofillStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_EofillStroke(
      page,
    );
  }

  late final _HPDF_Page_EofillStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_EofillStroke');
  late final _HPDF_Page_EofillStroke =
      _HPDF_Page_EofillStrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_ClosePathFillStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_ClosePathFillStroke(
      page,
    );
  }

  late final _HPDF_Page_ClosePathFillStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_ClosePathFillStroke');
  late final _HPDF_Page_ClosePathFillStroke =
      _HPDF_Page_ClosePathFillStrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_ClosePathEofillStroke(
    HPDF_Page page,
  ) {
    return _HPDF_Page_ClosePathEofillStroke(
      page,
    );
  }

  late final _HPDF_Page_ClosePathEofillStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_ClosePathEofillStroke');
  late final _HPDF_Page_ClosePathEofillStroke =
      _HPDF_Page_ClosePathEofillStrokePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_EndPath(
    HPDF_Page page,
  ) {
    return _HPDF_Page_EndPath(
      page,
    );
  }

  late final _HPDF_Page_EndPathPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_EndPath');
  late final _HPDF_Page_EndPath =
      _HPDF_Page_EndPathPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Clip(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Clip(
      page,
    );
  }

  late final _HPDF_Page_ClipPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_Clip');
  late final _HPDF_Page_Clip =
      _HPDF_Page_ClipPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_Eoclip(
    HPDF_Page page,
  ) {
    return _HPDF_Page_Eoclip(
      page,
    );
  }

  late final _HPDF_Page_EoclipPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_Eoclip');
  late final _HPDF_Page_Eoclip =
      _HPDF_Page_EoclipPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_BeginText(
    HPDF_Page page,
  ) {
    return _HPDF_Page_BeginText(
      page,
    );
  }

  late final _HPDF_Page_BeginTextPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_BeginText');
  late final _HPDF_Page_BeginText =
      _HPDF_Page_BeginTextPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_EndText(
    HPDF_Page page,
  ) {
    return _HPDF_Page_EndText(
      page,
    );
  }

  late final _HPDF_Page_EndTextPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_EndText');
  late final _HPDF_Page_EndText =
      _HPDF_Page_EndTextPtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_SetCharSpace(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetCharSpace(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetCharSpacePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetCharSpace');
  late final _HPDF_Page_SetCharSpace =
      _HPDF_Page_SetCharSpacePtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetWordSpace(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetWordSpace(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetWordSpacePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetWordSpace');
  late final _HPDF_Page_SetWordSpace =
      _HPDF_Page_SetWordSpacePtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetHorizontalScalling(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetHorizontalScalling(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetHorizontalScallingPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetHorizontalScalling');
  late final _HPDF_Page_SetHorizontalScalling =
      _HPDF_Page_SetHorizontalScallingPtr.asFunction<
          int Function(HPDF_Page, double)>();

  int HPDF_Page_SetTextLeading(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetTextLeading(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetTextLeadingPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetTextLeading');
  late final _HPDF_Page_SetTextLeading = _HPDF_Page_SetTextLeadingPtr
      .asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetFontAndSize(
    HPDF_Page page,
    HPDF_Font font,
    double size,
  ) {
    return _HPDF_Page_SetFontAndSize(
      page,
      font,
      size,
    );
  }

  late final _HPDF_Page_SetFontAndSizePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_Font, HPDF_REAL)>>('HPDF_Page_SetFontAndSize');
  late final _HPDF_Page_SetFontAndSize = _HPDF_Page_SetFontAndSizePtr
      .asFunction<int Function(HPDF_Page, HPDF_Font, double)>();

  int HPDF_Page_SetTextRenderingMode(
    HPDF_Page page,
    int mode,
  ) {
    return _HPDF_Page_SetTextRenderingMode(
      page,
      mode,
    );
  }

  late final _HPDF_Page_SetTextRenderingModePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, ffi.Int32)>>(
          'HPDF_Page_SetTextRenderingMode');
  late final _HPDF_Page_SetTextRenderingMode =
      _HPDF_Page_SetTextRenderingModePtr.asFunction<
          int Function(HPDF_Page, int)>();

  int HPDF_Page_SetTextRise(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetTextRise(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetTextRisePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetTextRise');
  late final _HPDF_Page_SetTextRise =
      _HPDF_Page_SetTextRisePtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetTextRaise(
    HPDF_Page page,
    double value,
  ) {
    return _HPDF_Page_SetTextRaise(
      page,
      value,
    );
  }

  late final _HPDF_Page_SetTextRaisePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetTextRaise');
  late final _HPDF_Page_SetTextRaise =
      _HPDF_Page_SetTextRaisePtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_MoveTextPos(
    HPDF_Page page,
    double x,
    double y,
  ) {
    return _HPDF_Page_MoveTextPos(
      page,
      x,
      y,
    );
  }

  late final _HPDF_Page_MoveTextPosPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_MoveTextPos');
  late final _HPDF_Page_MoveTextPos = _HPDF_Page_MoveTextPosPtr.asFunction<
      int Function(HPDF_Page, double, double)>();

  int HPDF_Page_MoveTextPos2(
    HPDF_Page page,
    double x,
    double y,
  ) {
    return _HPDF_Page_MoveTextPos2(
      page,
      x,
      y,
    );
  }

  late final _HPDF_Page_MoveTextPos2Ptr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_MoveTextPos2');
  late final _HPDF_Page_MoveTextPos2 = _HPDF_Page_MoveTextPos2Ptr.asFunction<
      int Function(HPDF_Page, double, double)>();

  int HPDF_Page_SetTextMatrix(
    HPDF_Page page,
    double a,
    double b,
    double c,
    double d,
    double x,
    double y,
  ) {
    return _HPDF_Page_SetTextMatrix(
      page,
      a,
      b,
      c,
      d,
      x,
      y,
    );
  }

  late final _HPDF_Page_SetTextMatrixPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_SetTextMatrix');
  late final _HPDF_Page_SetTextMatrix = _HPDF_Page_SetTextMatrixPtr.asFunction<
      int Function(
          HPDF_Page, double, double, double, double, double, double)>();

  int HPDF_Page_MoveToNextLine(
    HPDF_Page page,
  ) {
    return _HPDF_Page_MoveToNextLine(
      page,
    );
  }

  late final _HPDF_Page_MoveToNextLinePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page)>>(
          'HPDF_Page_MoveToNextLine');
  late final _HPDF_Page_MoveToNextLine =
      _HPDF_Page_MoveToNextLinePtr.asFunction<int Function(HPDF_Page)>();

  int HPDF_Page_ShowText(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Page_ShowText(
      page,
      text,
    );
  }

  late final _HPDF_Page_ShowTextPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, ffi.Pointer<ffi.Char>)>>('HPDF_Page_ShowText');
  late final _HPDF_Page_ShowText = _HPDF_Page_ShowTextPtr.asFunction<
      int Function(HPDF_Page, ffi.Pointer<ffi.Char>)>();

  int HPDF_Page_ShowTextNextLine(
    HPDF_Page page,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Page_ShowTextNextLine(
      page,
      text,
    );
  }

  late final _HPDF_Page_ShowTextNextLinePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, ffi.Pointer<ffi.Char>)>>('HPDF_Page_ShowTextNextLine');
  late final _HPDF_Page_ShowTextNextLine = _HPDF_Page_ShowTextNextLinePtr
      .asFunction<int Function(HPDF_Page, ffi.Pointer<ffi.Char>)>();

  int HPDF_Page_ShowTextNextLineEx(
    HPDF_Page page,
    double word_space,
    double char_space,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Page_ShowTextNextLineEx(
      page,
      word_space,
      char_space,
      text,
    );
  }

  late final _HPDF_Page_ShowTextNextLineExPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL,
              ffi.Pointer<ffi.Char>)>>('HPDF_Page_ShowTextNextLineEx');
  late final _HPDF_Page_ShowTextNextLineEx =
      _HPDF_Page_ShowTextNextLineExPtr.asFunction<
          int Function(HPDF_Page, double, double, ffi.Pointer<ffi.Char>)>();

  int HPDF_Page_SetGrayFill(
    HPDF_Page page,
    double gray,
  ) {
    return _HPDF_Page_SetGrayFill(
      page,
      gray,
    );
  }

  late final _HPDF_Page_SetGrayFillPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetGrayFill');
  late final _HPDF_Page_SetGrayFill =
      _HPDF_Page_SetGrayFillPtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetGrayStroke(
    HPDF_Page page,
    double gray,
  ) {
    return _HPDF_Page_SetGrayStroke(
      page,
      gray,
    );
  }

  late final _HPDF_Page_SetGrayStrokePtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_REAL)>>(
          'HPDF_Page_SetGrayStroke');
  late final _HPDF_Page_SetGrayStroke =
      _HPDF_Page_SetGrayStrokePtr.asFunction<int Function(HPDF_Page, double)>();

  int HPDF_Page_SetRGBFill(
    HPDF_Page page,
    double r,
    double g,
    double b,
  ) {
    return _HPDF_Page_SetRGBFill(
      page,
      r,
      g,
      b,
    );
  }

  late final _HPDF_Page_SetRGBFillPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_SetRGBFill');
  late final _HPDF_Page_SetRGBFill = _HPDF_Page_SetRGBFillPtr.asFunction<
      int Function(HPDF_Page, double, double, double)>();

  int HPDF_Page_SetRGBStroke(
    HPDF_Page page,
    double r,
    double g,
    double b,
  ) {
    return _HPDF_Page_SetRGBStroke(
      page,
      r,
      g,
      b,
    );
  }

  late final _HPDF_Page_SetRGBStrokePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_SetRGBStroke');
  late final _HPDF_Page_SetRGBStroke = _HPDF_Page_SetRGBStrokePtr.asFunction<
      int Function(HPDF_Page, double, double, double)>();

  int HPDF_Page_SetCMYKFill(
    HPDF_Page page,
    double c,
    double m,
    double y,
    double k,
  ) {
    return _HPDF_Page_SetCMYKFill(
      page,
      c,
      m,
      y,
      k,
    );
  }

  late final _HPDF_Page_SetCMYKFillPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_SetCMYKFill');
  late final _HPDF_Page_SetCMYKFill = _HPDF_Page_SetCMYKFillPtr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  int HPDF_Page_SetCMYKStroke(
    HPDF_Page page,
    double c,
    double m,
    double y,
    double k,
  ) {
    return _HPDF_Page_SetCMYKStroke(
      page,
      c,
      m,
      y,
      k,
    );
  }

  late final _HPDF_Page_SetCMYKStrokePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_SetCMYKStroke');
  late final _HPDF_Page_SetCMYKStroke = _HPDF_Page_SetCMYKStrokePtr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  HPDF_Shading HPDF_Shading_New(
    HPDF_Doc pdf,
    int type,
    int colorSpace,
    double xMin,
    double xMax,
    double yMin,
    double yMax,
  ) {
    return _HPDF_Shading_New(
      pdf,
      type,
      colorSpace,
      xMin,
      xMax,
      yMin,
      yMax,
    );
  }

  late final _HPDF_Shading_NewPtr = _lookup<
      ffi.NativeFunction<
          HPDF_Shading Function(HPDF_Doc, ffi.Int32, ffi.Int32, HPDF_REAL,
              HPDF_REAL, HPDF_REAL, HPDF_REAL)>>('HPDF_Shading_New');
  late final _HPDF_Shading_New = _HPDF_Shading_NewPtr.asFunction<
      HPDF_Shading Function(
          HPDF_Doc, int, int, double, double, double, double)>();

  int HPDF_Shading_AddVertexRGB(
    HPDF_Shading shading,
    int edgeFlag,
    double x,
    double y,
    int r,
    int g,
    int b,
  ) {
    return _HPDF_Shading_AddVertexRGB(
      shading,
      edgeFlag,
      x,
      y,
      r,
      g,
      b,
    );
  }

  late final _HPDF_Shading_AddVertexRGBPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Shading,
              ffi.Int32,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_UINT8,
              HPDF_UINT8,
              HPDF_UINT8)>>('HPDF_Shading_AddVertexRGB');
  late final _HPDF_Shading_AddVertexRGB =
      _HPDF_Shading_AddVertexRGBPtr.asFunction<
          int Function(HPDF_Shading, int, double, double, int, int, int)>();

  int HPDF_Page_ExecuteXObject(
    HPDF_Page page,
    HPDF_XObject obj,
  ) {
    return _HPDF_Page_ExecuteXObject(
      page,
      obj,
    );
  }

  late final _HPDF_Page_ExecuteXObjectPtr = _lookup<
          ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_XObject)>>(
      'HPDF_Page_ExecuteXObject');
  late final _HPDF_Page_ExecuteXObject = _HPDF_Page_ExecuteXObjectPtr
      .asFunction<int Function(HPDF_Page, HPDF_XObject)>();

  int HPDF_Page_New_Content_Stream(
    HPDF_Page page,
    ffi.Pointer<HPDF_Dict> new_stream,
  ) {
    return _HPDF_Page_New_Content_Stream(
      page,
      new_stream,
    );
  }

  late final _HPDF_Page_New_Content_StreamPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page,
              ffi.Pointer<HPDF_Dict>)>>('HPDF_Page_New_Content_Stream');
  late final _HPDF_Page_New_Content_Stream = _HPDF_Page_New_Content_StreamPtr
      .asFunction<int Function(HPDF_Page, ffi.Pointer<HPDF_Dict>)>();

  int HPDF_Page_Insert_Shared_Content_Stream(
    HPDF_Page page,
    HPDF_Dict shared_stream,
  ) {
    return _HPDF_Page_Insert_Shared_Content_Stream(
      page,
      shared_stream,
    );
  }

  late final _HPDF_Page_Insert_Shared_Content_StreamPtr =
      _lookup<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Page, HPDF_Dict)>>(
          'HPDF_Page_Insert_Shared_Content_Stream');
  late final _HPDF_Page_Insert_Shared_Content_Stream =
      _HPDF_Page_Insert_Shared_Content_StreamPtr.asFunction<
          int Function(HPDF_Page, HPDF_Dict)>();

  int HPDF_Page_DrawImage(
    HPDF_Page page,
    HPDF_Image image,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _HPDF_Page_DrawImage(
      page,
      image,
      x,
      y,
      width,
      height,
    );
  }

  late final _HPDF_Page_DrawImagePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_Image, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL)>>('HPDF_Page_DrawImage');
  late final _HPDF_Page_DrawImage = _HPDF_Page_DrawImagePtr.asFunction<
      int Function(HPDF_Page, HPDF_Image, double, double, double, double)>();

  int HPDF_Page_Circle(
    HPDF_Page page,
    double x,
    double y,
    double ray,
  ) {
    return _HPDF_Page_Circle(
      page,
      x,
      y,
      ray,
    );
  }

  late final _HPDF_Page_CirclePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL)>>('HPDF_Page_Circle');
  late final _HPDF_Page_Circle = _HPDF_Page_CirclePtr.asFunction<
      int Function(HPDF_Page, double, double, double)>();

  int HPDF_Page_Ellipse(
    HPDF_Page page,
    double x,
    double y,
    double xray,
    double yray,
  ) {
    return _HPDF_Page_Ellipse(
      page,
      x,
      y,
      xray,
      yray,
    );
  }

  late final _HPDF_Page_EllipsePtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_Ellipse');
  late final _HPDF_Page_Ellipse = _HPDF_Page_EllipsePtr.asFunction<
      int Function(HPDF_Page, double, double, double, double)>();

  int HPDF_Page_Arc(
    HPDF_Page page,
    double x,
    double y,
    double ray,
    double ang1,
    double ang2,
  ) {
    return _HPDF_Page_Arc(
      page,
      x,
      y,
      ray,
      ang1,
      ang2,
    );
  }

  late final _HPDF_Page_ArcPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL, HPDF_REAL,
              HPDF_REAL, HPDF_REAL)>>('HPDF_Page_Arc');
  late final _HPDF_Page_Arc = _HPDF_Page_ArcPtr.asFunction<
      int Function(HPDF_Page, double, double, double, double, double)>();

  int HPDF_Page_TextOut(
    HPDF_Page page,
    double xpos,
    double ypos,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _HPDF_Page_TextOut(
      page,
      xpos,
      ypos,
      text,
    );
  }

  late final _HPDF_Page_TextOutPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, HPDF_REAL, HPDF_REAL,
              ffi.Pointer<ffi.Char>)>>('HPDF_Page_TextOut');
  late final _HPDF_Page_TextOut = _HPDF_Page_TextOutPtr.asFunction<
      int Function(HPDF_Page, double, double, ffi.Pointer<ffi.Char>)>();

  int HPDF_Page_TextRect(
    HPDF_Page page,
    double left,
    double top,
    double right,
    double bottom,
    ffi.Pointer<ffi.Char> text,
    int align,
    ffi.Pointer<HPDF_UINT> len,
  ) {
    return _HPDF_Page_TextRect(
      page,
      left,
      top,
      right,
      bottom,
      text,
      align,
      len,
    );
  }

  late final _HPDF_Page_TextRectPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(
              HPDF_Page,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_REAL,
              HPDF_REAL,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<HPDF_UINT>)>>('HPDF_Page_TextRect');
  late final _HPDF_Page_TextRect = _HPDF_Page_TextRectPtr.asFunction<
      int Function(HPDF_Page, double, double, double, double,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<HPDF_UINT>)>();

  int HPDF_Page_SetSlideShow(
    HPDF_Page page,
    int type,
    double disp_time,
    double trans_time,
  ) {
    return _HPDF_Page_SetSlideShow(
      page,
      type,
      disp_time,
      trans_time,
    );
  }

  late final _HPDF_Page_SetSlideShowPtr = _lookup<
      ffi.NativeFunction<
          HPDF_STATUS Function(HPDF_Page, ffi.Int32, HPDF_REAL,
              HPDF_REAL)>>('HPDF_Page_SetSlideShow');
  late final _HPDF_Page_SetSlideShow = _HPDF_Page_SetSlideShowPtr.asFunction<
      int Function(HPDF_Page, int, double, double)>();

  HPDF_OutputIntent HPDF_ICC_LoadIccFromMem(
    HPDF_Doc pdf,
    HPDF_MMgr mmgr,
    HPDF_Stream iccdata,
    HPDF_Xref xref,
    int numcomponent,
  ) {
    return _HPDF_ICC_LoadIccFromMem(
      pdf,
      mmgr,
      iccdata,
      xref,
      numcomponent,
    );
  }

  late final _HPDF_ICC_LoadIccFromMemPtr = _lookup<
      ffi.NativeFunction<
          HPDF_OutputIntent Function(HPDF_Doc, HPDF_MMgr, HPDF_Stream,
              HPDF_Xref, ffi.Int)>>('HPDF_ICC_LoadIccFromMem');
  late final _HPDF_ICC_LoadIccFromMem = _HPDF_ICC_LoadIccFromMemPtr.asFunction<
      HPDF_OutputIntent Function(
          HPDF_Doc, HPDF_MMgr, HPDF_Stream, HPDF_Xref, int)>();

  HPDF_OutputIntent HPDF_LoadIccProfileFromFile(
    HPDF_Doc pdf,
    ffi.Pointer<ffi.Char> icc_file_name,
    int numcomponent,
  ) {
    return _HPDF_LoadIccProfileFromFile(
      pdf,
      icc_file_name,
      numcomponent,
    );
  }

  late final _HPDF_LoadIccProfileFromFilePtr = _lookup<
      ffi.NativeFunction<
          HPDF_OutputIntent Function(HPDF_Doc, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('HPDF_LoadIccProfileFromFile');
  late final _HPDF_LoadIccProfileFromFile =
      _HPDF_LoadIccProfileFromFilePtr.asFunction<
          HPDF_OutputIntent Function(HPDF_Doc, ffi.Pointer<ffi.Char>, int)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef uintptr_t = ffi.UnsignedLongLong;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef errno_t = ffi.Int;
typedef rsize_t = ffi.Size;
typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef _onexit_t = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef _purecall_handler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef _invalid_parameter_handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.WChar>, ffi.UnsignedInt, uintptr_t)>>;

class _div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class _ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class _lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef div_t = _div_t;
typedef ldiv_t = _ldiv_t;
typedef lldiv_t = _lldiv_t;

class _LDOUBLE extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.UnsignedChar> ld;
}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> ld12;
}

class _HPDF_Point extends ffi.Struct {
  @HPDF_REAL()
  external double x;

  @HPDF_REAL()
  external double y;
}

typedef HPDF_REAL = ffi.Float;

class HPDF_Rect extends ffi.Struct {
  @HPDF_REAL()
  external double left;

  @HPDF_REAL()
  external double bottom;

  @HPDF_REAL()
  external double right;

  @HPDF_REAL()
  external double top;
}

class _HPDF_Point3D extends ffi.Struct {
  @HPDF_REAL()
  external double x;

  @HPDF_REAL()
  external double y;

  @HPDF_REAL()
  external double z;
}

class _HPDF_Date extends ffi.Struct {
  @HPDF_INT()
  external int year;

  @HPDF_INT()
  external int month;

  @HPDF_INT()
  external int day;

  @HPDF_INT()
  external int hour;

  @HPDF_INT()
  external int minutes;

  @HPDF_INT()
  external int seconds;

  @ffi.Char()
  external int ind;

  @HPDF_INT()
  external int off_hour;

  @HPDF_INT()
  external int off_minutes;
}

typedef HPDF_INT = ffi.Int;

abstract class _HPDF_InfoType {
  static const int HPDF_INFO_CREATION_DATE = 0;
  static const int HPDF_INFO_MOD_DATE = 1;
  static const int HPDF_INFO_AUTHOR = 2;
  static const int HPDF_INFO_CREATOR = 3;
  static const int HPDF_INFO_PRODUCER = 4;
  static const int HPDF_INFO_TITLE = 5;
  static const int HPDF_INFO_SUBJECT = 6;
  static const int HPDF_INFO_KEYWORDS = 7;
  static const int HPDF_INFO_TRAPPED = 8;
  static const int HPDF_INFO_GTS_PDFX = 9;
  static const int HPDF_INFO_EOF = 10;
}

abstract class _HPDF_PDFA_TYPE {
  static const int HPDF_PDFA_1A = 0;
  static const int HPDF_PDFA_1B = 1;
}

abstract class _HPDF_PdfVer {
  static const int HPDF_VER_12 = 0;
  static const int HPDF_VER_13 = 1;
  static const int HPDF_VER_14 = 2;
  static const int HPDF_VER_15 = 3;
  static const int HPDF_VER_16 = 4;
  static const int HPDF_VER_17 = 5;
  static const int HPDF_VER_EOF = 6;
}

abstract class _HPDF_EncryptMode {
  static const int HPDF_ENCRYPT_R2 = 2;
  static const int HPDF_ENCRYPT_R3 = 3;
}

class _HPDF_TextWidth extends ffi.Struct {
  @HPDF_UINT()
  external int numchars;

  @HPDF_UINT()
  external int numwords;

  @HPDF_UINT()
  external int width;

  @HPDF_UINT()
  external int numspace;
}

typedef HPDF_UINT = ffi.UnsignedInt;

class _HPDF_DashMode extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<HPDF_REAL> ptn;

  @HPDF_UINT()
  external int num_ptn;

  @HPDF_REAL()
  external double phase;
}

class _HPDF_TransMatrix extends ffi.Struct {
  @HPDF_REAL()
  external double a;

  @HPDF_REAL()
  external double b;

  @HPDF_REAL()
  external double c;

  @HPDF_REAL()
  external double d;

  @HPDF_REAL()
  external double x;

  @HPDF_REAL()
  external double y;
}

class _HPDF_3DMatrix extends ffi.Struct {
  @HPDF_REAL()
  external double a;

  @HPDF_REAL()
  external double b;

  @HPDF_REAL()
  external double c;

  @HPDF_REAL()
  external double d;

  @HPDF_REAL()
  external double e;

  @HPDF_REAL()
  external double f;

  @HPDF_REAL()
  external double g;

  @HPDF_REAL()
  external double h;

  @HPDF_REAL()
  external double i;

  @HPDF_REAL()
  external double tx;

  @HPDF_REAL()
  external double ty;

  @HPDF_REAL()
  external double tz;
}

abstract class _HPDF_ColorSpace {
  static const int HPDF_CS_DEVICE_GRAY = 0;
  static const int HPDF_CS_DEVICE_RGB = 1;
  static const int HPDF_CS_DEVICE_CMYK = 2;
  static const int HPDF_CS_CAL_GRAY = 3;
  static const int HPDF_CS_CAL_RGB = 4;
  static const int HPDF_CS_LAB = 5;
  static const int HPDF_CS_ICC_BASED = 6;
  static const int HPDF_CS_SEPARATION = 7;
  static const int HPDF_CS_DEVICE_N = 8;
  static const int HPDF_CS_INDEXED = 9;
  static const int HPDF_CS_PATTERN = 10;
  static const int HPDF_CS_EOF = 11;
}

class _HPDF_RGBColor extends ffi.Struct {
  @HPDF_REAL()
  external double r;

  @HPDF_REAL()
  external double g;

  @HPDF_REAL()
  external double b;
}

class _HPDF_CMYKColor extends ffi.Struct {
  @HPDF_REAL()
  external double c;

  @HPDF_REAL()
  external double m;

  @HPDF_REAL()
  external double y;

  @HPDF_REAL()
  external double k;
}

abstract class _HPDF_LineCap {
  static const int HPDF_BUTT_END = 0;
  static const int HPDF_ROUND_END = 1;
  static const int HPDF_PROJECTING_SQUARE_END = 2;
  static const int HPDF_LINECAP_EOF = 3;
}

abstract class _HPDF_LineJoin {
  static const int HPDF_MITER_JOIN = 0;
  static const int HPDF_ROUND_JOIN = 1;
  static const int HPDF_BEVEL_JOIN = 2;
  static const int HPDF_LINEJOIN_EOF = 3;
}

abstract class _HPDF_TextRenderingMode {
  static const int HPDF_FILL = 0;
  static const int HPDF_STROKE = 1;
  static const int HPDF_FILL_THEN_STROKE = 2;
  static const int HPDF_INVISIBLE = 3;
  static const int HPDF_FILL_CLIPPING = 4;
  static const int HPDF_STROKE_CLIPPING = 5;
  static const int HPDF_FILL_STROKE_CLIPPING = 6;
  static const int HPDF_CLIPPING = 7;
  static const int HPDF_RENDERING_MODE_EOF = 8;
}

abstract class _HPDF_WritingMode {
  static const int HPDF_WMODE_HORIZONTAL = 0;
  static const int HPDF_WMODE_VERTICAL = 1;
  static const int HPDF_WMODE_EOF = 2;
}

abstract class _HPDF_PageLayout {
  static const int HPDF_PAGE_LAYOUT_SINGLE = 0;
  static const int HPDF_PAGE_LAYOUT_ONE_COLUMN = 1;
  static const int HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT = 2;
  static const int HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT = 3;
  static const int HPDF_PAGE_LAYOUT_TWO_PAGE_LEFT = 4;
  static const int HPDF_PAGE_LAYOUT_TWO_PAGE_RIGHT = 5;
  static const int HPDF_PAGE_LAYOUT_EOF = 6;
}

abstract class _HPDF_PageMode {
  static const int HPDF_PAGE_MODE_USE_NONE = 0;
  static const int HPDF_PAGE_MODE_USE_OUTLINE = 1;
  static const int HPDF_PAGE_MODE_USE_THUMBS = 2;
  static const int HPDF_PAGE_MODE_FULL_SCREEN = 3;
  static const int HPDF_PAGE_MODE_EOF = 4;
}

abstract class _HPDF_PageNumStyle {
  static const int HPDF_PAGE_NUM_STYLE_DECIMAL = 0;
  static const int HPDF_PAGE_NUM_STYLE_UPPER_ROMAN = 1;
  static const int HPDF_PAGE_NUM_STYLE_LOWER_ROMAN = 2;
  static const int HPDF_PAGE_NUM_STYLE_UPPER_LETTERS = 3;
  static const int HPDF_PAGE_NUM_STYLE_LOWER_LETTERS = 4;
  static const int HPDF_PAGE_NUM_STYLE_EOF = 5;
}

abstract class _HPDF_DestinationType {
  static const int HPDF_XYZ = 0;
  static const int HPDF_FIT = 1;
  static const int HPDF_FIT_H = 2;
  static const int HPDF_FIT_V = 3;
  static const int HPDF_FIT_R = 4;
  static const int HPDF_FIT_B = 5;
  static const int HPDF_FIT_BH = 6;
  static const int HPDF_FIT_BV = 7;
  static const int HPDF_DST_EOF = 8;
}

abstract class _HPDF_AnnotType {
  static const int HPDF_ANNOT_TEXT_NOTES = 0;
  static const int HPDF_ANNOT_LINK = 1;
  static const int HPDF_ANNOT_SOUND = 2;
  static const int HPDF_ANNOT_FREE_TEXT = 3;
  static const int HPDF_ANNOT_STAMP = 4;
  static const int HPDF_ANNOT_SQUARE = 5;
  static const int HPDF_ANNOT_CIRCLE = 6;
  static const int HPDF_ANNOT_STRIKE_OUT = 7;
  static const int HPDF_ANNOT_HIGHTLIGHT = 8;
  static const int HPDF_ANNOT_UNDERLINE = 9;
  static const int HPDF_ANNOT_INK = 10;
  static const int HPDF_ANNOT_FILE_ATTACHMENT = 11;
  static const int HPDF_ANNOT_POPUP = 12;
  static const int HPDF_ANNOT_3D = 13;
  static const int HPDF_ANNOT_SQUIGGLY = 14;
  static const int HPDF_ANNOT_LINE = 15;
  static const int HPDF_ANNOT_PROJECTION = 16;
  static const int HPDF_ANNOT_WIDGET = 17;
}

abstract class _HPDF_AnnotFlgs {
  static const int HPDF_ANNOT_INVISIBLE = 0;
  static const int HPDF_ANNOT_HIDDEN = 1;
  static const int HPDF_ANNOT_PRINT = 2;
  static const int HPDF_ANNOT_NOZOOM = 3;
  static const int HPDF_ANNOT_NOROTATE = 4;
  static const int HPDF_ANNOT_NOVIEW = 5;
  static const int HPDF_ANNOT_READONLY = 6;
}

abstract class _HPDF_AnnotHighlightMode {
  static const int HPDF_ANNOT_NO_HIGHTLIGHT = 0;
  static const int HPDF_ANNOT_INVERT_BOX = 1;
  static const int HPDF_ANNOT_INVERT_BORDER = 2;
  static const int HPDF_ANNOT_DOWN_APPEARANCE = 3;
  static const int HPDF_ANNOT_HIGHTLIGHT_MODE_EOF = 4;
}

abstract class _HPDF_AnnotIcon {
  static const int HPDF_ANNOT_ICON_COMMENT = 0;
  static const int HPDF_ANNOT_ICON_KEY = 1;
  static const int HPDF_ANNOT_ICON_NOTE = 2;
  static const int HPDF_ANNOT_ICON_HELP = 3;
  static const int HPDF_ANNOT_ICON_NEW_PARAGRAPH = 4;
  static const int HPDF_ANNOT_ICON_PARAGRAPH = 5;
  static const int HPDF_ANNOT_ICON_INSERT = 6;
  static const int HPDF_ANNOT_ICON_EOF = 7;
}

abstract class _HPDF_AnnotIntent {
  static const int HPDF_ANNOT_INTENT_FREETEXTCALLOUT = 0;
  static const int HPDF_ANNOT_INTENT_FREETEXTTYPEWRITER = 1;
  static const int HPDF_ANNOT_INTENT_LINEARROW = 2;
  static const int HPDF_ANNOT_INTENT_LINEDIMENSION = 3;
  static const int HPDF_ANNOT_INTENT_POLYGONCLOUD = 4;
  static const int HPDF_ANNOT_INTENT_POLYLINEDIMENSION = 5;
  static const int HPDF_ANNOT_INTENT_POLYGONDIMENSION = 6;
}

abstract class _HPDF_LineAnnotEndingStyle {
  static const int HPDF_LINE_ANNOT_NONE = 0;
  static const int HPDF_LINE_ANNOT_SQUARE = 1;
  static const int HPDF_LINE_ANNOT_CIRCLE = 2;
  static const int HPDF_LINE_ANNOT_DIAMOND = 3;
  static const int HPDF_LINE_ANNOT_OPENARROW = 4;
  static const int HPDF_LINE_ANNOT_CLOSEDARROW = 5;
  static const int HPDF_LINE_ANNOT_BUTT = 6;
  static const int HPDF_LINE_ANNOT_ROPENARROW = 7;
  static const int HPDF_LINE_ANNOT_RCLOSEDARROW = 8;
  static const int HPDF_LINE_ANNOT_SLASH = 9;
}

abstract class _HPDF_LineAnnotCapPosition {
  static const int HPDF_LINE_ANNOT_CAP_INLINE = 0;
  static const int HPDF_LINE_ANNOT_CAP_TOP = 1;
}

abstract class _HPDF_StampAnnotName {
  static const int HPDF_STAMP_ANNOT_APPROVED = 0;
  static const int HPDF_STAMP_ANNOT_EXPERIMENTAL = 1;
  static const int HPDF_STAMP_ANNOT_NOTAPPROVED = 2;
  static const int HPDF_STAMP_ANNOT_ASIS = 3;
  static const int HPDF_STAMP_ANNOT_EXPIRED = 4;
  static const int HPDF_STAMP_ANNOT_NOTFORPUBLICRELEASE = 5;
  static const int HPDF_STAMP_ANNOT_CONFIDENTIAL = 6;
  static const int HPDF_STAMP_ANNOT_FINAL = 7;
  static const int HPDF_STAMP_ANNOT_SOLD = 8;
  static const int HPDF_STAMP_ANNOT_DEPARTMENTAL = 9;
  static const int HPDF_STAMP_ANNOT_FORCOMMENT = 10;
  static const int HPDF_STAMP_ANNOT_TOPSECRET = 11;
  static const int HPDF_STAMP_ANNOT_DRAFT = 12;
  static const int HPDF_STAMP_ANNOT_FORPUBLICRELEASE = 13;
}

abstract class _HPDF_BSSubtype {
  static const int HPDF_BS_SOLID = 0;
  static const int HPDF_BS_DASHED = 1;
  static const int HPDF_BS_BEVELED = 2;
  static const int HPDF_BS_INSET = 3;
  static const int HPDF_BS_UNDERLINED = 4;
}

abstract class _HPDF_BlendMode {
  static const int HPDF_BM_NORMAL = 0;
  static const int HPDF_BM_MULTIPLY = 1;
  static const int HPDF_BM_SCREEN = 2;
  static const int HPDF_BM_OVERLAY = 3;
  static const int HPDF_BM_DARKEN = 4;
  static const int HPDF_BM_LIGHTEN = 5;
  static const int HPDF_BM_COLOR_DODGE = 6;
  static const int HPDF_BM_COLOR_BUM = 7;
  static const int HPDF_BM_HARD_LIGHT = 8;
  static const int HPDF_BM_SOFT_LIGHT = 9;
  static const int HPDF_BM_DIFFERENCE = 10;
  static const int HPDF_BM_EXCLUSHON = 11;
  static const int HPDF_BM_EOF = 12;
}

abstract class _HPDF_TransitionStyle {
  static const int HPDF_TS_WIPE_RIGHT = 0;
  static const int HPDF_TS_WIPE_UP = 1;
  static const int HPDF_TS_WIPE_LEFT = 2;
  static const int HPDF_TS_WIPE_DOWN = 3;
  static const int HPDF_TS_BARN_DOORS_HORIZONTAL_OUT = 4;
  static const int HPDF_TS_BARN_DOORS_HORIZONTAL_IN = 5;
  static const int HPDF_TS_BARN_DOORS_VERTICAL_OUT = 6;
  static const int HPDF_TS_BARN_DOORS_VERTICAL_IN = 7;
  static const int HPDF_TS_BOX_OUT = 8;
  static const int HPDF_TS_BOX_IN = 9;
  static const int HPDF_TS_BLINDS_HORIZONTAL = 10;
  static const int HPDF_TS_BLINDS_VERTICAL = 11;
  static const int HPDF_TS_DISSOLVE = 12;
  static const int HPDF_TS_GLITTER_RIGHT = 13;
  static const int HPDF_TS_GLITTER_DOWN = 14;
  static const int HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT = 15;
  static const int HPDF_TS_REPLACE = 16;
  static const int HPDF_TS_EOF = 17;
}

abstract class HPDF_PageSizes {
  static const int HPDF_PAGE_SIZE_LETTER = 0;
  static const int HPDF_PAGE_SIZE_LEGAL = 1;
  static const int HPDF_PAGE_SIZE_A3 = 2;
  static const int HPDF_PAGE_SIZE_A4 = 3;
  static const int HPDF_PAGE_SIZE_A5 = 4;
  static const int HPDF_PAGE_SIZE_B4 = 5;
  static const int HPDF_PAGE_SIZE_B5 = 6;
  static const int HPDF_PAGE_SIZE_EXECUTIVE = 7;
  static const int HPDF_PAGE_SIZE_US4x6 = 8;
  static const int HPDF_PAGE_SIZE_US4x8 = 9;
  static const int HPDF_PAGE_SIZE_US5x7 = 10;
  static const int HPDF_PAGE_SIZE_COMM10 = 11;
  static const int HPDF_PAGE_SIZE_EOF = 12;
}

abstract class HPDF_PageDirection {
  static const int HPDF_PAGE_PORTRAIT = 0;
  static const int HPDF_PAGE_LANDSCAPE = 1;
}

abstract class _HPDF_EncoderType {
  static const int HPDF_ENCODER_TYPE_SINGLE_BYTE = 0;
  static const int HPDF_ENCODER_TYPE_DOUBLE_BYTE = 1;
  static const int HPDF_ENCODER_TYPE_UNINITIALIZED = 2;
  static const int HPDF_ENCODER_UNKNOWN = 3;
}

abstract class _HPDF_ByteType {
  static const int HPDF_BYTE_TYPE_SINGLE = 0;
  static const int HPDF_BYTE_TYPE_LEAD = 1;
  static const int HPDF_BYTE_TYPE_TRAIL = 2;
  static const int HPDF_BYTE_TYPE_UNKNOWN = 3;
}

abstract class HPDF_TextAlignment {
  static const int HPDF_TALIGN_LEFT = 0;
  static const int HPDF_TALIGN_RIGHT = 1;
  static const int HPDF_TALIGN_CENTER = 2;
  static const int HPDF_TALIGN_JUSTIFY = 3;
}

abstract class _HPDF_NameDictKey {
  static const int HPDF_NAME_EMBEDDED_FILES = 0;
  static const int HPDF_NAME_EOF = 1;
}

abstract class _HPDF_ShadingType {
  static const int HPDF_SHADING_FREE_FORM_TRIANGLE_MESH = 4;
}

abstract class _HPDF_Shading_FreeFormTriangleMeshEdgeFlag {
  static const int HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_NO_CONNECTION = 0;
  static const int HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_BC = 1;
  static const int HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_AC = 2;
}

class _HPDF_Error_Rec extends ffi.Struct {
  @HPDF_STATUS()
  external int error_no;

  @HPDF_STATUS()
  external int detail_no;

  external HPDF_Error_Handler error_fn;

  external ffi.Pointer<ffi.Void> user_data;
}

typedef HPDF_STATUS = ffi.UnsignedLong;
typedef HPDF_Error_Handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(HPDF_STATUS, HPDF_STATUS, ffi.Pointer<ffi.Void>)>>;
typedef HPDF_Error = ffi.Pointer<_HPDF_Error_Rec>;

class _HPDF_MPool_Node_Rec extends ffi.Struct {
  external ffi.Pointer<HPDF_BYTE> buf;

  @HPDF_UINT()
  external int size;

  @HPDF_UINT()
  external int used_size;

  external HPDF_MPool_Node next_node;
}

typedef HPDF_BYTE = ffi.UnsignedChar;
typedef HPDF_MPool_Node = ffi.Pointer<_HPDF_MPool_Node_Rec>;

class _HPDF_MMgr_Rec extends ffi.Struct {
  external HPDF_Error error;

  external HPDF_Alloc_Func alloc_fn;

  external HPDF_Free_Func free_fn;

  external HPDF_MPool_Node mpool;

  @HPDF_UINT()
  external int buf_size;
}

typedef HPDF_Alloc_Func = ffi
    .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(HPDF_UINT)>>;
typedef HPDF_Free_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef HPDF_MMgr = ffi.Pointer<_HPDF_MMgr_Rec>;

class _HPDF_List_Rec extends ffi.Struct {
  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  @HPDF_UINT()
  external int block_siz;

  @HPDF_UINT()
  external int items_per_block;

  @HPDF_UINT()
  external int count;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> obj;
}

typedef HPDF_List = ffi.Pointer<_HPDF_List_Rec>;
typedef HPDF_INT32 = ffi.Int;

class HPDF_MD5Context extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<HPDF_UINT32> buf;

  @ffi.Array.multi([2])
  external ffi.Array<HPDF_UINT32> bits;

  @ffi.Array.multi([64])
  external ffi.Array<HPDF_BYTE> in1;
}

typedef HPDF_UINT32 = ffi.UnsignedInt;

class _HPDF_ARC4_Ctx_Rec extends ffi.Struct {
  @HPDF_BYTE()
  external int idx1;

  @HPDF_BYTE()
  external int idx2;

  @ffi.Array.multi([256])
  external ffi.Array<HPDF_BYTE> state;
}

class _HPDF_Encrypt_Rec extends ffi.Struct {
  @ffi.Int32()
  external int mode;

  @HPDF_UINT()
  external int key_len;

  @ffi.Array.multi([32])
  external ffi.Array<HPDF_BYTE> owner_passwd;

  @ffi.Array.multi([32])
  external ffi.Array<HPDF_BYTE> user_passwd;

  @ffi.Array.multi([32])
  external ffi.Array<HPDF_BYTE> owner_key;

  @ffi.Array.multi([32])
  external ffi.Array<HPDF_BYTE> user_key;

  @HPDF_INT()
  external int permission;

  @ffi.Array.multi([16])
  external ffi.Array<HPDF_BYTE> encrypt_id;

  @ffi.Array.multi([21])
  external ffi.Array<HPDF_BYTE> encryption_key;

  @ffi.Array.multi([16])
  external ffi.Array<HPDF_BYTE> md5_encryption_key;

  external HPDF_ARC4_Ctx_Rec arc4ctx;
}

typedef HPDF_ARC4_Ctx_Rec = _HPDF_ARC4_Ctx_Rec;
typedef HPDF_Encrypt = ffi.Pointer<_HPDF_Encrypt_Rec>;
typedef HPDF_UINT16 = ffi.UnsignedShort;

abstract class _HPDF_StreamType {
  static const int HPDF_STREAM_UNKNOWN = 0;
  static const int HPDF_STREAM_CALLBACK = 1;
  static const int HPDF_STREAM_FILE = 2;
  static const int HPDF_STREAM_MEMORY = 3;
}

abstract class _HPDF_WhenceMode {
  static const int HPDF_SEEK_SET = 0;
  static const int HPDF_SEEK_CUR = 1;
  static const int HPDF_SEEK_END = 2;
}

class _HPDF_Stream_Rec extends ffi.Struct {
  @HPDF_UINT32()
  external int sig_bytes;

  @ffi.Int32()
  external int type;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  @HPDF_UINT()
  external int size;

  external HPDF_Stream_Write_Func write_fn;

  external HPDF_Stream_Read_Func read_fn;

  external HPDF_Stream_Seek_Func seek_fn;

  external HPDF_Stream_Free_Func free_fn;

  external HPDF_Stream_Tell_Func tell_fn;

  external HPDF_Stream_Size_Func size_fn;

  external ffi.Pointer<ffi.Void> attr;
}

typedef HPDF_Stream_Write_Func = ffi.Pointer<
    ffi.NativeFunction<
        HPDF_STATUS Function(HPDF_Stream, ffi.Pointer<HPDF_BYTE>, HPDF_UINT)>>;
typedef HPDF_Stream = ffi.Pointer<_HPDF_Stream_Rec>;
typedef HPDF_Stream_Read_Func = ffi.Pointer<
    ffi.NativeFunction<
        HPDF_STATUS Function(
            HPDF_Stream, ffi.Pointer<HPDF_BYTE>, ffi.Pointer<HPDF_UINT>)>>;
typedef HPDF_Stream_Seek_Func = ffi.Pointer<
    ffi.NativeFunction<HPDF_STATUS Function(HPDF_Stream, HPDF_INT, ffi.Int32)>>;
typedef HPDF_Stream_Free_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HPDF_Stream)>>;
typedef HPDF_Stream_Tell_Func
    = ffi.Pointer<ffi.NativeFunction<HPDF_INT32 Function(HPDF_Stream)>>;
typedef HPDF_Stream_Size_Func
    = ffi.Pointer<ffi.NativeFunction<HPDF_UINT32 Function(HPDF_Stream)>>;

class _HPDF_MemStreamAttr_Rec extends ffi.Struct {
  external HPDF_List buf;

  @HPDF_UINT()
  external int buf_siz;

  @HPDF_UINT()
  external int w_pos;

  external ffi.Pointer<HPDF_BYTE> w_ptr;

  @HPDF_UINT()
  external int r_ptr_idx;

  @HPDF_UINT()
  external int r_pos;

  external ffi.Pointer<HPDF_BYTE> r_ptr;
}

typedef HPDF_BOOL = ffi.Int;

abstract class _HPDF_EncodingType {
  static const int HPDF_STANDARD_ENCODING = 0;
  static const int HPDF_MAC_ROMAN_ENCODING = 1;
  static const int HPDF_WIN_ANSI_ENCODING = 2;
  static const int HPDF_FONT_SPECIFIC = 3;
  static const int HPDF_ENCODING_EOF = 4;
}

class _HPDF_ParseText_Rec extends ffi.Struct {
  external ffi.Pointer<HPDF_BYTE> text;

  @HPDF_UINT()
  external int index;

  @HPDF_UINT()
  external int len;

  @ffi.Int32()
  external int byte_type;
}

class _HPDF_Encoder_Rec extends ffi.Struct {
  @HPDF_UINT32()
  external int sig_bytes;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> name;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  @ffi.Int32()
  external int type;

  external HPDF_Encoder_ByteType_Func byte_type_fn;

  external HPDF_Encoder_ToUnicode_Func to_unicode_fn;

  external HPDF_Encoder_EncodeText_Func encode_text_fn;

  external HPDF_Encoder_Write_Func write_fn;

  external HPDF_Encoder_Free_Func free_fn;

  external HPDF_Encoder_Init_Func init_fn;

  external ffi.Pointer<ffi.Void> attr;
}

typedef HPDF_Encoder_ByteType_Func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(HPDF_Encoder, ffi.Pointer<HPDF_ParseText_Rec>)>>;
typedef HPDF_Encoder = ffi.Pointer<_HPDF_Encoder_Rec>;
typedef HPDF_ParseText_Rec = _HPDF_ParseText_Rec;
typedef HPDF_Encoder_ToUnicode_Func = ffi.Pointer<
    ffi.NativeFunction<HPDF_UNICODE Function(HPDF_Encoder, HPDF_UINT16)>>;
typedef HPDF_UNICODE = HPDF_UINT16;
typedef HPDF_Encoder_EncodeText_Func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(HPDF_Encoder, ffi.Pointer<ffi.Char>,
            HPDF_UINT, ffi.Pointer<HPDF_UINT>)>>;
typedef HPDF_Encoder_Write_Func = ffi.Pointer<
    ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder, HPDF_Stream)>>;
typedef HPDF_Encoder_Free_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HPDF_Encoder)>>;
typedef HPDF_Encoder_Init_Func
    = ffi.Pointer<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Encoder)>>;

abstract class _HPDF_BaseEncodings {
  static const int HPDF_BASE_ENCODING_STANDARD = 0;
  static const int HPDF_BASE_ENCODING_WIN_ANSI = 1;
  static const int HPDF_BASE_ENCODING_MAC_ROMAN = 2;
  static const int HPDF_BASE_ENCODING_FONT_SPECIFIC = 3;
  static const int HPDF_BASE_ENCODING_EOF = 4;
}

class _HPDF_BasicEncoderAttr_Rec extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> base_encoding;

  @HPDF_BYTE()
  external int first_char;

  @HPDF_BYTE()
  external int last_char;

  @ffi.Array.multi([256])
  external ffi.Array<HPDF_UNICODE> unicode_map;

  @HPDF_BOOL()
  external int has_differences;

  @ffi.Array.multi([256])
  external ffi.Array<HPDF_BYTE> differences;
}

class _HPDF_CidRange_Rec extends ffi.Struct {
  @HPDF_UINT16()
  external int from;

  @HPDF_UINT16()
  external int to;

  @HPDF_UINT16()
  external int cid;
}

class _HPDF_UnicodeMap_Rec extends ffi.Struct {
  @HPDF_UINT16()
  external int code;

  @HPDF_UINT16()
  external int unicode;
}

class _HPDF_CMapEncoderAttr_Rec extends ffi.Struct {
  @ffi.Array.multi([256, 256])
  external ffi.Array<ffi.Array<HPDF_UNICODE>> unicode_map;

  @ffi.Array.multi([256, 256])
  external ffi.Array<ffi.Array<HPDF_UINT16>> cid_map;

  @ffi.Array.multi([128])
  external ffi.Array<HPDF_UINT16> jww_line_head;

  external HPDF_List cmap_range;

  external HPDF_List notdef_range;

  external HPDF_List code_space_range;

  @ffi.Int32()
  external int writing_mode;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> registry;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> ordering;

  @HPDF_INT()
  external int suppliment;

  external HPDF_CMapEncoder_ByteType_Func is_lead_byte_fn;

  external HPDF_CMapEncoder_ByteType_Func is_trial_byte_fn;

  @HPDF_INT()
  external int uid_offset;

  @ffi.Array.multi([3])
  external ffi.Array<HPDF_UINT> xuid;
}

typedef HPDF_CMapEncoder_ByteType_Func = ffi
    .Pointer<ffi.NativeFunction<HPDF_BOOL Function(HPDF_Encoder, HPDF_BYTE)>>;
typedef HPDF_CidRange_Rec = _HPDF_CidRange_Rec;
typedef HPDF_UnicodeMap_Rec = _HPDF_UnicodeMap_Rec;

class _HPDF_Obj_Header extends ffi.Struct {
  @HPDF_UINT32()
  external int obj_id;

  @HPDF_UINT16()
  external int gen_no;

  @HPDF_UINT16()
  external int obj_class;
}

class _HPDF_Null_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;
}

typedef HPDF_Obj_Header = _HPDF_Obj_Header;
typedef HPDF_Null = ffi.Pointer<_HPDF_Null_Rec>;

class _HPDF_Boolean_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  @HPDF_BOOL()
  external int value;
}

typedef HPDF_Boolean = ffi.Pointer<_HPDF_Boolean_Rec>;

class _HPDF_Number_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  @HPDF_INT32()
  external int value;
}

typedef HPDF_Number = ffi.Pointer<_HPDF_Number_Rec>;

class _HPDF_Real_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_Error error;

  @HPDF_REAL()
  external double value;
}

typedef HPDF_Real = ffi.Pointer<_HPDF_Real_Rec>;

class _HPDF_Name_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_Error error;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> value;
}

typedef HPDF_Name = ffi.Pointer<_HPDF_Name_Rec>;

class _HPDF_String_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  external HPDF_Encoder encoder;

  external ffi.Pointer<HPDF_BYTE> value;

  @HPDF_UINT()
  external int len;
}

typedef HPDF_String = ffi.Pointer<_HPDF_String_Rec>;

class _HPDF_Binary_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  external ffi.Pointer<HPDF_BYTE> value;

  @HPDF_UINT()
  external int len;
}

typedef HPDF_Binary = ffi.Pointer<_HPDF_Binary_Rec>;

class _HPDF_Array_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  external HPDF_List list;
}

typedef HPDF_Array = ffi.Pointer<_HPDF_Array_Rec>;
typedef HPDF_Box = HPDF_Rect;

class _HPDF_Xref_Rec extends ffi.Struct {
  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  @HPDF_UINT32()
  external int start_offset;

  external HPDF_List entries;

  @HPDF_UINT()
  external int addr;

  external HPDF_Xref prev;

  external HPDF_Dict trailer;
}

typedef HPDF_Xref = ffi.Pointer<_HPDF_Xref_Rec>;
typedef HPDF_Dict = ffi.Pointer<_HPDF_Dict_Rec>;

class _HPDF_Dict_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  external HPDF_List list;

  external HPDF_Dict_BeforeWriteFunc before_write_fn;

  external HPDF_Dict_OnWriteFunc write_fn;

  external HPDF_Dict_AfterWriteFunc after_write_fn;

  external HPDF_Dict_FreeFunc free_fn;

  external HPDF_Stream stream;

  @HPDF_UINT()
  external int filter;

  external HPDF_Dict1 filterParams;

  external ffi.Pointer<ffi.Void> attr;
}

typedef HPDF_Dict_BeforeWriteFunc
    = ffi.Pointer<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Dict1)>>;
typedef HPDF_Dict1 = ffi.Pointer<_HPDF_Dict_Rec>;
typedef HPDF_Dict_OnWriteFunc = ffi
    .Pointer<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Dict1, HPDF_Stream)>>;
typedef HPDF_Dict_AfterWriteFunc
    = ffi.Pointer<ffi.NativeFunction<HPDF_STATUS Function(HPDF_Dict1)>>;
typedef HPDF_Dict_FreeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HPDF_Dict1)>>;

class _HPDF_DictElement_Rec extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> key;

  external ffi.Pointer<ffi.Void> value;
}

class _HPDF_Proxy_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external ffi.Pointer<ffi.Void> obj;
}

typedef HPDF_Proxy = ffi.Pointer<_HPDF_Proxy_Rec>;

class _HPDF_XrefEntry_Rec extends ffi.Struct {
  @ffi.Char()
  external int entry_typ;

  @HPDF_UINT()
  external int byte_offset;

  @HPDF_UINT16()
  external int gen_no;

  external ffi.Pointer<ffi.Void> obj;
}

typedef HPDF_XrefEntry = ffi.Pointer<_HPDF_XrefEntry_Rec>;

class _HPDF_Direct_Rec extends ffi.Struct {
  external HPDF_Obj_Header header;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  external ffi.Pointer<HPDF_BYTE> value;

  @HPDF_UINT()
  external int len;
}

typedef HPDF_Direct = ffi.Pointer<_HPDF_Direct_Rec>;
typedef HPDF_Catalog = HPDF_Dict;
typedef HPDF_NameDict = HPDF_Dict;
typedef HPDF_Pages = HPDF_Dict;
typedef HPDF_Destination = HPDF_Array;
typedef HPDF_Image = HPDF_Dict;

class _HPDF_CharData extends ffi.Struct {
  @HPDF_INT16()
  external int char_cd;

  @HPDF_UNICODE()
  external int unicode;

  @HPDF_INT16()
  external int width;
}

typedef HPDF_INT16 = ffi.Short;

abstract class _HPDF_FontDefType {
  static const int HPDF_FONTDEF_TYPE_TYPE1 = 0;
  static const int HPDF_FONTDEF_TYPE_TRUETYPE = 1;
  static const int HPDF_FONTDEF_TYPE_CID = 2;
  static const int HPDF_FONTDEF_TYPE_UNINITIALIZED = 3;
  static const int HPDF_FONTDEF_TYPE_EOF = 4;
}

class _HPDF_CID_Width extends ffi.Struct {
  @HPDF_UINT16()
  external int cid;

  @HPDF_INT16()
  external int width;
}

class _HPDF_FontDef_Rec extends ffi.Struct {
  @HPDF_UINT32()
  external int sig_bytes;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> base_font;

  external HPDF_MMgr mmgr;

  external HPDF_Error error;

  @ffi.Int32()
  external int type;

  external HPDF_FontDef_CleanFunc clean_fn;

  external HPDF_FontDef_FreeFunc free_fn;

  external HPDF_FontDef_InitFunc init_fn;

  @HPDF_INT16()
  external int ascent;

  @HPDF_INT16()
  external int descent;

  @HPDF_UINT()
  external int flags;

  external HPDF_Box font_bbox;

  @HPDF_INT16()
  external int italic_angle;

  @HPDF_UINT16()
  external int stemv;

  @HPDF_INT16()
  external int avg_width;

  @HPDF_INT16()
  external int max_width;

  @HPDF_INT16()
  external int missing_width;

  @HPDF_UINT16()
  external int stemh;

  @HPDF_UINT16()
  external int x_height;

  @HPDF_UINT16()
  external int cap_height;

  external HPDF_Dict descriptor;

  external HPDF_Stream data;

  @HPDF_BOOL()
  external int valid;

  external ffi.Pointer<ffi.Void> attr;
}

typedef HPDF_FontDef_CleanFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HPDF_FontDef)>>;
typedef HPDF_FontDef = ffi.Pointer<_HPDF_FontDef_Rec>;
typedef HPDF_FontDef_FreeFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HPDF_FontDef)>>;
typedef HPDF_FontDef_InitFunc
    = ffi.Pointer<ffi.NativeFunction<HPDF_STATUS Function(HPDF_FontDef)>>;

class _HPDF_Type1FontDefAttrRec extends ffi.Struct {
  @HPDF_BYTE()
  external int first_char;

  @HPDF_BYTE()
  external int last_char;

  external ffi.Pointer<HPDF_CharData> widths;

  @HPDF_UINT()
  external int widths_count;

  @HPDF_INT16()
  external int leading;

  external ffi.Pointer<ffi.Char> char_set;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> encoding_scheme;

  @HPDF_UINT()
  external int length1;

  @HPDF_UINT()
  external int length2;

  @HPDF_UINT()
  external int length3;

  @HPDF_BOOL()
  external int is_base14font;

  @HPDF_BOOL()
  external int is_fixed_pitch;

  external HPDF_Stream font_data;
}

typedef HPDF_CharData = _HPDF_CharData;

class _HPDF_TTF_Table extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> tag;

  @HPDF_UINT32()
  external int check_sum;

  @HPDF_UINT32()
  external int offset;

  @HPDF_UINT32()
  external int length;
}

class _HPDF_TTF_OffsetTbl extends ffi.Struct {
  @HPDF_UINT32()
  external int sfnt_version;

  @HPDF_UINT16()
  external int num_tables;

  @HPDF_UINT16()
  external int search_range;

  @HPDF_UINT16()
  external int entry_selector;

  @HPDF_UINT16()
  external int range_shift;

  external ffi.Pointer<HPDF_TTFTable> table;
}

typedef HPDF_TTFTable = _HPDF_TTF_Table;

class _HPDF_TTF_CmapRange extends ffi.Struct {
  @HPDF_UINT16()
  external int format;

  @HPDF_UINT16()
  external int length;

  @HPDF_UINT16()
  external int language;

  @HPDF_UINT16()
  external int seg_count_x2;

  @HPDF_UINT16()
  external int search_range;

  @HPDF_UINT16()
  external int entry_selector;

  @HPDF_UINT16()
  external int range_shift;

  external ffi.Pointer<HPDF_UINT16> end_count;

  @HPDF_UINT16()
  external int reserved_pad;

  external ffi.Pointer<HPDF_UINT16> start_count;

  external ffi.Pointer<HPDF_INT16> id_delta;

  external ffi.Pointer<HPDF_UINT16> id_range_offset;

  external ffi.Pointer<HPDF_UINT16> glyph_id_array;

  @HPDF_UINT()
  external int glyph_id_array_count;
}

class _HPDF_TTF_GryphOffsets extends ffi.Struct {
  @HPDF_UINT32()
  external int base_offset;

  external ffi.Pointer<HPDF_UINT32> offsets;

  external ffi.Pointer<HPDF_BYTE> flgs;
}

class _HPDF_TTF_LongHorMetric extends ffi.Struct {
  @HPDF_UINT16()
  external int advance_width;

  @HPDF_INT16()
  external int lsb;
}

class _HPDF_TTF_FontHeader extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<HPDF_BYTE> version_number;

  @HPDF_UINT32()
  external int font_revision;

  @HPDF_UINT32()
  external int check_sum_adjustment;

  @HPDF_UINT32()
  external int magic_number;

  @HPDF_UINT16()
  external int flags;

  @HPDF_UINT16()
  external int units_per_em;

  @ffi.Array.multi([8])
  external ffi.Array<HPDF_BYTE> created;

  @ffi.Array.multi([8])
  external ffi.Array<HPDF_BYTE> modified;

  @HPDF_INT16()
  external int x_min;

  @HPDF_INT16()
  external int y_min;

  @HPDF_INT16()
  external int x_max;

  @HPDF_INT16()
  external int y_max;

  @HPDF_UINT16()
  external int mac_style;

  @HPDF_UINT16()
  external int lowest_rec_ppem;

  @HPDF_INT16()
  external int font_direction_hint;

  @HPDF_INT16()
  external int index_to_loc_format;

  @HPDF_INT16()
  external int glyph_data_format;
}

class _HPDF_TTF_NameRecord extends ffi.Struct {
  @HPDF_UINT16()
  external int platform_id;

  @HPDF_UINT16()
  external int encoding_id;

  @HPDF_UINT16()
  external int language_id;

  @HPDF_UINT16()
  external int name_id;

  @HPDF_UINT16()
  external int length;

  @HPDF_UINT16()
  external int offset;
}

class _HPDF_TTF_NamingTable extends ffi.Struct {
  @HPDF_UINT16()
  external int format;

  @HPDF_UINT16()
  external int count;

  @HPDF_UINT16()
  external int string_offset;

  external ffi.Pointer<HPDF_TTF_NameRecord> name_records;
}

typedef HPDF_TTF_NameRecord = _HPDF_TTF_NameRecord;

class _HPDF_TTFontDefAttr_Rec extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> base_font;

  @HPDF_BYTE()
  external int first_char;

  @HPDF_BYTE()
  external int last_char;

  external ffi.Pointer<ffi.Char> char_set;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Char> tag_name;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> tag_name2;

  external HPDF_TTF_FontHeader header;

  external HPDF_TTF_GryphOffsets glyph_tbl;

  @HPDF_UINT16()
  external int num_glyphs;

  external HPDF_TTF_NamingTable name_tbl;

  external ffi.Pointer<HPDF_TTF_LongHorMetric> h_metric;

  @HPDF_UINT16()
  external int num_h_metric;

  external HPDF_TTF_OffsetTbl offset_tbl;

  external HPDF_TTF_CmapRange cmap;

  @HPDF_UINT16()
  external int fs_type;

  @ffi.Array.multi([2])
  external ffi.Array<HPDF_BYTE> sfamilyclass;

  @ffi.Array.multi([10])
  external ffi.Array<HPDF_BYTE> panose;

  @HPDF_UINT32()
  external int code_page_range1;

  @HPDF_UINT32()
  external int code_page_range2;

  @HPDF_UINT()
  external int length1;

  @HPDF_BOOL()
  external int embedding;

  @HPDF_BOOL()
  external int is_cidfont;

  external HPDF_Stream stream;
}

typedef HPDF_TTF_FontHeader = _HPDF_TTF_FontHeader;
typedef HPDF_TTF_GryphOffsets = _HPDF_TTF_GryphOffsets;
typedef HPDF_TTF_NamingTable = _HPDF_TTF_NamingTable;
typedef HPDF_TTF_LongHorMetric = _HPDF_TTF_LongHorMetric;
typedef HPDF_TTF_OffsetTbl = _HPDF_TTF_OffsetTbl;
typedef HPDF_TTF_CmapRange = _HPDF_TTF_CmapRange;

class _HPDF_CIDFontDefAttrRec extends ffi.Struct {
  external HPDF_List widths;

  @HPDF_INT16()
  external int DW;

  @ffi.Array.multi([2])
  external ffi.Array<HPDF_INT16> DW2;
}

typedef HPDF_CID_Width = _HPDF_CID_Width;

abstract class _HPDF_FontType {
  static const int HPDF_FONT_TYPE1 = 0;
  static const int HPDF_FONT_TRUETYPE = 1;
  static const int HPDF_FONT_TYPE3 = 2;
  static const int HPDF_FONT_TYPE0_CID = 3;
  static const int HPDF_FONT_TYPE0_TT = 4;
  static const int HPDF_FONT_CID_TYPE0 = 5;
  static const int HPDF_FONT_CID_TYPE2 = 6;
  static const int HPDF_FONT_MMTYPE1 = 7;
}

class _HPDF_FontAttr_Rec extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int writing_mode;

  external HPDF_Font_TextWidths_Func text_width_fn;

  external HPDF_Font_MeasureText_Func measure_text_fn;

  external HPDF_FontDef fontdef;

  external HPDF_Encoder encoder;

  external ffi.Pointer<HPDF_INT16> widths;

  external ffi.Pointer<HPDF_BYTE> used;

  external HPDF_Xref xref;

  external HPDF_Font descendant_font;

  external HPDF_Dict map_stream;

  external HPDF_Dict cmap_stream;
}

typedef HPDF_Font_TextWidths_Func = ffi.Pointer<
    ffi.NativeFunction<
        HPDF_TextWidth Function(HPDF_Font, ffi.Pointer<HPDF_BYTE>, HPDF_UINT)>>;
typedef HPDF_TextWidth = _HPDF_TextWidth;
typedef HPDF_Font = HPDF_Dict;
typedef HPDF_Font_MeasureText_Func = ffi.Pointer<
    ffi.NativeFunction<
        HPDF_UINT Function(
            HPDF_Font,
            ffi.Pointer<HPDF_BYTE>,
            HPDF_UINT,
            HPDF_REAL,
            HPDF_REAL,
            HPDF_REAL,
            HPDF_REAL,
            HPDF_BOOL,
            ffi.Pointer<HPDF_REAL>)>>;

class _HPDF_GState_Rec extends ffi.Struct {
  external HPDF_TransMatrix trans_matrix;

  @HPDF_REAL()
  external double line_width;

  @ffi.Int32()
  external int line_cap;

  @ffi.Int32()
  external int line_join;

  @HPDF_REAL()
  external double miter_limit;

  external HPDF_DashMode dash_mode;

  @HPDF_REAL()
  external double flatness;

  @HPDF_REAL()
  external double char_space;

  @HPDF_REAL()
  external double word_space;

  @HPDF_REAL()
  external double h_scalling;

  @HPDF_REAL()
  external double text_leading;

  @ffi.Int32()
  external int rendering_mode;

  @HPDF_REAL()
  external double text_rise;

  @ffi.Int32()
  external int cs_fill;

  @ffi.Int32()
  external int cs_stroke;

  external HPDF_RGBColor rgb_fill;

  external HPDF_RGBColor rgb_stroke;

  external HPDF_CMYKColor cmyk_fill;

  external HPDF_CMYKColor cmyk_stroke;

  @HPDF_REAL()
  external double gray_fill;

  @HPDF_REAL()
  external double gray_stroke;

  external HPDF_Font font;

  @HPDF_REAL()
  external double font_size;

  @ffi.Int32()
  external int writing_mode;

  external HPDF_GState prev;

  @HPDF_UINT()
  external int depth;
}

typedef HPDF_TransMatrix = _HPDF_TransMatrix;
typedef HPDF_DashMode = _HPDF_DashMode;
typedef HPDF_RGBColor = _HPDF_RGBColor;
typedef HPDF_CMYKColor = _HPDF_CMYKColor;
typedef HPDF_GState = ffi.Pointer<_HPDF_GState_Rec>;
typedef HPDF_ExtGState = HPDF_Dict;
typedef HPDF_Page = HPDF_Dict;

class _HPDF_PageAttr_Rec extends ffi.Struct {
  external HPDF_Pages parent;

  external HPDF_Dict fonts;

  external HPDF_Dict xobjects;

  external HPDF_Dict ext_gstates;

  external HPDF_Dict shadings;

  external HPDF_GState gstate;

  external HPDF_Point str_pos;

  external HPDF_Point cur_pos;

  external HPDF_Point text_pos;

  external HPDF_TransMatrix text_matrix;

  @HPDF_UINT16()
  external int gmode;

  external HPDF_Dict contents;

  external HPDF_Stream stream;

  external HPDF_Xref xref;

  @HPDF_UINT()
  external int compression_mode;

  external ffi.Pointer<ffi.Int32> ver;
}

typedef HPDF_Point = _HPDF_Point;
typedef HPDF_XObject = HPDF_Dict;
typedef HPDF_Shading = HPDF_Dict;
typedef HPDF_Outline = HPDF_Dict;

class _HPDF_Doc_Rec extends ffi.Struct {
  @HPDF_UINT32()
  external int sig_bytes;

  @ffi.Int32()
  external int pdf_version;

  external HPDF_MMgr mmgr;

  external HPDF_Catalog catalog;

  external HPDF_Outline outlines;

  external HPDF_Xref xref;

  external HPDF_Pages root_pages;

  external HPDF_Pages cur_pages;

  external HPDF_Page cur_page;

  external HPDF_List page_list;

  external HPDF_Error_Rec error;

  external HPDF_Dict info;

  external HPDF_Dict trailer;

  external HPDF_List font_mgr;

  @ffi.Array.multi([6])
  external ffi.Array<HPDF_BYTE> ttfont_tag;

  external HPDF_List fontdef_list;

  external HPDF_List encoder_list;

  external HPDF_Encoder cur_encoder;

  @HPDF_BOOL()
  external int compression_mode;

  @HPDF_BOOL()
  external int encrypt_on;

  external HPDF_EncryptDict encrypt_dict;

  external HPDF_Encoder def_encoder;

  @HPDF_UINT()
  external int page_per_pages;

  @HPDF_UINT()
  external int cur_page_num;

  external HPDF_Stream stream;
}

typedef HPDF_Error_Rec = _HPDF_Error_Rec;
typedef HPDF_EncryptDict = HPDF_Dict;
typedef HPDF_Doc = ffi.Pointer<_HPDF_Doc_Rec>;
// typedef HPDF_Rect = _HPDF_Rect;
typedef HPDF_Annotation = HPDF_Dict;
typedef HPDF_U3D = HPDF_Dict;
typedef HPDF_JavaScript = HPDF_Dict;
typedef HPDF_Date = _HPDF_Date;
typedef HPDF_ExData = HPDF_Dict;
typedef HPDF_3DMeasure = HPDF_Dict;
typedef HPDF_Point3D = _HPDF_Point3D;
typedef HPDF_EmbeddedFile = HPDF_Dict;
typedef HPDF_UINT8 = ffi.UnsignedChar;
typedef HPDF_OutputIntent = HPDF_Dict;

const int HPDF_MAJOR_VERSION = 2;

const int HPDF_MINOR_VERSION = 4;

const int HPDF_BUGFIX_VERSION = 3;

const String HPDF_EXTRA_VERSION = '';

const int HPDF_VERSION_ID = 20403;

const int HPDF_TRUE = 1;

const int HPDF_FALSE = 0;

const int HPDF_OK = 0;

const int HPDF_NOERROR = 0;

const int HPDF_TMP_BUF_SIZ = 512;

const int HPDF_SHORT_BUF_SIZ = 32;

const int HPDF_REAL_LEN = 64;

const int HPDF_INT_LEN = 11;

const int HPDF_TEXT_DEFAULT_LEN = 256;

const int HPDF_UNICODE_HEADER_LEN = 2;

const int HPDF_DATE_TIME_STR_LEN = 23;

const int HPDF_BYTE_OFFSET_LEN = 10;

const int HPDF_OBJ_ID_LEN = 7;

const int HPDF_GEN_NO_LEN = 5;

const String HPDF_DEF_FONT = 'Helvetica';

const int HPDF_DEF_PAGE_LAYOUT = 0;

const int HPDF_DEF_PAGE_MODE = 0;

const int HPDF_DEF_WORDSPACE = 0;

const int HPDF_DEF_CHARSPACE = 0;

const int HPDF_DEF_FONTSIZE = 10;

const int HPDF_DEF_HSCALING = 100;

const int HPDF_DEF_LEADING = 0;

const int HPDF_DEF_RENDERING_MODE = 0;

const int HPDF_DEF_RISE = 0;

const int HPDF_DEF_RAISE = 0;

const int HPDF_DEF_LINEWIDTH = 1;

const int HPDF_DEF_LINECAP = 0;

const int HPDF_DEF_LINEJOIN = 0;

const int HPDF_DEF_MITERLIMIT = 10;

const int HPDF_DEF_FLATNESS = 1;

const int HPDF_DEF_PAGE_NUM = 1;

const int HPDF_BS_DEF_WIDTH = 1;

const double HPDF_DEF_PAGE_WIDTH = 595.2760009765625;

const double HPDF_DEF_PAGE_HEIGHT = 841.8900146484375;

const int HPDF_COMP_NONE = 0;

const int HPDF_COMP_TEXT = 1;

const int HPDF_COMP_IMAGE = 2;

const int HPDF_COMP_METADATA = 4;

const int HPDF_COMP_ALL = 15;

const int HPDF_COMP_MASK = 255;

const int HPDF_ENABLE_READ = 0;

const int HPDF_ENABLE_PRINT = 4;

const int HPDF_ENABLE_EDIT_ALL = 8;

const int HPDF_ENABLE_COPY = 16;

const int HPDF_ENABLE_EDIT = 32;

const int HPDF_HIDE_TOOLBAR = 1;

const int HPDF_HIDE_MENUBAR = 2;

const int HPDF_HIDE_WINDOW_UI = 4;

const int HPDF_FIT_WINDOW = 8;

const int HPDF_CENTER_WINDOW = 16;

const int HPDF_PRINT_SCALING_NONE = 32;

const int HPDF_LIMIT_MAX_INT = 2147483647;

const int HPDF_LIMIT_MIN_INT = -2147483647;

const double HPDF_LIMIT_MAX_REAL = 3.3999999521443642e+38;

const double HPDF_LIMIT_MIN_REAL = -3.3999999521443642e+38;

const int HPDF_LIMIT_MAX_STRING_LEN = 2147483646;

const int HPDF_LIMIT_MAX_NAME_LEN = 127;

const int HPDF_LIMIT_MAX_ARRAY = 8388607;

const int HPDF_LIMIT_MAX_DICT_ELEMENT = 8388607;

const int HPDF_LIMIT_MAX_XREF_ELEMENT = 8388607;

const int HPDF_LIMIT_MAX_GSTATE = 28;

const int HPDF_LIMIT_MAX_DEVICE_N = 8;

const int HPDF_LIMIT_MAX_DEVICE_N_V15 = 32;

const int HPDF_LIMIT_MAX_CID = 65535;

const int HPDF_MAX_GENERATION_NUM = 65535;

const int HPDF_MIN_PAGE_HEIGHT = 3;

const int HPDF_MIN_PAGE_WIDTH = 3;

const int HPDF_MAX_PAGE_HEIGHT = 14400;

const int HPDF_MAX_PAGE_WIDTH = 14400;

const int HPDF_MIN_MAGNIFICATION_FACTOR = 8;

const int HPDF_MAX_MAGNIFICATION_FACTOR = 3200;

const int HPDF_MIN_PAGE_SIZE = 3;

const int HPDF_MAX_PAGE_SIZE = 14400;

const int HPDF_MIN_HORIZONTALSCALING = 10;

const int HPDF_MAX_HORIZONTALSCALING = 300;

const int HPDF_MIN_WORDSPACE = -30;

const int HPDF_MAX_WORDSPACE = 300;

const int HPDF_MIN_CHARSPACE = -30;

const int HPDF_MAX_CHARSPACE = 300;

const int HPDF_MAX_FONTSIZE = 600;

const int HPDF_MAX_ZOOMSIZE = 10;

const int HPDF_MAX_LEADING = 300;

const int HPDF_MAX_LINEWIDTH = 100;

const int HPDF_MAX_DASH_PATTERN = 100;

const int HPDF_MAX_JWW_NUM = 128;

const String HPDF_COUNTRY_AF = 'AF';

const String HPDF_COUNTRY_AL = 'AL';

const String HPDF_COUNTRY_DZ = 'DZ';

const String HPDF_COUNTRY_AS = 'AS';

const String HPDF_COUNTRY_AD = 'AD';

const String HPDF_COUNTRY_AO = 'AO';

const String HPDF_COUNTRY_AI = 'AI';

const String HPDF_COUNTRY_AQ = 'AQ';

const String HPDF_COUNTRY_AG = 'AG';

const String HPDF_COUNTRY_AR = 'AR';

const String HPDF_COUNTRY_AM = 'AM';

const String HPDF_COUNTRY_AW = 'AW';

const String HPDF_COUNTRY_AU = 'AU';

const String HPDF_COUNTRY_AT = 'AT';

const String HPDF_COUNTRY_AZ = 'AZ';

const String HPDF_COUNTRY_BS = 'BS';

const String HPDF_COUNTRY_BH = 'BH';

const String HPDF_COUNTRY_BD = 'BD';

const String HPDF_COUNTRY_BB = 'BB';

const String HPDF_COUNTRY_BY = 'BY';

const String HPDF_COUNTRY_BE = 'BE';

const String HPDF_COUNTRY_BZ = 'BZ';

const String HPDF_COUNTRY_BJ = 'BJ';

const String HPDF_COUNTRY_BM = 'BM';

const String HPDF_COUNTRY_BT = 'BT';

const String HPDF_COUNTRY_BO = 'BO';

const String HPDF_COUNTRY_BA = 'BA';

const String HPDF_COUNTRY_BW = 'BW';

const String HPDF_COUNTRY_BV = 'BV';

const String HPDF_COUNTRY_BR = 'BR';

const String HPDF_COUNTRY_IO = 'IO';

const String HPDF_COUNTRY_BN = 'BN';

const String HPDF_COUNTRY_BG = 'BG';

const String HPDF_COUNTRY_BF = 'BF';

const String HPDF_COUNTRY_BI = 'BI';

const String HPDF_COUNTRY_KH = 'KH';

const String HPDF_COUNTRY_CM = 'CM';

const String HPDF_COUNTRY_CA = 'CA';

const String HPDF_COUNTRY_CV = 'CV';

const String HPDF_COUNTRY_KY = 'KY';

const String HPDF_COUNTRY_CF = 'CF';

const String HPDF_COUNTRY_TD = 'TD';

const String HPDF_COUNTRY_CL = 'CL';

const String HPDF_COUNTRY_CN = 'CN';

const String HPDF_COUNTRY_CX = 'CX';

const String HPDF_COUNTRY_CC = 'CC';

const String HPDF_COUNTRY_CO = 'CO';

const String HPDF_COUNTRY_KM = 'KM';

const String HPDF_COUNTRY_CG = 'CG';

const String HPDF_COUNTRY_CK = 'CK';

const String HPDF_COUNTRY_CR = 'CR';

const String HPDF_COUNTRY_CI = 'CI';

const String HPDF_COUNTRY_HR = 'HR';

const String HPDF_COUNTRY_CU = 'CU';

const String HPDF_COUNTRY_CY = 'CY';

const String HPDF_COUNTRY_CZ = 'CZ';

const String HPDF_COUNTRY_DK = 'DK';

const String HPDF_COUNTRY_DJ = 'DJ';

const String HPDF_COUNTRY_DM = 'DM';

const String HPDF_COUNTRY_DO = 'DO';

const String HPDF_COUNTRY_TP = 'TP';

const String HPDF_COUNTRY_EC = 'EC';

const String HPDF_COUNTRY_EG = 'EG';

const String HPDF_COUNTRY_SV = 'SV';

const String HPDF_COUNTRY_GQ = 'GQ';

const String HPDF_COUNTRY_ER = 'ER';

const String HPDF_COUNTRY_EE = 'EE';

const String HPDF_COUNTRY_ET = 'ET';

const String HPDF_COUNTRY_FK = 'FK';

const String HPDF_COUNTRY_FO = 'FO';

const String HPDF_COUNTRY_FJ = 'FJ';

const String HPDF_COUNTRY_FI = 'FI';

const String HPDF_COUNTRY_FR = 'FR';

const String HPDF_COUNTRY_FX = 'FX';

const String HPDF_COUNTRY_GF = 'GF';

const String HPDF_COUNTRY_PF = 'PF';

const String HPDF_COUNTRY_TF = 'TF';

const String HPDF_COUNTRY_GA = 'GA';

const String HPDF_COUNTRY_GM = 'GM';

const String HPDF_COUNTRY_GE = 'GE';

const String HPDF_COUNTRY_DE = 'DE';

const String HPDF_COUNTRY_GH = 'GH';

const String HPDF_COUNTRY_GI = 'GI';

const String HPDF_COUNTRY_GR = 'GR';

const String HPDF_COUNTRY_GL = 'GL';

const String HPDF_COUNTRY_GD = 'GD';

const String HPDF_COUNTRY_GP = 'GP';

const String HPDF_COUNTRY_GU = 'GU';

const String HPDF_COUNTRY_GT = 'GT';

const String HPDF_COUNTRY_GN = 'GN';

const String HPDF_COUNTRY_GW = 'GW';

const String HPDF_COUNTRY_GY = 'GY';

const String HPDF_COUNTRY_HT = 'HT';

const String HPDF_COUNTRY_HM = 'HM';

const String HPDF_COUNTRY_HN = 'HN';

const String HPDF_COUNTRY_HK = 'HK';

const String HPDF_COUNTRY_HU = 'HU';

const String HPDF_COUNTRY_IS = 'IS';

const String HPDF_COUNTRY_IN = 'IN';

const String HPDF_COUNTRY_ID = 'ID';

const String HPDF_COUNTRY_IR = 'IR';

const String HPDF_COUNTRY_IQ = 'IQ';

const String HPDF_COUNTRY_IE = 'IE';

const String HPDF_COUNTRY_IL = 'IL';

const String HPDF_COUNTRY_IT = 'IT';

const String HPDF_COUNTRY_JM = 'JM';

const String HPDF_COUNTRY_JP = 'JP';

const String HPDF_COUNTRY_JO = 'JO';

const String HPDF_COUNTRY_KZ = 'KZ';

const String HPDF_COUNTRY_KE = 'KE';

const String HPDF_COUNTRY_KI = 'KI';

const String HPDF_COUNTRY_KP = 'KP';

const String HPDF_COUNTRY_KR = 'KR';

const String HPDF_COUNTRY_KW = 'KW';

const String HPDF_COUNTRY_KG = 'KG';

const String HPDF_COUNTRY_LA = 'LA';

const String HPDF_COUNTRY_LV = 'LV';

const String HPDF_COUNTRY_LB = 'LB';

const String HPDF_COUNTRY_LS = 'LS';

const String HPDF_COUNTRY_LR = 'LR';

const String HPDF_COUNTRY_LY = 'LY';

const String HPDF_COUNTRY_LI = 'LI';

const String HPDF_COUNTRY_LT = 'LT';

const String HPDF_COUNTRY_LU = 'LU';

const String HPDF_COUNTRY_MO = 'MO';

const String HPDF_COUNTRY_MK = 'MK';

const String HPDF_COUNTRY_MG = 'MG';

const String HPDF_COUNTRY_MW = 'MW';

const String HPDF_COUNTRY_MY = 'MY';

const String HPDF_COUNTRY_MV = 'MV';

const String HPDF_COUNTRY_ML = 'ML';

const String HPDF_COUNTRY_MT = 'MT';

const String HPDF_COUNTRY_MH = 'MH';

const String HPDF_COUNTRY_MQ = 'MQ';

const String HPDF_COUNTRY_MR = 'MR';

const String HPDF_COUNTRY_MU = 'MU';

const String HPDF_COUNTRY_YT = 'YT';

const String HPDF_COUNTRY_MX = 'MX';

const String HPDF_COUNTRY_FM = 'FM';

const String HPDF_COUNTRY_MD = 'MD';

const String HPDF_COUNTRY_MC = 'MC';

const String HPDF_COUNTRY_MN = 'MN';

const String HPDF_COUNTRY_MS = 'MS';

const String HPDF_COUNTRY_MA = 'MA';

const String HPDF_COUNTRY_MZ = 'MZ';

const String HPDF_COUNTRY_MM = 'MM';

const String HPDF_COUNTRY_NA = 'NA';

const String HPDF_COUNTRY_NR = 'NR';

const String HPDF_COUNTRY_NP = 'NP';

const String HPDF_COUNTRY_NL = 'NL';

const String HPDF_COUNTRY_AN = 'AN';

const String HPDF_COUNTRY_NC = 'NC';

const String HPDF_COUNTRY_NZ = 'NZ';

const String HPDF_COUNTRY_NI = 'NI';

const String HPDF_COUNTRY_NE = 'NE';

const String HPDF_COUNTRY_NG = 'NG';

const String HPDF_COUNTRY_NU = 'NU';

const String HPDF_COUNTRY_NF = 'NF';

const String HPDF_COUNTRY_MP = 'MP';

const String HPDF_COUNTRY_NO = 'NO';

const String HPDF_COUNTRY_OM = 'OM';

const String HPDF_COUNTRY_PK = 'PK';

const String HPDF_COUNTRY_PW = 'PW';

const String HPDF_COUNTRY_PA = 'PA';

const String HPDF_COUNTRY_PG = 'PG';

const String HPDF_COUNTRY_PY = 'PY';

const String HPDF_COUNTRY_PE = 'PE';

const String HPDF_COUNTRY_PH = 'PH';

const String HPDF_COUNTRY_PN = 'PN';

const String HPDF_COUNTRY_PL = 'PL';

const String HPDF_COUNTRY_PT = 'PT';

const String HPDF_COUNTRY_PR = 'PR';

const String HPDF_COUNTRY_QA = 'QA';

const String HPDF_COUNTRY_RE = 'RE';

const String HPDF_COUNTRY_RO = 'RO';

const String HPDF_COUNTRY_RU = 'RU';

const String HPDF_COUNTRY_RW = 'RW';

const String HPDF_COUNTRY_KN = 'KN';

const String HPDF_COUNTRY_LC = 'LC';

const String HPDF_COUNTRY_VC = 'VC';

const String HPDF_COUNTRY_WS = 'WS';

const String HPDF_COUNTRY_SM = 'SM';

const String HPDF_COUNTRY_ST = 'ST';

const String HPDF_COUNTRY_SA = 'SA';

const String HPDF_COUNTRY_SN = 'SN';

const String HPDF_COUNTRY_SC = 'SC';

const String HPDF_COUNTRY_SL = 'SL';

const String HPDF_COUNTRY_SG = 'SG';

const String HPDF_COUNTRY_SK = 'SK';

const String HPDF_COUNTRY_SI = 'SI';

const String HPDF_COUNTRY_SB = 'SB';

const String HPDF_COUNTRY_SO = 'SO';

const String HPDF_COUNTRY_ZA = 'ZA';

const String HPDF_COUNTRY_ES = 'ES';

const String HPDF_COUNTRY_LK = 'LK';

const String HPDF_COUNTRY_SH = 'SH';

const String HPDF_COUNTRY_PM = 'PM';

const String HPDF_COUNTRY_SD = 'SD';

const String HPDF_COUNTRY_SR = 'SR';

const String HPDF_COUNTRY_SJ = 'SJ';

const String HPDF_COUNTRY_SZ = 'SZ';

const String HPDF_COUNTRY_SE = 'SE';

const String HPDF_COUNTRY_CH = 'CH';

const String HPDF_COUNTRY_SY = 'SY';

const String HPDF_COUNTRY_TW = 'TW';

const String HPDF_COUNTRY_TJ = 'TJ';

const String HPDF_COUNTRY_TZ = 'TZ';

const String HPDF_COUNTRY_TH = 'TH';

const String HPDF_COUNTRY_TG = 'TG';

const String HPDF_COUNTRY_TK = 'TK';

const String HPDF_COUNTRY_TO = 'TO';

const String HPDF_COUNTRY_TT = 'TT';

const String HPDF_COUNTRY_TN = 'TN';

const String HPDF_COUNTRY_TR = 'TR';

const String HPDF_COUNTRY_TM = 'TM';

const String HPDF_COUNTRY_TC = 'TC';

const String HPDF_COUNTRY_TV = 'TV';

const String HPDF_COUNTRY_UG = 'UG';

const String HPDF_COUNTRY_UA = 'UA';

const String HPDF_COUNTRY_AE = 'AE';

const String HPDF_COUNTRY_GB = 'GB';

const String HPDF_COUNTRY_US = 'US';

const String HPDF_COUNTRY_UM = 'UM';

const String HPDF_COUNTRY_UY = 'UY';

const String HPDF_COUNTRY_UZ = 'UZ';

const String HPDF_COUNTRY_VU = 'VU';

const String HPDF_COUNTRY_VA = 'VA';

const String HPDF_COUNTRY_VE = 'VE';

const String HPDF_COUNTRY_VN = 'VN';

const String HPDF_COUNTRY_VG = 'VG';

const String HPDF_COUNTRY_VI = 'VI';

const String HPDF_COUNTRY_WF = 'WF';

const String HPDF_COUNTRY_EH = 'EH';

const String HPDF_COUNTRY_YE = 'YE';

const String HPDF_COUNTRY_YU = 'YU';

const String HPDF_COUNTRY_ZR = 'ZR';

const String HPDF_COUNTRY_ZM = 'ZM';

const String HPDF_COUNTRY_ZW = 'ZW';

const String HPDF_LANG_AA = 'aa';

const String HPDF_LANG_AB = 'ab';

const String HPDF_LANG_AF = 'af';

const String HPDF_LANG_AM = 'am';

const String HPDF_LANG_AR = 'ar';

const String HPDF_LANG_AS = 'as';

const String HPDF_LANG_AY = 'ay';

const String HPDF_LANG_AZ = 'az';

const String HPDF_LANG_BA = 'ba';

const String HPDF_LANG_BE = 'be';

const String HPDF_LANG_BG = 'bg';

const String HPDF_LANG_BH = 'bh';

const String HPDF_LANG_BI = 'bi';

const String HPDF_LANG_BN = 'bn';

const String HPDF_LANG_BO = 'bo';

const String HPDF_LANG_BR = 'br';

const String HPDF_LANG_CA = 'ca';

const String HPDF_LANG_CO = 'co';

const String HPDF_LANG_CS = 'cs';

const String HPDF_LANG_CY = 'cy';

const String HPDF_LANG_DA = 'da';

const String HPDF_LANG_DE = 'de';

const String HPDF_LANG_DZ = 'dz';

const String HPDF_LANG_EL = 'el';

const String HPDF_LANG_EN = 'en';

const String HPDF_LANG_EO = 'eo';

const String HPDF_LANG_ES = 'es';

const String HPDF_LANG_ET = 'et';

const String HPDF_LANG_EU = 'eu';

const String HPDF_LANG_FA = 'fa';

const String HPDF_LANG_FI = 'fi';

const String HPDF_LANG_FJ = 'fj';

const String HPDF_LANG_FO = 'fo';

const String HPDF_LANG_FR = 'fr';

const String HPDF_LANG_FY = 'fy';

const String HPDF_LANG_GA = 'ga';

const String HPDF_LANG_GD = 'gd';

const String HPDF_LANG_GL = 'gl';

const String HPDF_LANG_GN = 'gn';

const String HPDF_LANG_GU = 'gu';

const String HPDF_LANG_HA = 'ha';

const String HPDF_LANG_HI = 'hi';

const String HPDF_LANG_HR = 'hr';

const String HPDF_LANG_HU = 'hu';

const String HPDF_LANG_HY = 'hy';

const String HPDF_LANG_IA = 'ia';

const String HPDF_LANG_IE = 'ie';

const String HPDF_LANG_IK = 'ik';

const String HPDF_LANG_IN = 'in';

const String HPDF_LANG_IS = 'is';

const String HPDF_LANG_IT = 'it';

const String HPDF_LANG_IW = 'iw';

const String HPDF_LANG_JA = 'ja';

const String HPDF_LANG_JI = 'ji';

const String HPDF_LANG_JW = 'jw';

const String HPDF_LANG_KA = 'ka';

const String HPDF_LANG_KK = 'kk';

const String HPDF_LANG_KL = 'kl';

const String HPDF_LANG_KM = 'km';

const String HPDF_LANG_KN = 'kn';

const String HPDF_LANG_KO = 'ko';

const String HPDF_LANG_KS = 'ks';

const String HPDF_LANG_KU = 'ku';

const String HPDF_LANG_KY = 'ky';

const String HPDF_LANG_LA = 'la';

const String HPDF_LANG_LN = 'ln';

const String HPDF_LANG_LO = 'lo';

const String HPDF_LANG_LT = 'lt';

const String HPDF_LANG_LV = 'lv';

const String HPDF_LANG_MG = 'mg';

const String HPDF_LANG_MI = 'mi';

const String HPDF_LANG_MK = 'mk';

const String HPDF_LANG_ML = 'ml';

const String HPDF_LANG_MN = 'mn';

const String HPDF_LANG_MO = 'mo';

const String HPDF_LANG_MR = 'mr';

const String HPDF_LANG_MS = 'ms';

const String HPDF_LANG_MT = 'mt';

const String HPDF_LANG_MY = 'my';

const String HPDF_LANG_NA = 'na';

const String HPDF_LANG_NE = 'ne';

const String HPDF_LANG_NL = 'nl';

const String HPDF_LANG_NO = 'no';

const String HPDF_LANG_OC = 'oc';

const String HPDF_LANG_OM = 'om';

const String HPDF_LANG_OR = 'or';

const String HPDF_LANG_PA = 'pa';

const String HPDF_LANG_PL = 'pl';

const String HPDF_LANG_PS = 'ps';

const String HPDF_LANG_PT = 'pt';

const String HPDF_LANG_QU = 'qu';

const String HPDF_LANG_RM = 'rm';

const String HPDF_LANG_RN = 'rn';

const String HPDF_LANG_RO = 'ro';

const String HPDF_LANG_RU = 'ru';

const String HPDF_LANG_RW = 'rw';

const String HPDF_LANG_SA = 'sa';

const String HPDF_LANG_SD = 'sd';

const String HPDF_LANG_SG = 'sg';

const String HPDF_LANG_SH = 'sh';

const String HPDF_LANG_SI = 'si';

const String HPDF_LANG_SK = 'sk';

const String HPDF_LANG_SL = 'sl';

const String HPDF_LANG_SM = 'sm';

const String HPDF_LANG_SN = 'sn';

const String HPDF_LANG_SO = 'so';

const String HPDF_LANG_SQ = 'sq';

const String HPDF_LANG_SR = 'sr';

const String HPDF_LANG_SS = 'ss';

const String HPDF_LANG_ST = 'st';

const String HPDF_LANG_SU = 'su';

const String HPDF_LANG_SV = 'sv';

const String HPDF_LANG_SW = 'sw';

const String HPDF_LANG_TA = 'ta';

const String HPDF_LANG_TE = 'te';

const String HPDF_LANG_TG = 'tg';

const String HPDF_LANG_TH = 'th';

const String HPDF_LANG_TI = 'ti';

const String HPDF_LANG_TK = 'tk';

const String HPDF_LANG_TL = 'tl';

const String HPDF_LANG_TN = 'tn';

const String HPDF_LANG_TR = 'tr';

const String HPDF_LANG_TS = 'ts';

const String HPDF_LANG_TT = 'tt';

const String HPDF_LANG_TW = 'tw';

const String HPDF_LANG_UK = 'uk';

const String HPDF_LANG_UR = 'ur';

const String HPDF_LANG_UZ = 'uz';

const String HPDF_LANG_VI = 'vi';

const String HPDF_LANG_VO = 'vo';

const String HPDF_LANG_WO = 'wo';

const String HPDF_LANG_XH = 'xh';

const String HPDF_LANG_YO = 'yo';

const String HPDF_LANG_ZH = 'zh';

const String HPDF_LANG_ZU = 'zu';

const int HPDF_GMODE_PAGE_DESCRIPTION = 1;

const int HPDF_GMODE_PATH_OBJECT = 2;

const int HPDF_GMODE_TEXT_OBJECT = 4;

const int HPDF_GMODE_CLIPPING_PATH = 8;

const int HPDF_GMODE_SHADING = 16;

const int HPDF_GMODE_INLINE_IMAGE = 32;

const int HPDF_GMODE_EXTERNAL_OBJECT = 64;

const int HPDF_SIG_BYTES = 1095779398;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int HPDF_ARRAY_COUNT_ERR = 4097;

const int HPDF_ARRAY_ITEM_NOT_FOUND = 4098;

const int HPDF_ARRAY_ITEM_UNEXPECTED_TYPE = 4099;

const int HPDF_BINARY_LENGTH_ERR = 4100;

const int HPDF_CANNOT_GET_PALLET = 4101;

const int HPDF_DICT_COUNT_ERR = 4103;

const int HPDF_DICT_ITEM_NOT_FOUND = 4104;

const int HPDF_DICT_ITEM_UNEXPECTED_TYPE = 4105;

const int HPDF_DICT_STREAM_LENGTH_NOT_FOUND = 4106;

const int HPDF_DOC_ENCRYPTDICT_NOT_FOUND = 4107;

const int HPDF_DOC_INVALID_OBJECT = 4108;

const int HPDF_DUPLICATE_REGISTRATION = 4110;

const int HPDF_EXCEED_JWW_CODE_NUM_LIMIT = 4111;

const int HPDF_ENCRYPT_INVALID_PASSWORD = 4113;

const int HPDF_ERR_UNKNOWN_CLASS = 4115;

const int HPDF_EXCEED_GSTATE_LIMIT = 4116;

const int HPDF_FAILD_TO_ALLOC_MEM = 4117;

const int HPDF_FILE_IO_ERROR = 4118;

const int HPDF_FILE_OPEN_ERROR = 4119;

const int HPDF_FONT_EXISTS = 4121;

const int HPDF_FONT_INVALID_WIDTHS_TABLE = 4122;

const int HPDF_INVALID_AFM_HEADER = 4123;

const int HPDF_INVALID_ANNOTATION = 4124;

const int HPDF_INVALID_BIT_PER_COMPONENT = 4126;

const int HPDF_INVALID_CHAR_MATRICS_DATA = 4127;

const int HPDF_INVALID_COLOR_SPACE = 4128;

const int HPDF_INVALID_COMPRESSION_MODE = 4129;

const int HPDF_INVALID_DATE_TIME = 4130;

const int HPDF_INVALID_DESTINATION = 4131;

const int HPDF_INVALID_DOCUMENT = 4133;

const int HPDF_INVALID_DOCUMENT_STATE = 4134;

const int HPDF_INVALID_ENCODER = 4135;

const int HPDF_INVALID_ENCODER_TYPE = 4136;

const int HPDF_INVALID_ENCODING_NAME = 4139;

const int HPDF_INVALID_ENCRYPT_KEY_LEN = 4140;

const int HPDF_INVALID_FONTDEF_DATA = 4141;

const int HPDF_INVALID_FONTDEF_TYPE = 4142;

const int HPDF_INVALID_FONT_NAME = 4143;

const int HPDF_INVALID_IMAGE = 4144;

const int HPDF_INVALID_JPEG_DATA = 4145;

const int HPDF_INVALID_N_DATA = 4146;

const int HPDF_INVALID_OBJECT = 4147;

const int HPDF_INVALID_OBJ_ID = 4148;

const int HPDF_INVALID_OPERATION = 4149;

const int HPDF_INVALID_OUTLINE = 4150;

const int HPDF_INVALID_PAGE = 4151;

const int HPDF_INVALID_PAGES = 4152;

const int HPDF_INVALID_PARAMETER = 4153;

const int HPDF_INVALID_PNG_IMAGE = 4155;

const int HPDF_INVALID_STREAM = 4156;

const int HPDF_MISSING_FILE_NAME_ENTRY = 4157;

const int HPDF_INVALID_TTC_FILE = 4159;

const int HPDF_INVALID_TTC_INDEX = 4160;

const int HPDF_INVALID_WX_DATA = 4161;

const int HPDF_ITEM_NOT_FOUND = 4162;

const int HPDF_LIBPNG_ERROR = 4163;

const int HPDF_NAME_INVALID_VALUE = 4164;

const int HPDF_NAME_OUT_OF_RANGE = 4165;

const int HPDF_PAGE_INVALID_PARAM_COUNT = 4168;

const int HPDF_PAGES_MISSING_KIDS_ENTRY = 4169;

const int HPDF_PAGE_CANNOT_FIND_OBJECT = 4170;

const int HPDF_PAGE_CANNOT_GET_ROOT_PAGES = 4171;

const int HPDF_PAGE_CANNOT_RESTORE_GSTATE = 4172;

const int HPDF_PAGE_CANNOT_SET_PARENT = 4173;

const int HPDF_PAGE_FONT_NOT_FOUND = 4174;

const int HPDF_PAGE_INVALID_FONT = 4175;

const int HPDF_PAGE_INVALID_FONT_SIZE = 4176;

const int HPDF_PAGE_INVALID_GMODE = 4177;

const int HPDF_PAGE_INVALID_INDEX = 4178;

const int HPDF_PAGE_INVALID_ROTATE_VALUE = 4179;

const int HPDF_PAGE_INVALID_SIZE = 4180;

const int HPDF_PAGE_INVALID_XOBJECT = 4181;

const int HPDF_PAGE_OUT_OF_RANGE = 4182;

const int HPDF_REAL_OUT_OF_RANGE = 4183;

const int HPDF_STREAM_EOF = 4184;

const int HPDF_STREAM_READLN_CONTINUE = 4185;

const int HPDF_STRING_OUT_OF_RANGE = 4187;

const int HPDF_THIS_FUNC_WAS_SKIPPED = 4188;

const int HPDF_TTF_CANNOT_EMBEDDING_FONT = 4189;

const int HPDF_TTF_INVALID_CMAP = 4190;

const int HPDF_TTF_INVALID_FOMAT = 4191;

const int HPDF_TTF_MISSING_TABLE = 4192;

const int HPDF_UNSUPPORTED_FONT_TYPE = 4193;

const int HPDF_UNSUPPORTED_FUNC = 4194;

const int HPDF_UNSUPPORTED_JPEG_FORMAT = 4195;

const int HPDF_UNSUPPORTED_TYPE1_FONT = 4196;

const int HPDF_XREF_COUNT_ERR = 4197;

const int HPDF_ZLIB_ERROR = 4198;

const int HPDF_INVALID_PAGE_INDEX = 4199;

const int HPDF_INVALID_URI = 4200;

const int HPDF_PAGE_LAYOUT_OUT_OF_RANGE = 4201;

const int HPDF_PAGE_MODE_OUT_OF_RANGE = 4208;

const int HPDF_PAGE_NUM_STYLE_OUT_OF_RANGE = 4209;

const int HPDF_ANNOT_INVALID_ICON = 4210;

const int HPDF_ANNOT_INVALID_BORDER_STYLE = 4211;

const int HPDF_PAGE_INVALID_DIRECTION = 4212;

const int HPDF_INVALID_FONT = 4213;

const int HPDF_PAGE_INSUFFICIENT_SPACE = 4214;

const int HPDF_PAGE_INVALID_DISPLAY_TIME = 4215;

const int HPDF_PAGE_INVALID_TRANSITION_TIME = 4216;

const int HPDF_INVALID_PAGE_SLIDESHOW_TYPE = 4217;

const int HPDF_EXT_GSTATE_OUT_OF_RANGE = 4224;

const int HPDF_INVALID_EXT_GSTATE = 4225;

const int HPDF_EXT_GSTATE_READ_ONLY = 4226;

const int HPDF_INVALID_U3D_DATA = 4227;

const int HPDF_NAME_CANNOT_GET_NAMES = 4228;

const int HPDF_INVALID_ICC_COMPONENT_NUM = 4229;

const int HPDF_INVALID_SHADING_TYPE = 4232;

const int HPDF_ID_LEN = 16;

const int HPDF_PASSWD_LEN = 32;

const int HPDF_ENCRYPT_KEY_MAX = 16;

const int HPDF_MD5_KEY_LEN = 16;

const int HPDF_PERMISSION_PAD = 4294967232;

const int HPDF_ARC4_BUF_SIZE = 256;

const int HPDF_STREAM_SIG_BYTES = 1398035021;

const int HPDF_STREAM_FILTER_NONE = 0;

const int HPDF_STREAM_FILTER_ASCIIHEX = 256;

const int HPDF_STREAM_FILTER_ASCII85 = 512;

const int HPDF_STREAM_FILTER_FLATE_DECODE = 1024;

const int HPDF_STREAM_FILTER_DCT_DECODE = 2048;

const int HPDF_STREAM_FILTER_CCITT_DECODE = 4096;

const int HPDF_ENCODER_SIG_BYTES = 1162756932;

const String HPDF_ENCODING_FONT_SPECIFIC = 'FontSpecific';

const String HPDF_ENCODING_STANDARD = 'StandardEncoding';

const String HPDF_ENCODING_MAC_ROMAN = 'MacRomanEncoding';

const String HPDF_ENCODING_WIN_ANSI = 'WinAnsiEncoding';

const String HPDF_ENCODING_ISO8859_2 = 'ISO8859-2';

const String HPDF_ENCODING_ISO8859_3 = 'ISO8859-3';

const String HPDF_ENCODING_ISO8859_4 = 'ISO8859-4';

const String HPDF_ENCODING_ISO8859_5 = 'ISO8859-5';

const String HPDF_ENCODING_ISO8859_6 = 'ISO8859-6';

const String HPDF_ENCODING_ISO8859_7 = 'ISO8859-7';

const String HPDF_ENCODING_ISO8859_8 = 'ISO8859-8';

const String HPDF_ENCODING_ISO8859_9 = 'ISO8859-9';

const String HPDF_ENCODING_ISO8859_10 = 'ISO8859-10';

const String HPDF_ENCODING_ISO8859_11 = 'ISO8859-11';

const String HPDF_ENCODING_ISO8859_13 = 'ISO8859-13';

const String HPDF_ENCODING_ISO8859_14 = 'ISO8859-14';

const String HPDF_ENCODING_ISO8859_15 = 'ISO8859-15';

const String HPDF_ENCODING_ISO8859_16 = 'ISO8859-16';

const String HPDF_ENCODING_CP1250 = 'CP1250';

const String HPDF_ENCODING_CP1251 = 'CP1251';

const String HPDF_ENCODING_CP1252 = 'CP1252';

const String HPDF_ENCODING_CP1253 = 'CP1253';

const String HPDF_ENCODING_CP1254 = 'CP1254';

const String HPDF_ENCODING_CP1255 = 'CP1255';

const String HPDF_ENCODING_CP1256 = 'CP1256';

const String HPDF_ENCODING_CP1257 = 'CP1257';

const String HPDF_ENCODING_CP1258 = 'CP1258';

const String HPDF_ENCODING_KOI8_R = 'KOI8-R';

const String char_NOTDEF = '.notdef';

const int HPDF_OTYPE_NONE = 0;

const int HPDF_OTYPE_DIRECT = 2147483648;

const int HPDF_OTYPE_INDIRECT = 1073741824;

const int HPDF_OTYPE_ANY = 3221225472;

const int HPDF_OTYPE_HIDDEN = 268435456;

const int HPDF_OCLASS_UNKNOWN = 1;

const int HPDF_OCLASS_NULL = 2;

const int HPDF_OCLASS_BOOLEAN = 3;

const int HPDF_OCLASS_NUMBER = 4;

const int HPDF_OCLASS_REAL = 5;

const int HPDF_OCLASS_NAME = 6;

const int HPDF_OCLASS_STRING = 7;

const int HPDF_OCLASS_BINARY = 8;

const int HPDF_OCLASS_ARRAY = 16;

const int HPDF_OCLASS_DICT = 17;

const int HPDF_OCLASS_PROXY = 18;

const int HPDF_OCLASS_DIRECT = 160;

const int HPDF_OCLASS_ANY = 255;

const int HPDF_OSUBCLASS_FONT = 256;

const int HPDF_OSUBCLASS_CATALOG = 512;

const int HPDF_OSUBCLASS_PAGES = 768;

const int HPDF_OSUBCLASS_PAGE = 1024;

const int HPDF_OSUBCLASS_XOBJECT = 1280;

const int HPDF_OSUBCLASS_OUTLINE = 1536;

const int HPDF_OSUBCLASS_DESTINATION = 1792;

const int HPDF_OSUBCLASS_ANNOTATION = 2048;

const int HPDF_OSUBCLASS_ENCRYPT = 2304;

const int HPDF_OSUBCLASS_EXT_GSTATE = 2560;

const int HPDF_OSUBCLASS_EXT_GSTATE_R = 2816;

const int HPDF_OSUBCLASS_NAMEDICT = 3072;

const int HPDF_OSUBCLASS_NAMETREE = 3328;

const int HPDF_OSUBCLASS_SHADING = 3584;

const int HPDF_FREE_ENTRY = 102;

const int HPDF_IN_USE_ENTRY = 110;

const int HPDF_FONTDEF_SIG_BYTES = 1179602516;

const int HPDF_FONT_FIXED_WIDTH = 1;

const int HPDF_FONT_SERIF = 2;

const int HPDF_FONT_SYMBOLIC = 4;

const int HPDF_FONT_SCRIPT = 8;

const int HPDF_FONT_STD_CHARSET = 32;

const int HPDF_FONT_ITALIC = 64;

const int HPDF_FONT_ALL_CAP = 65536;

const int HPDF_FONT_SMALL_CAP = 131072;

const int HPDF_FONT_FOURCE_BOLD = 262144;

const int HPDF_CID_W_TYPE_FROM_TO = 0;

const int HPDF_CID_W_TYPE_FROM_ARRAY = 1;

const int HPDF_TTF_FONT_TAG_LEN = 6;

const int HPDF_VER_DEFAULT = 0;
